{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"React Native Production-Grade Hybrid App Guide","text":"<p>Welcome to the comprehensive guide for building production-grade hybrid React Native applications. This documentation covers everything from setup to deployment, following industry best practices.</p>"},{"location":"#overview","title":"Overview","text":"<p>This guide is designed to take you from React Native beginner to production-ready developer. Whether you're building your first mobile app or scaling an existing application, you'll find practical advice, best practices, and real-world examples.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":""},{"location":"#development-fundamentals","title":"Development Fundamentals","text":"<ul> <li>Setting up a robust development environment</li> <li>Organizing scalable project structures</li> <li>Implementing clean architecture patterns</li> <li>Managing state effectively across your application</li> </ul>"},{"location":"#production-readiness","title":"Production Readiness","text":"<ul> <li>Building secure authentication systems</li> <li>Implementing proper error handling and monitoring</li> <li>Optimizing performance for mobile devices</li> <li>Setting up automated testing and deployment pipelines</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Integrating native modules and platform-specific code</li> <li>Implementing offline-first architectures</li> <li>Managing real-time data synchronization</li> <li>Deploying to app stores with confidence</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"graph TB     A[React Native App] --&gt; B[Presentation Layer]     A --&gt; C[Business Logic Layer]     A --&gt; D[Data Layer]     A --&gt; E[Infrastructure Layer]      B --&gt; B1[Components]     B --&gt; B2[Screens]     B --&gt; B3[Navigation]      C --&gt; C1[Custom Hooks]     C --&gt; C2[Services]     C --&gt; C3[Use Cases]      D --&gt; D1[State Management]     D --&gt; D2[API Client]     D --&gt; D3[Local Storage]      E --&gt; E1[Utilities]     E --&gt; E2[Constants]     E --&gt; E3[Configuration]"},{"location":"#technology-stack","title":"Technology Stack","text":""},{"location":"#core-technologies","title":"Core Technologies","text":"<ul> <li>React Native 0.79+</li> <li>Expo SDK 53+</li> <li>TypeScript 5.8+</li> <li>Node.js 18+</li> </ul>"},{"location":"#recommended-libraries","title":"Recommended Libraries","text":""},{"location":"#state-management","title":"State Management","text":"<ul> <li>Zustand - Lightweight state management</li> <li>React Query - Server state management</li> <li>MMKV - Fast key-value storage</li> </ul>"},{"location":"#ui-styling","title":"UI &amp; Styling","text":"<ul> <li>NativeWind - Tailwind CSS for React Native</li> <li>React Native Reanimated - Smooth animations</li> <li>React Native Gesture Handler - Touch interactions</li> </ul>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Expo Router - File-based routing</li> <li>React Navigation - Traditional navigation</li> </ul>"},{"location":"#development-tools","title":"Development Tools","text":"<ul> <li>ESLint - Code linting</li> <li>Prettier - Code formatting</li> <li>Jest - Unit testing</li> <li>Detox - End-to-end testing</li> </ul>"},{"location":"#quick-start-paths","title":"Quick Start Paths","text":""},{"location":"#for-beginners","title":"For Beginners","text":"<ol> <li>Environment Setup</li> <li>Project Structure</li> <li>Component Design</li> <li>Styling Systems</li> </ol>"},{"location":"#for-intermediate-developers","title":"For Intermediate Developers","text":"<ol> <li>App Architecture</li> <li>State Management</li> <li>API Integration</li> <li>Testing</li> </ol>"},{"location":"#for-advanced-developers","title":"For Advanced Developers","text":"<ol> <li>Performance Optimization</li> <li>Security Implementation</li> <li>CI/CD Setup</li> <li>Monitoring &amp; Analytics</li> </ol>"},{"location":"#development-workflow","title":"Development Workflow","text":"flowchart LR     A[Setup Environment] --&gt; B[Create Project]     B --&gt; C[Design Architecture]     C --&gt; D[Implement Features]     D --&gt; E[Write Tests]     E --&gt; F[Optimize Performance]     F --&gt; G[Deploy to Stores]     G --&gt; H[Monitor &amp; Maintain]     H --&gt; D"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before diving into this guide, you should have:</p> <ul> <li>Basic knowledge of JavaScript/TypeScript</li> <li>Understanding of React fundamentals</li> <li>Familiarity with mobile app concepts</li> <li>A computer capable of running development tools</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report documentation bugs and improvements</li> <li>Discussions: Ask questions and get community support</li> <li>Examples: Check practical implementations in the examples folder</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This documentation is a living resource. Contributions are welcome:</p> <ol> <li>Report Issues: Found something unclear or outdated?</li> <li>Suggest Improvements: Have a better way to explain something?</li> <li>Add Examples: Real-world examples are always valuable</li> <li>Share Best Practices: Learned something new? Share it with the community</li> </ol>"},{"location":"#license","title":"License","text":"<p>This documentation is open source and available under the MIT License.</p> <p>Ready to build amazing React Native apps? Start with Environment Setup!</p>"},{"location":"setup-mkdocs/","title":"MkDocs Setup Guide","text":"<p>Quick setup guide for the React Native Production Documentation.</p>"},{"location":"setup-mkdocs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"setup-mkdocs/#installation","title":"Installation","text":""},{"location":"setup-mkdocs/#option-1-using-pip-directly","title":"Option 1: Using pip directly","text":"<pre><code>pip install mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"setup-mkdocs/#option-2-using-requirementstxt","title":"Option 2: Using requirements.txt","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"setup-mkdocs/#running-the-documentation","title":"Running the Documentation","text":""},{"location":"setup-mkdocs/#development-server","title":"Development Server","text":"<pre><code># Start the development server\nmkdocs serve\n\n# The documentation will be available at http://127.0.0.1:8000\n</code></pre>"},{"location":"setup-mkdocs/#building-for-production","title":"Building for Production","text":"<pre><code># Build static files\nmkdocs build\n\n# Files will be generated in the 'site' directory\n</code></pre>"},{"location":"setup-mkdocs/#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<pre><code># Deploy to GitHub Pages (requires git repository)\nmkdocs gh-deploy\n</code></pre>"},{"location":"setup-mkdocs/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p>The documentation includes mermaid diagrams for architecture visualization. Since we removed the mermaid plugin to avoid dependency issues, the diagrams will appear as code blocks.</p>"},{"location":"setup-mkdocs/#to-enable-mermaid-rendering","title":"To enable mermaid rendering:","text":"<ol> <li>Option A: Use GitHub Pages - GitHub automatically renders mermaid diagrams</li> <li>Option B: Add mermaid plugin (if you want local rendering):</li> </ol> <pre><code>pip install mkdocs-mermaid2-plugin\n</code></pre> <p>Then update <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - mermaid2\n\nmarkdown_extensions:\n  - pymdownx.superfences:\ncustom_fences:\n  - name: mermaid\nclass: mermaid\nformat: !!python/name:mermaid2.fence_mermaid\n</code></pre> <ol> <li>Option C: Use online mermaid editor - Copy diagram code to https://mermaid.live/</li> </ol>"},{"location":"setup-mkdocs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup-mkdocs/#common-issues","title":"Common Issues","text":"<ol> <li>Python version: Ensure you're using Python 3.8+</li> <li>Permission errors: Use <code>pip install --user</code> if needed</li> <li>Module not found: Make sure all dependencies are installed</li> </ol>"},{"location":"setup-mkdocs/#verification","title":"Verification","text":"<pre><code># Check mkdocs installation\nmkdocs --version\n\n# Check if all plugins are working\nmkdocs serve --verbose\n</code></pre>"},{"location":"setup-mkdocs/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation follows this structure:</p> <pre><code>docs/\n\u251c\u2500\u2500 index.md                            # Main landing page\n\u251c\u2500\u2500 setup/                              # Environment setup guides\n\u251c\u2500\u2500 architecture/                       # App architecture patterns\n\u251c\u2500\u2500 ui/                                 # UI development guides\n\u251c\u2500\u2500 native/                             # Native integration\n\u251c\u2500\u2500 tools/                              # Development tools\n\u251c\u2500\u2500 data/                               # Data management\n\u251c\u2500\u2500 security/                           # Security implementation\n\u251c\u2500\u2500 deployment/                         # CI/CD and deployment\n\u2514\u2500\u2500 monitoring/                         # Monitoring and analytics\n</code></pre>"},{"location":"setup-mkdocs/#next-steps","title":"Next Steps","text":"<ol> <li>Run <code>mkdocs serve</code> to start the development server</li> <li>Navigate to http://127.0.0.1:8000 to view the documentation</li> <li>Edit markdown files in the <code>docs/</code> directory</li> <li>Changes will automatically reload in the browser</li> </ol> <p>The documentation is now ready to use without any complex dependencies!</p>"},{"location":"architecture/app-architecture/","title":"App Architecture","text":"<p>Learn how to design scalable, maintainable React Native applications using proven architectural patterns that work with any project structure.</p> <p>Related Reading: See Project Structure for guidance on organizing your files and folders.</p>"},{"location":"architecture/app-architecture/#architecture-principles","title":"Architecture Principles","text":""},{"location":"architecture/app-architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Presentation Layer: UI components and screens</li> <li>Business Logic Layer: Custom hooks and services</li> <li>Data Layer: State management and API calls</li> <li>Infrastructure Layer: Utilities, constants, and configuration</li> </ul>"},{"location":"architecture/app-architecture/#2-dependency-inversion","title":"2. Dependency Inversion","text":"<ul> <li>High-level modules should not depend on low-level modules</li> <li>Both should depend on abstractions</li> <li>Use dependency injection for better testability</li> </ul>"},{"location":"architecture/app-architecture/#3-single-responsibility","title":"3. Single Responsibility","text":"<ul> <li>Each component/function should have one reason to change</li> <li>Keep components focused on a single task</li> <li>Extract complex logic into custom hooks</li> </ul>"},{"location":"architecture/app-architecture/#4-progressive-enhancement","title":"4. Progressive Enhancement","text":"<ul> <li>Start with simple patterns and evolve as needed</li> <li>Refactor when complexity increases, not before</li> <li>Maintain consistency within each architectural layer</li> </ul>"},{"location":"architecture/app-architecture/#architecture-patterns-by-project-phase","title":"Architecture Patterns by Project Phase","text":""},{"location":"architecture/app-architecture/#phase-1-flat-architecture-small-projects","title":"Phase 1: Flat Architecture (Small Projects)","text":"<p>Structure: All code at root level (<code>components/</code>, <code>hooks/</code>, <code>lib/</code>)</p> <p>Patterns: - Container/Presenter for complex screens - Custom Hooks for business logic - Service Layer for API calls - Simple State Management (Context or Zustand)</p>"},{"location":"architecture/app-architecture/#phase-2-domain-architecture-medium-projects","title":"Phase 2: Domain Architecture (Medium Projects)","text":"<p>Structure: Feature grouping (<code>features/auth/</code>, <code>features/profile/</code>)</p> <p>Patterns: - Feature Modules with clear boundaries - Shared Components in dedicated folder - Domain Services per feature - Centralized State with feature slices</p>"},{"location":"architecture/app-architecture/#phase-3-feature-based-architecture-large-projects","title":"Phase 3: Feature-Based Architecture (Large Projects)","text":"<p>Structure: Full feature isolation (<code>src/features/</code>, <code>src/shared/</code>)</p> <p>Patterns: - Clean Architecture principles - Feature Independence with minimal coupling - Dependency Injection for services - Advanced State Management with normalized data</p>"},{"location":"architecture/app-architecture/#clean-architecture-implementation","title":"Clean Architecture Implementation","text":""},{"location":"architecture/app-architecture/#domain-layer-business-entities","title":"Domain Layer - Business Entities","text":"<pre><code>// Domain entities (business rules)\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n}\n\ninterface Post {\n  id: string;\n  userId: string;\n  content: string;\n  createdAt: Date;\n  likes: number;\n}\n\n// Domain repositories (contracts)\ninterface UserRepository {\n  getUser(id: string): Promise&lt;User&gt;;\n  updateUser(user: User): Promise&lt;User&gt;;\n  getUserPosts(userId: string): Promise&lt;Post[]&gt;;\n}\n</code></pre>"},{"location":"architecture/app-architecture/#application-layer-use-cases","title":"Application Layer - Use Cases","text":"<pre><code>// Use cases (application business rules)\nclass GetUserProfileUseCase {\n  constructor(private userRepository: UserRepository) {}\n\n  async execute(userId: string): Promise&lt;{user: User; posts: Post[]}&gt; {\n    const [user, posts] = await Promise.all([\n      this.userRepository.getUser(userId),\n      this.userRepository.getUserPosts(userId)\n    ]);\n\n    return { user, posts };\n  }\n}\n\nclass UpdateUserProfileUseCase {\n  constructor(private userRepository: UserRepository) {}\n\n  async execute(userId: string, updates: Partial&lt;User&gt;): Promise&lt;User&gt; {\n    const currentUser = await this.userRepository.getUser(userId);\n    const updatedUser = { ...currentUser, ...updates };\n    return this.userRepository.updateUser(updatedUser);\n  }\n}\n</code></pre>"},{"location":"architecture/app-architecture/#infrastructure-layer-external-concerns","title":"Infrastructure Layer - External Concerns","text":"<pre><code>// Infrastructure (external services)\nclass ApiUserRepository implements UserRepository {\n  constructor(private apiClient: ApiClient) {}\n\n  async getUser(id: string): Promise&lt;User&gt; {\n    return this.apiClient.get(`/users/${id}`);\n  }\n\n  async updateUser(user: User): Promise&lt;User&gt; {\n    return this.apiClient.put(`/users/${user.id}`, user);\n  }\n\n  async getUserPosts(userId: string): Promise&lt;Post[]&gt; {\n    return this.apiClient.get(`/users/${userId}/posts`);\n  }\n}\n</code></pre>"},{"location":"architecture/app-architecture/#presentation-layer-react-components","title":"Presentation Layer - React Components","text":"<pre><code>// Presentation (UI components)\nfunction UserProfile({ userId }: { userId: string }) {\n  const { data, isLoading, error } = useUserProfile(userId);\n\n  if (isLoading) return &lt;LoadingSpinner /&gt;;\n  if (error) return &lt;ErrorMessage error={error} /&gt;;\n  if (!data) return &lt;NotFound /&gt;;\n\n  return (\n    &lt;View&gt;\n      &lt;UserHeader user={data.user} /&gt;\n      &lt;PostList posts={data.posts} /&gt;\n    &lt;/View&gt;\n  );\n}\n\n// Custom hook (application layer interface)\nfunction useUserProfile(userId: string) {\n  return useQuery({\n    queryKey: ['userProfile', userId],\n    queryFn: () =&gt; getUserProfileUseCase.execute(userId),\n  });\n}\n</code></pre>"},{"location":"architecture/app-architecture/#custom-hooks-pattern","title":"Custom Hooks Pattern","text":""},{"location":"architecture/app-architecture/#business-logic-hooks","title":"Business Logic Hooks","text":"<pre><code>// hooks/useAuth.ts\nexport function useAuth() {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const login = async (email: string, password: string) =&gt; {\n    setIsLoading(true);\n    try {\n      const user = await authService.login(email, password);\n      setUser(user);\n      await secureStorage.setItem('token', user.token);\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () =&gt; {\n    setUser(null);\n    await secureStorage.removeItem('token');\n  };\n\n  return { user, isLoading, login, logout };\n}\n\n// hooks/useApi.ts\nexport function useApi&lt;T&gt;(endpoint: string, options?: RequestInit) {\n  const [data, setData] = useState&lt;T | null&gt;(null);\n  const [error, setError] = useState&lt;Error | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const execute = useCallback(async () =&gt; {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await apiClient.request(endpoint, options);\n      setData(response.data);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [endpoint, options]);\n\n  useEffect(() =&gt; {\n    execute();\n  }, [execute]);\n\n  return { data, error, isLoading, refetch: execute };\n}\n</code></pre>"},{"location":"architecture/app-architecture/#data-fetching-hooks","title":"Data Fetching Hooks","text":"<pre><code>// hooks/useUser.ts\nexport function useUser(userId: string) {\n  return useQuery({\n    queryKey: ['user', userId],\n    queryFn: () =&gt; userService.getUser(userId),\n    enabled: !!userId,\n  });\n}\n\n// hooks/useUsers.ts\nexport function useUsers(filters?: UserFilters) {\n  return useQuery({\n    queryKey: ['users', filters],\n    queryFn: () =&gt; userService.getUsers(filters),\n  });\n}\n\n// hooks/useUpdateUser.ts\nexport function useUpdateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: userService.updateUser,\n    onSuccess: updatedUser =&gt; {\n      queryClient.setQueryData(['user', updatedUser.id], updatedUser);\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n}\n</code></pre>"},{"location":"architecture/app-architecture/#service-layer-pattern","title":"Service Layer Pattern","text":""},{"location":"architecture/app-architecture/#api-service-structure","title":"API Service Structure","text":"<pre><code>// services/api/client.ts\nclass ApiClient {\n  private baseURL: string;\n  private token: string | null = null;\n\n  constructor(baseURL: string) {\n    this.baseURL = baseURL;\n  }\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  async request&lt;T&gt;(endpoint: string, options?: RequestInit): Promise&lt;T&gt; {\n    const url = `${this.baseURL}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.token &amp;&amp; { Authorization: `Bearer ${this.token}` }),\n      ...options?.headers,\n    };\n\n    const response = await fetch(url, { ...options, headers });\n\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n\n    return response.json();\n  }\n}\n\nexport const apiClient = new ApiClient(process.env.EXPO_PUBLIC_API_URL!);\n\n// services/userService.ts\nexport const userService = {\n  async getUser(id: string): Promise&lt;User&gt; {\n    return apiClient.request(`/users/${id}`);\n  },\n\n  async updateUser(user: Partial&lt;User&gt;): Promise&lt;User&gt; {\n    return apiClient.request(`/users/${user.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(user),\n    });\n  },\n\n  async getUsers(filters?: UserFilters): Promise&lt;User[]&gt; {\n    const params = new URLSearchParams(filters as any);\n    return apiClient.request(`/users?${params}`);\n  },\n};\n</code></pre>"},{"location":"architecture/app-architecture/#state-management-architecture","title":"State Management Architecture","text":""},{"location":"architecture/app-architecture/#zustand-store-pattern","title":"Zustand Store Pattern","text":"<pre><code>// store/slices/authSlice.ts\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n}\n\ninterface AuthActions {\n  login: (user: User, token: string) =&gt; void;\n  logout: () =&gt; void;\n  updateUser: (updates: Partial&lt;User&gt;) =&gt; void;\n}\n\nexport const useAuthStore = create&lt;AuthState &amp; AuthActions&gt;()(\n  persist(\n    (set, get) =&gt; ({\n      // State\n      user: null,\n      token: null,\n      isAuthenticated: false,\n\n      // Actions\n      login: (user, token) =&gt; {\n        set({ user, token, isAuthenticated: true });\n        apiClient.setToken(token);\n      },\n\n      logout: () =&gt; {\n        set({ user: null, token: null, isAuthenticated: false });\n        apiClient.setToken('');\n      },\n\n      updateUser: updates =&gt; {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({ user: { ...currentUser, ...updates } });\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: state =&gt; ({\n        user: state.user,\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n\n// Selectors\nexport const useAuth = () =&gt;\n  useAuthStore(state =&gt; ({\n    user: state.user,\n    isAuthenticated: state.isAuthenticated,\n    login: state.login,\n    logout: state.logout,\n  }));\n\nexport const useUser = () =&gt; useAuthStore(state =&gt; state.user);\n</code></pre>"},{"location":"architecture/app-architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/app-architecture/#containerpresenter-pattern","title":"Container/Presenter Pattern","text":"<pre><code>// containers/UserProfileContainer.tsx\nexport function UserProfileContainer({ userId }: { userId: string }) {\n  const { data: user, isLoading, error } = useUser(userId);\n  const updateUser = useUpdateUser();\n\n  const handleUpdateUser = (updates: Partial&lt;User&gt;) =&gt; {\n    updateUser.mutate({ ...user, ...updates });\n  };\n\n  if (isLoading) return &lt;LoadingSpinner /&gt;;\n  if (error) return &lt;ErrorMessage error={error} /&gt;;\n  if (!user) return &lt;NotFound /&gt;;\n\n  return (\n    &lt;UserProfilePresenter\n      user={user}\n      onUpdateUser={handleUpdateUser}\n      isUpdating={updateUser.isPending}\n      /&gt;\n    );\n  }\n\n// components/UserProfilePresenter.tsx\n  interface UserProfilePresenterProps {\n    user: User;\n    onUpdateUser: (updates: Partial&lt;User&gt;) =&gt; void;\n    isUpdating: boolean;\n  }\n\n  export function UserProfilePresenter({\n    user,\n    onUpdateUser,\n    isUpdating\n  }: UserProfilePresenterProps) {\n    return (\n      &lt;View className=\"p-4\"&gt;\n        &lt;Avatar source={{ uri: user.avatar }} /&gt;\n        &lt;Text className=\"text-xl font-bold\"&gt;{user.name}&lt;/Text&gt;\n        &lt;Text className=\"text-gray-600\"&gt;{user.email}&lt;/Text&gt;\n\n        &lt;Button\n          onPress={() =&gt; onUpdateUser({ name: 'New Name' })}\n          disabled={isUpdating}\n          &gt;\n          {isUpdating ? 'Updating...' : 'Update Profile'}\n        &lt;/Button&gt;\n      &lt;/View&gt;\n    );\n  }\n</code></pre>"},{"location":"architecture/app-architecture/#compound-component-pattern","title":"Compound Component Pattern","text":"<pre><code>// components/Card/Card.tsx\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nfunction Card({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('bg-white rounded-lg shadow-sm', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\nfunction CardHeader({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('p-4 border-b border-gray-200', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\nfunction CardContent({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('p-4', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\nfunction CardFooter({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('p-4 border-t border-gray-200', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\n// Compound component\nCard.Header = CardHeader;\nCard.Content = CardContent;\nCard.Footer = CardFooter;\n\nexport { Card };\n\n// Usage\n&lt;Card&gt;\n  &lt;Card.Header&gt;\n    &lt;Text className=\"text-lg font-semibold\"&gt;User Profile&lt;/Text&gt;\n  &lt;/Card.Header&gt;\n  &lt;Card.Content&gt;\n    &lt;Text&gt;User information goes here&lt;/Text&gt;\n  &lt;/Card.Content&gt;\n  &lt;Card.Footer&gt;\n    &lt;Button&gt;Edit Profile&lt;/Button&gt;\n  &lt;/Card.Footer&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"architecture/app-architecture/#dependency-injection","title":"Dependency Injection","text":""},{"location":"architecture/app-architecture/#service-container-pattern","title":"Service Container Pattern","text":"<pre><code>// lib/container.ts\nclass Container {\n  private services = new Map&lt;string, any&gt;();\n\n  register&lt;T&gt;(name: string, service: T): void {\n    this.services.set(name, service);\n  }\n\n  resolve&lt;T&gt;(name: string): T {\n    const service = this.services.get(name);\n    if (!service) {\n      throw new Error(`Service ${name} not found`);\n    }\n    return service;\n  }\n}\n\nexport const container = new Container();\n\n// Register services\ncontainer.register('userService', userService);\ncontainer.register('authService', authService);\n\n// Use in hooks\nexport function useUserService() {\n  return container.resolve&lt;typeof userService&gt;('userService');\n}\n</code></pre>"},{"location":"architecture/app-architecture/#architecture-evolution-strategy","title":"Architecture Evolution Strategy","text":""},{"location":"architecture/app-architecture/#start-simple-scale-smart","title":"Start Simple \u2192 Scale Smart","text":"<pre><code>// Phase 1: Simple Hook (Flat Structure)\nfunction useAuth() {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n\n  const login = async (email: string, password: string) =&gt; {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n    const user = await response.json();\n    setUser(user);\n  };\n\n  return { user, login };\n}\n\n// Phase 2: Service Layer (Domain Structure)\nfunction useAuth() {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n\n  const login = async (email: string, password: string) =&gt; {\n    const user = await authService.login(email, password);\n    setUser(user);\n  };\n\n  return { user, login };\n}\n\n// Phase 3: Use Cases (Feature-Based Structure)\nfunction useAuth() {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n\n  const login = async (email: string, password: string) =&gt; {\n    const user = await loginUseCase.execute(email, password);\n    setUser(user);\n  };\n\n  return { user, login };\n}\n</code></pre>"},{"location":"architecture/app-architecture/#best-practices","title":"Best Practices","text":""},{"location":"architecture/app-architecture/#1-keep-components-pure","title":"1. Keep Components Pure","text":"<pre><code>// \u274c Bad - Side effects in component\nfunction UserProfile({ userId }: { userId: string }) {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n\n  useEffect(() =&gt; {\n    fetch(`/api/users/${userId}`)\n    .then(res =&gt; res.json())\n    .then(setUser);\n  }, [userId]);\n\n  return &lt;Text&gt;{user?.name}&lt;/Text&gt;;\n}\n\n// \u2705 Good - Use custom hooks for side effects\nfunction UserProfile({ userId }: { userId: string }) {\n  const { user } = useUser(userId);\n  return &lt;Text&gt;{user?.name}&lt;/Text&gt;;\n}\n</code></pre>"},{"location":"architecture/app-architecture/#2-favor-composition-over-inheritance","title":"2. Favor Composition over Inheritance","text":"<pre><code>// \u274c Bad - Inheritance\nclass BaseButton extends Component {\n  render() {\n    return &lt;Pressable&gt;{this.props.children}&lt;/Pressable&gt;;\n  }\n}\n\n// \u2705 Good - Composition\nfunction Button({ variant = 'primary', children, ...props }) {\n  return (\n    &lt;Pressable\n      className={cn(\n        'px-4 py-2 rounded',\n        variant === 'primary' &amp;&amp; 'bg-blue-500',\n        variant === 'secondary' &amp;&amp; 'bg-gray-500'\n      )}\n      {...props}\n      &gt;\n      {children}\n    &lt;/Pressable&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/app-architecture/#3-use-typescript-effectively","title":"3. Use TypeScript Effectively","text":"<pre><code>// Define strict types\ninterface ApiResponse&lt;T&gt; {\n  data: T;\n  status: 'success' | 'error';\n  message?: string;\n}\n\n// Use generic constraints\ninterface Repository&lt;T extends { id: string }&gt; {\n  findById(id: string): Promise&lt;T&gt;;\n  save(entity: T): Promise&lt;T&gt;;\n  delete(id: string): Promise&lt;void&gt;;\n}\n\n// Use discriminated unions for state\ntype LoadingState =\n  | { status: 'idle' }\n  | { status: 'loading' }\n  | { status: 'success'; data: any }\n  | { status: 'error'; error: string };\n</code></pre>"},{"location":"architecture/app-architecture/#4-progressive-refactoring","title":"4. Progressive Refactoring","text":"<pre><code>// Start simple, refactor when needed\n// Phase 1: Direct API calls\nconst user = await fetch('/api/user').then(r =&gt; r.json());\n\n// Phase 2: Service layer\nconst user = await userService.getUser();\n\n// Phase 3: Use cases with dependency injection\nconst user = await container.resolve('getUserUseCase').execute();\n</code></pre>"},{"location":"architecture/app-architecture/#next-steps","title":"Next Steps","text":"<ol> <li>Assess your current project phase using the Project Structure guide</li> <li>Choose appropriate patterns for your project size and complexity</li> <li>Implement progressive architecture starting simple</li> <li>Plan for evolution as your app grows</li> <li>Maintain consistency within each architectural layer</li> </ol> <p>Pro Tip: Architecture should serve your team and project, not the other way around. Start with what works and evolve when complexity demands it.</p>"},{"location":"architecture/component-design/","title":"Component Design","text":"<p>Guide to building reusable, maintainable, and scalable React Native components using modern design patterns.</p>"},{"location":"architecture/component-design/#component-architecture-patterns","title":"Component Architecture Patterns","text":""},{"location":"architecture/component-design/#component-hierarchy","title":"Component Hierarchy","text":"graph TD     A[App Components] --&gt; B[Layout Components]     A --&gt; C[Feature Components]     A --&gt; D[UI Components]      B --&gt; B1[Screen Layouts]     B --&gt; B2[Navigation Layouts]     B --&gt; B3[Modal Layouts]      C --&gt; C1[User Profile]     C --&gt; C2[Post Feed]     C --&gt; C3[Chat Interface]      D --&gt; D1[Buttons]     D --&gt; D2[Inputs]     D --&gt; D3[Cards]     D --&gt; D4[Lists]"},{"location":"architecture/component-design/#component-types","title":"Component Types","text":"Type Purpose Examples Reusability UI Components Basic building blocks Button, Input, Card High Layout Components Structure and positioning Container, Grid, Stack High Feature Components Business logic UserProfile, PostCard Medium Page Components Full screens HomeScreen, LoginScreen Low"},{"location":"architecture/component-design/#design-patterns","title":"Design Patterns","text":""},{"location":"architecture/component-design/#1-compound-components","title":"1. Compound Components","text":"<pre><code>// components/Card/Card.tsx\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nfunction Card({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('bg-white rounded-lg shadow-sm border', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\nfunction CardHeader({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('px-6 py-4 border-b border-gray-200', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\nfunction CardContent({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('px-6 py-4', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\nfunction CardFooter({ children, className }: CardProps) {\n  return (\n    &lt;View className={cn('px-6 py-4 border-t border-gray-200', className)}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\n// Compound component\nCard.Header = CardHeader;\nCard.Content = CardContent;\nCard.Footer = CardFooter;\n\nexport { Card };\n\n// Usage\n&lt;Card&gt;\n  &lt;Card.Header&gt;\n    &lt;Text className=\"text-lg font-semibold\"&gt;User Profile&lt;/Text&gt;\n  &lt;/Card.Header&gt;\n  &lt;Card.Content&gt;\n    &lt;Text&gt;User information goes here&lt;/Text&gt;\n  &lt;/Card.Content&gt;\n  &lt;Card.Footer&gt;\n    &lt;Button&gt;Edit Profile&lt;/Button&gt;\n  &lt;/Card.Footer&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"architecture/component-design/#2-render-props-pattern","title":"2. Render Props Pattern","text":"<pre><code>// components/DataFetcher.tsx\ninterface DataFetcherProps&lt;T&gt; {\n  url: string;\n  children: (data: {\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n    refetch: () =&gt; void;\n  }) =&gt; React.ReactNode;\n}\n\nfunction DataFetcher&lt;T&gt;({ url, children }: DataFetcherProps&lt;T&gt;) {\n  const [data, setData] = useState&lt;T | null&gt;(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState&lt;Error | null&gt;(null);\n\n  const fetchData = useCallback(async () =&gt; {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [url]);\n\n  useEffect(() =&gt; {\n    fetchData();\n  }, [fetchData]);\n\n  return &lt;&gt;{children({ data, loading, error, refetch: fetchData })}&lt;/&gt;;\n}\n\n// Usage\n&lt;DataFetcher&lt;User&gt; url=\"/api/user/123\"&gt;\n  {({ data: user, loading, error, refetch }) =&gt; {\n    if (loading) return &lt;LoadingSpinner /&gt;;\n    if (error) return &lt;ErrorMessage error={error} onRetry={refetch} /&gt;;\n    if (!user) return &lt;NotFound /&gt;;\n\n    return &lt;UserProfile user={user} /&gt;;\n  }}\n&lt;/DataFetcher&gt;\n</code></pre>"},{"location":"architecture/component-design/#3-higher-order-components-hocs","title":"3. Higher-Order Components (HOCs)","text":"<pre><code>// hocs/withAuth.tsx\nfunction withAuth&lt;P extends object&gt;(\n  WrappedComponent: React.ComponentType&lt;P&gt;\n) {\n  return function AuthenticatedComponent(props: P) {\n    const { user, isLoading } = useAuth();\n\n    if (isLoading) {\n      return &lt;LoadingScreen /&gt;;\n    }\n\n    if (!user) {\n      return &lt;Redirect href=\"/auth/login\" /&gt;;\n    }\n\n    return &lt;WrappedComponent {...props} /&gt;;\n  };\n}\n\n// Usage\nconst ProtectedProfile = withAuth(ProfileScreen);\n</code></pre>"},{"location":"architecture/component-design/#4-custom-hooks-pattern","title":"4. Custom Hooks Pattern","text":"<pre><code>// hooks/useToggle.ts\nexport function useToggle(initialValue = false) {\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = useCallback(() =&gt; setValue(v =&gt; !v), []);\n  const setTrue = useCallback(() =&gt; setValue(true), []);\n  const setFalse = useCallback(() =&gt; setValue(false), []);\n\n  return { value, toggle, setTrue, setFalse };\n}\n\n// hooks/useForm.ts\nexport function useForm&lt;T extends Record&lt;string, any&gt;&gt;(initialValues: T, validationSchema?: any) {\n  const [values, setValues] = useState&lt;T&gt;(initialValues);\n  const [errors, setErrors] = useState&lt;Partial&lt;Record&lt;keyof T, string&gt;&gt;&gt;({});\n  const [touched, setTouched] = useState&lt;Partial&lt;Record&lt;keyof T, boolean&gt;&gt;&gt;({});\n\n  const setValue = useCallback((field: keyof T, value: any) =&gt; {\n    setValues(prev =&gt; ({ ...prev, [field]: value }));\n  }, []);\n\n  const setFieldTouched = useCallback((field: keyof T) =&gt; {\n    setTouched(prev =&gt; ({ ...prev, [field]: true }));\n  }, []);\n\n  const validate = useCallback(() =&gt; {\n    if (!validationSchema) return true;\n\n    try {\n      validationSchema.validateSync(values, { abortEarly: false });\n      setErrors({});\n      return true;\n    } catch (err: any) {\n      const validationErrors: Partial&lt;Record&lt;keyof T, string&gt;&gt; = {};\n      err.inner.forEach((error: any) =&gt; {\n        validationErrors[error.path as keyof T] = error.message;\n      });\n      setErrors(validationErrors);\n      return false;\n    }\n  }, [values, validationSchema]);\n\n  const reset = useCallback(() =&gt; {\n    setValues(initialValues);\n    setErrors({});\n    setTouched({});\n  }, [initialValues]);\n\n  return {\n    values,\n    errors,\n    touched,\n    setValue,\n    setFieldTouched,\n    validate,\n    reset,\n    isValid: Object.keys(errors).length === 0,\n  };\n}\n</code></pre>"},{"location":"architecture/component-design/#component-composition","title":"Component Composition","text":""},{"location":"architecture/component-design/#containerpresenter-pattern","title":"Container/Presenter Pattern","text":"<pre><code>// containers/UserProfileContainer.tsx\nexport function UserProfileContainer({ userId }: { userId: string }) {\n  const { data: user, isLoading, error } = useUser(userId);\n  const updateUser = useUpdateUser();\n  const { showToast } = useToast();\n\n  const handleUpdateUser = async (updates: Partial&lt;User&gt;) =&gt; {\n    try {\n      await updateUser.mutateAsync({ ...user, ...updates });\n      showToast('Profile updated successfully', 'success');\n    } catch (error) {\n      showToast('Failed to update profile', 'error');\n    }\n  };\n\n  if (isLoading) return &lt;LoadingSpinner /&gt;;\n  if (error) return &lt;ErrorMessage error={error} /&gt;;\n  if (!user) return &lt;NotFound /&gt;;\n\n  return (\n    &lt;UserProfilePresenter\n      user={user}\n      onUpdateUser={handleUpdateUser}\n      isUpdating={updateUser.isPending}\n      /&gt;\n    );\n  }\n\n// components/UserProfilePresenter.tsx\n  interface UserProfilePresenterProps {\n    user: User;\n    onUpdateUser: (updates: Partial&lt;User&gt;) =&gt; void;\n    isUpdating: boolean;\n  }\n\n  export function UserProfilePresenter({\n    user,\n    onUpdateUser,\n    isUpdating\n  }: UserProfilePresenterProps) {\n    const [isEditing, setIsEditing] = useState(false);\n\n    return (\n      &lt;ScrollView className=\"flex-1 bg-gray-50\"&gt;\n        &lt;View className=\"bg-white p-6\"&gt;\n          &lt;Avatar source={{ uri: user.avatar }} size=\"large\" /&gt;\n\n          {isEditing ? (\n            &lt;EditUserForm\n              user={user}\n              onSave={(updates) =&gt; {\n                onUpdateUser(updates);\n                setIsEditing(false);\n              }}\n              onCancel={() =&gt; setIsEditing(false)}\n              isLoading={isUpdating}\n              /&gt;\n            ) : (\n              &lt;UserInfo\n                user={user}\n                onEdit={() =&gt; setIsEditing(true)}\n                /&gt;\n              )}\n            &lt;/View&gt;\n          &lt;/ScrollView&gt;\n        );\n      }\n</code></pre>"},{"location":"architecture/component-design/#polymorphic-components","title":"Polymorphic Components","text":"<pre><code>// components/Button/Button.tsx\ninterface ButtonOwnProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  children: React.ReactNode;\n}\n\ntype ButtonProps&lt;T extends React.ElementType = 'button'&gt; = {\n  as?: T;\n} &amp; ButtonOwnProps &amp;\nOmit&lt;React.ComponentPropsWithoutRef&lt;T&gt;, keyof ButtonOwnProps&gt;;\n\nexport function Button&lt;T extends React.ElementType = 'button'&gt;({\n  as,\n  variant = 'primary',\n  size = 'md',\n  loading = false,\n  children,\n  className,\n  disabled,\n  ...props\n}: ButtonProps&lt;T&gt;) {\n  const Component = as || Pressable;\n\n  return (\n    &lt;Component\n      className={cn(\n        'rounded-lg items-center justify-center',\n        {\n          'bg-blue-500': variant === 'primary',\n          'bg-gray-200': variant === 'secondary',\n          'border border-gray-300': variant === 'outline',\n          'px-3 py-2': size === 'sm',\n          'px-4 py-3': size === 'md',\n          'px-6 py-4': size === 'lg',\n          'opacity-50': disabled || loading,\n        },\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n      &gt;\n      {loading ? (\n        &lt;ActivityIndicator size=\"small\" color=\"white\" /&gt;\n      ) : (\n        &lt;Text className={cn(\n            'font-medium',\n            {\n              'text-white': variant === 'primary',\n              'text-gray-800': variant === 'secondary',\n              'text-gray-600': variant === 'outline',\n              'text-sm': size === 'sm',\n              'text-base': size === 'md',\n              'text-lg': size === 'lg',\n            }\n          )}&gt;\n          {children}\n        &lt;/Text&gt;\n      )}\n    &lt;/Component&gt;\n  );\n}\n\n// Usage\n&lt;Button&gt;Default Button&lt;/Button&gt;\n&lt;Button as={Link} href=\"/profile\"&gt;Link Button&lt;/Button&gt;\n&lt;Button as={TouchableOpacity} onPress={handlePress}&gt;Touch Button&lt;/Button&gt;\n</code></pre>"},{"location":"architecture/component-design/#component-testing","title":"Component Testing","text":""},{"location":"architecture/component-design/#unit-testing","title":"Unit Testing","text":"<pre><code>// __tests__/Button.test.tsx\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Button } from '../Button';\n\ndescribe('Button', () =&gt; {\n  it('renders correctly', () =&gt; {\n    const { getByText } = render(&lt;Button&gt;Click me&lt;/Button&gt;);\n    expect(getByText('Click me')).toBeTruthy();\n  });\n\n  it('calls onPress when pressed', () =&gt; {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      &lt;Button onPress={onPress}&gt;Click me&lt;/Button&gt;\n    );\n\n    fireEvent.press(getByText('Click me'));\n    expect(onPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('shows loading state', () =&gt; {\n    const { getByTestId } = render(\n      &lt;Button loading&gt;Loading&lt;/Button&gt;\n    );\n\n    expect(getByTestId('activity-indicator')).toBeTruthy();\n  });\n\n  it('applies correct variant styles', () =&gt; {\n    const { getByText } = render(\n      &lt;Button variant=\"secondary\"&gt;Secondary&lt;/Button&gt;\n    );\n\n    const button = getByText('Secondary').parent;\n    expect(button).toHaveStyle({ backgroundColor: '#e5e7eb' });\n  });\n});\n</code></pre>"},{"location":"architecture/component-design/#component-stories-storybook","title":"Component Stories (Storybook)","text":"<pre><code>// stories/Button.stories.tsx\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Button } from '../components/Button';\n\nconst meta: Meta&lt;typeof Button&gt; = {\n  title: 'UI/Button',\n  component: Button,\n  parameters: {\n    layout: 'centered',\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'outline'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj&lt;typeof meta&gt;;\n\nexport const Primary: Story = {\n  args: {\n    children: 'Primary Button',\n    variant: 'primary',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    children: 'Secondary Button',\n    variant: 'secondary',\n  },\n};\n\nexport const Loading: Story = {\n  args: {\n    children: 'Loading Button',\n    loading: true,\n  },\n};\n</code></pre>"},{"location":"architecture/component-design/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/component-design/#memoization","title":"Memoization","text":"<pre><code>// Memoize expensive components\nconst ExpensiveComponent = React.memo(({ data, onUpdate }) =&gt; {\n  const processedData = useMemo(() =&gt; {\n    return data.map(item =&gt; ({\n      ...item,\n      processed: expensiveCalculation(item),\n    }));\n  }, [data]);\n\n  const handleUpdate = useCallback((id: string, updates: any) =&gt; {\n    onUpdate(id, updates);\n  }, [onUpdate]);\n\n  return (\n    &lt;View&gt;\n      {processedData.map(item =&gt; (\n        &lt;ItemComponent\n          key={item.id}\n          item={item}\n          onUpdate={handleUpdate}\n          /&gt;\n        ))}\n      &lt;/View&gt;\n    );\n  });\n\n// Custom comparison function\n  const ItemComponent = React.memo(({ item, onUpdate }) =&gt; {\n    return (\n      &lt;View&gt;\n        &lt;Text&gt;{item.name}&lt;/Text&gt;\n        &lt;Button onPress={() =&gt; onUpdate(item.id, { viewed: true })}&gt;\n          Mark as Viewed\n        &lt;/Button&gt;\n      &lt;/View&gt;\n    );\n  }, (prevProps, nextProps) =&gt; {\n// Custom comparison logic\n    return (\n      prevProps.item.id === nextProps.item.id &amp;&amp;\n      prevProps.item.name === nextProps.item.name &amp;&amp;\n      prevProps.item.viewed === nextProps.item.viewed\n    );\n  });\n</code></pre>"},{"location":"architecture/component-design/#best-practices","title":"Best Practices","text":""},{"location":"architecture/component-design/#1-component-structure","title":"1. Component Structure","text":"<pre><code>// Good component structure\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { View, Text, Pressable } from 'react-native';\nimport { cn } from '@/lib/utils';\n\n// 1. Types and interfaces\ninterface UserCardProps {\n  user: User;\n  onPress?: (user: User) =&gt; void;\n  variant?: 'default' | 'compact';\n}\n\n// 2. Component definition\nexport function UserCard({\n  user,\n  onPress,\n  variant = 'default'\n}: UserCardProps) {\n// 3. State and hooks\n  const [isPressed, setIsPressed] = useState(false);\n\n// 4. Computed values\n  const displayName = useMemo(() =&gt; {\n    return user.firstName &amp;&amp; user.lastName\n    ? `${user.firstName} ${user.lastName}`\n    : user.email;\n  }, [user.firstName, user.lastName, user.email]);\n\n// 5. Event handlers\n  const handlePress = useCallback(() =&gt; {\n    onPress?.(user);\n  }, [onPress, user]);\n\n// 6. Render\n  return (\n    &lt;Pressable\n      onPress={handlePress}\n      onPressIn={() =&gt; setIsPressed(true)}\n      onPressOut={() =&gt; setIsPressed(false)}\n      className={cn(\n        'p-4 bg-white rounded-lg border',\n        {\n          'bg-gray-50': isPressed,\n          'p-2': variant === 'compact',\n        }\n      )}\n      &gt;\n      &lt;View className=\"flex-row items-center\"&gt;\n        &lt;Avatar source={{ uri: user.avatar }} /&gt;\n        &lt;View className=\"ml-3 flex-1\"&gt;\n          &lt;Text className=\"font-semibold\"&gt;{displayName}&lt;/Text&gt;\n          &lt;Text className=\"text-gray-600\"&gt;{user.email}&lt;/Text&gt;\n        &lt;/View&gt;\n      &lt;/View&gt;\n    &lt;/Pressable&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/component-design/#2-error-boundaries","title":"2. Error Boundaries","text":"<pre><code>// components/ErrorBoundary.tsx\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends React.Component&lt;\nReact.PropsWithChildren&lt;{}&gt;,\nErrorBoundaryState\n&gt; {\n  constructor(props: React.PropsWithChildren&lt;{}&gt;) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n    // Log to crash reporting service\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;View className=\"flex-1 items-center justify-center p-4\"&gt;\n          &lt;Text className=\"text-lg font-semibold mb-2\"&gt;\n            Something went wrong\n          &lt;/Text&gt;\n          &lt;Text className=\"text-gray-600 text-center mb-4\"&gt;\n            We're sorry for the inconvenience. Please try again.\n          &lt;/Text&gt;\n          &lt;Button onPress={() =&gt; this.setState({ hasError: false })}&gt;\n            Try Again\n          &lt;/Button&gt;\n        &lt;/View&gt;\n      );\n    }\n\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"architecture/component-design/#next-steps","title":"Next Steps","text":"<ol> <li>Choose appropriate design patterns for your components</li> <li>Implement a consistent component structure across your app</li> <li>Set up component testing with Jest and React Native Testing Library</li> <li>Create a component library with Storybook</li> <li>Optimize performance with proper memoization</li> </ol> <p>Pro Tip: Start with simple components and gradually add complexity. Focus on reusability and maintainability over premature optimization.</p>"},{"location":"architecture/navigation/","title":"Navigation","text":"<p>Comprehensive guide to implementing navigation in React Native applications using Expo Router and React Navigation.</p>"},{"location":"architecture/navigation/#navigation-strategies","title":"Navigation Strategies","text":""},{"location":"architecture/navigation/#expo-router-vs-react-navigation","title":"Expo Router vs React Navigation","text":"Feature Expo Router React Navigation Paradigm File-based routing Component-based Learning Curve Easier (familiar to web devs) Steeper Type Safety Automatic route typing Manual typing Deep Linking Built-in Manual setup Web Support Excellent Good Flexibility Less flexible More flexible"},{"location":"architecture/navigation/#expo-router-recommended","title":"Expo Router (Recommended)","text":""},{"location":"architecture/navigation/#file-based-routing-structure","title":"File-based Routing Structure","text":"graph TD     A[app/] --&gt; B[_layout.tsx]     A --&gt; C[index.tsx]     A --&gt; D[+not-found.tsx]     A --&gt; E[tabs/]     A --&gt; F[auth/]     A --&gt; G[modals/]      E --&gt; E1[_layout.tsx]     E --&gt; E2[index.tsx]     E --&gt; E3[profile.tsx]     E --&gt; E4[settings.tsx]      F --&gt; F1[_layout.tsx]     F --&gt; F2[login.tsx]     F --&gt; F3[register.tsx]      G --&gt; G1[camera.tsx]     G --&gt; G2[edit-profile.tsx]"},{"location":"architecture/navigation/#basic-setup","title":"Basic Setup","text":"<pre><code>// app/_layout.tsx - Root Layout\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AuthProvider } from '@/lib/auth/AuthProvider';\n\nconst queryClient = new QueryClient();\n\nexport default function RootLayout() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;AuthProvider&gt;\n        &lt;Stack screenOptions={{ headerShown: false }}&gt;\n          &lt;Stack.Screen name=\"(tabs)\" /&gt;\n          &lt;Stack.Screen name=\"(auth)\" /&gt;\n          &lt;Stack.Screen\n            name=\"(modals)\"\n            options={{ presentation: 'modal' }}\n            /&gt;\n          &lt;/Stack&gt;\n          &lt;StatusBar style=\"auto\" /&gt;\n        &lt;/AuthProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    );\n  }\n</code></pre>"},{"location":"architecture/navigation/#tab-navigation","title":"Tab Navigation","text":"<pre><code>// app/(tabs)/_layout.tsx\nimport { Tabs } from 'expo-router';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport default function TabLayout() {\n  return (\n    &lt;Tabs\n      screenOptions={{\n        tabBarActiveTintColor: '#007AFF',\n        tabBarInactiveTintColor: '#8E8E93',\n        headerShown: false,\n      }}\n      &gt;\n      &lt;Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color, size }) =&gt; (\n            &lt;Ionicons name=\"home\" size={size} color={color} /&gt;\n          ),\n        }}\n        /&gt;\n        &lt;Tabs.Screen\n          name=\"search\"\n          options={{\n            title: 'Search',\n            tabBarIcon: ({ color, size }) =&gt; (\n              &lt;Ionicons name=\"search\" size={size} color={color} /&gt;\n            ),\n          }}\n          /&gt;\n          &lt;Tabs.Screen\n            name=\"profile\"\n            options={{\n              title: 'Profile',\n              tabBarIcon: ({ color, size }) =&gt; (\n                &lt;Ionicons name=\"person\" size={size} color={color} /&gt;\n              ),\n            }}\n            /&gt;\n          &lt;/Tabs&gt;\n        );\n      }\n</code></pre>"},{"location":"architecture/navigation/#navigation-flow","title":"Navigation Flow","text":"sequenceDiagram     participant U as User     participant R as Router     participant A as Auth Guard     participant S as Screen      U-&gt;&gt;R: Navigate to /profile     R-&gt;&gt;A: Check authentication     alt Authenticated         A-&gt;&gt;S: Render Profile Screen         S-&gt;&gt;U: Display profile     else Not authenticated         A-&gt;&gt;R: Redirect to /auth/login         R-&gt;&gt;S: Render Login Screen         S-&gt;&gt;U: Display login form     end"},{"location":"architecture/navigation/#protected-routes","title":"Protected Routes","text":"<pre><code>// components/AuthGuard.tsx\nimport { useAuth } from '@/hooks/useAuth';\nimport { Redirect } from 'expo-router';\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n  fallback?: string;\n}\n\nexport function AuthGuard({ children, fallback = '/auth/login' }: AuthGuardProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return &lt;LoadingScreen /&gt;;\n  }\n\n  if (!isAuthenticated) {\n    return &lt;Redirect href={fallback} /&gt;;\n  }\n\n  return &lt;&gt;{children}&lt;/&gt;;\n}\n\n// app/(tabs)/_layout.tsx\nexport default function TabLayout() {\n  return (\n    &lt;AuthGuard&gt;\n      &lt;Tabs&gt;\n        {/* Tab screens */}\n      &lt;/Tabs&gt;\n    &lt;/AuthGuard&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/navigation/#dynamic-routes","title":"Dynamic Routes","text":"<pre><code>// app/user/[id].tsx\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function UserProfile() {\n  const { id } = useLocalSearchParams&lt;{ id: string }&gt;();\n\n  return (\n    &lt;View&gt;\n      &lt;Text&gt;User ID: {id}&lt;/Text&gt;\n    &lt;/View&gt;\n  );\n}\n\n// Navigation\nimport { router } from 'expo-router';\n\n// Navigate to user profile\nrouter.push(`/user/${userId}`);\n\n// With query parameters\nrouter.push({\n  pathname: '/user/[id]',\n  params: { id: userId, tab: 'posts' }\n});\n</code></pre>"},{"location":"architecture/navigation/#modal-navigation","title":"Modal Navigation","text":"<pre><code>// app/(modals)/camera.tsx\nimport { router } from 'expo-router';\n\nexport default function CameraModal() {\n  const handleClose = () =&gt; {\n    router.back();\n  };\n\n  const handleCapture = (photo: Photo) =&gt; {\n    // Handle photo capture\n    router.back();\n  };\n\n  return (\n    &lt;View style={{ flex: 1 }}&gt;\n      &lt;CameraView onCapture={handleCapture} /&gt;\n      &lt;Button title=\"Close\" onPress={handleClose} /&gt;\n    &lt;/View&gt;\n  );\n}\n\n// Open modal\nrouter.push('/camera');\n</code></pre>"},{"location":"architecture/navigation/#react-navigation","title":"React Navigation","text":""},{"location":"architecture/navigation/#stack-navigation","title":"Stack Navigation","text":"<pre><code>import { createNativeStackNavigator } from '@react-navigation/native-stack';\n\ntype RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Settings: undefined;\n};\n\nconst Stack = createNativeStackNavigator&lt;RootStackParamList&gt;();\n\nfunction RootStack() {\n  return (\n    &lt;Stack.Navigator&gt;\n      &lt;Stack.Screen name=\"Home\" component={HomeScreen} /&gt;\n      &lt;Stack.Screen name=\"Profile\" component={ProfileScreen} /&gt;\n      &lt;Stack.Screen name=\"Settings\" component={SettingsScreen} /&gt;\n    &lt;/Stack.Navigator&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/navigation/#tab-navigation_1","title":"Tab Navigation","text":"<pre><code>import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\ntype TabParamList = {\n  Home: undefined;\n  Search: undefined;\n  Profile: undefined;\n};\n\nconst Tab = createBottomTabNavigator&lt;TabParamList&gt;();\n\nfunction TabNavigator() {\n  return (\n    &lt;Tab.Navigator&gt;\n      &lt;Tab.Screen name=\"Home\" component={HomeScreen} /&gt;\n      &lt;Tab.Screen name=\"Search\" component={SearchScreen} /&gt;\n      &lt;Tab.Screen name=\"Profile\" component={ProfileScreen} /&gt;\n    &lt;/Tab.Navigator&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/navigation/#navigation-patterns","title":"Navigation Patterns","text":""},{"location":"architecture/navigation/#nested-navigation","title":"Nested Navigation","text":"graph TD     A[Root Navigator] --&gt; B[Auth Stack]     A --&gt; C[Main Tab Navigator]      B --&gt; B1[Login]     B --&gt; B2[Register]     B --&gt; B3[Forgot Password]      C --&gt; C1[Home Stack]     C --&gt; C2[Search Stack]     C --&gt; C3[Profile Stack]      C1 --&gt; C1A[Home Screen]     C1 --&gt; C1B[Post Details]     C1 --&gt; C1C[Comments]      C3 --&gt; C3A[Profile Screen]     C3 --&gt; C3B[Edit Profile]     C3 --&gt; C3C[Settings]"},{"location":"architecture/navigation/#deep-linking","title":"Deep Linking","text":"<pre><code>// app.json\n{\n  \"expo\": {\n    \"scheme\": \"myapp\",\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n\n// Handle deep links\nimport { useEffect } from 'react';\nimport { Linking } from 'react-native';\nimport { router } from 'expo-router';\n\nexport function useDeepLinking() {\n  useEffect(() =&gt; {\n    const handleDeepLink = (url: string) =&gt; {\n      // Parse URL and navigate\n      const route = parseDeepLink(url);\n      if (route) {\n        router.push(route);\n      }\n    };\n\n    // Handle initial URL\n    Linking.getInitialURL().then((url) =&gt; {\n      if (url) handleDeepLink(url);\n    });\n\n    // Handle subsequent URLs\n    const subscription = Linking.addEventListener('url', ({ url }) =&gt; {\n      handleDeepLink(url);\n    });\n\n    return () =&gt; subscription?.remove();\n  }, []);\n}\n\nfunction parseDeepLink(url: string): string | null {\n// myapp://user/123 -&gt; /user/123\n  const match = url.match(/myapp:\\/\\/(.+)/);\n  return match ? `/${match[1]}` : null;\n}\n</code></pre>"},{"location":"architecture/navigation/#navigation-state-management","title":"Navigation State Management","text":"<pre><code>// hooks/useNavigationState.ts\nimport { useNavigation, useRoute } from '@react-navigation/native';\n\nexport function useNavigationState() {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  const goBack = () =&gt; {\n    if (navigation.canGoBack()) {\n      navigation.goBack();\n    }\n  };\n\n  const resetToHome = () =&gt; {\n    navigation.reset({\n      index: 0,\n      routes: [{ name: 'Home' }],\n    });\n  };\n\n  return {\n    navigation,\n    route,\n    goBack,\n    resetToHome,\n    canGoBack: navigation.canGoBack(),\n  };\n}\n</code></pre>"},{"location":"architecture/navigation/#advanced-navigation-patterns","title":"Advanced Navigation Patterns","text":""},{"location":"architecture/navigation/#conditional-navigation","title":"Conditional Navigation","text":"<pre><code>// app/_layout.tsx\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function RootLayout() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return &lt;LoadingScreen /&gt;;\n  }\n\n  return (\n    &lt;Stack screenOptions={{ headerShown: false }}&gt;\n      {isAuthenticated ? (\n        &lt;Stack.Screen name=\"(tabs)\" /&gt;\n      ) : (\n        &lt;Stack.Screen name=\"(auth)\" /&gt;\n      )}\n    &lt;/Stack&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/navigation/#navigation-middleware","title":"Navigation Middleware","text":"<pre><code>// lib/navigation/middleware.ts\nexport function createNavigationMiddleware() {\n  return {\n    beforeNavigate: (route: string, params?: any) =&gt; {\n      // Log navigation events\n      analytics.track('navigation', { route, params });\n\n      // Check permissions\n      if (route.startsWith('/admin') &amp;&amp; !user.isAdmin) {\n        throw new Error('Unauthorized');\n      }\n\n      return true;\n    },\n\n    afterNavigate: (route: string) =&gt; {\n      // Update breadcrumbs\n      updateBreadcrumbs(route);\n    },\n  };\n}\n</code></pre>"},{"location":"architecture/navigation/#best-practices","title":"Best Practices","text":""},{"location":"architecture/navigation/#1-type-safety","title":"1. Type Safety","text":"<pre><code>// types/navigation.ts\nexport type RootStackParamList = {\n  Home: undefined;\n  Profile: { userId: string };\n  Post: { postId: string; commentId?: string };\n};\n\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n\n// Usage with type safety\nimport { router } from 'expo-router';\n\nrouter.push({\n  pathname: '/profile/[userId]',\n  params: { userId: '123' }, // TypeScript will validate this\n});\n</code></pre>"},{"location":"architecture/navigation/#2-navigation-testing","title":"2. Navigation Testing","text":"<pre><code>// __tests__/navigation.test.tsx\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction renderWithNavigation(component: React.ReactElement) {\n  return render(\n    &lt;NavigationContainer&gt;\n      {component}\n    &lt;/NavigationContainer&gt;\n  );\n}\n\ntest('navigates to profile when button is pressed', () =&gt; {\n  const { getByText } = renderWithNavigation(&lt;HomeScreen /&gt;);\n\n  fireEvent.press(getByText('Go to Profile'));\n\n// Assert navigation occurred\n});\n</code></pre>"},{"location":"architecture/navigation/#3-performance-optimization","title":"3. Performance Optimization","text":"<pre><code>// Lazy load screens\nconst ProfileScreen = lazy(() =&gt; import('./ProfileScreen'));\nconst SettingsScreen = lazy(() =&gt; import('./SettingsScreen'));\n\n// Preload critical screens\nimport('./ProfileScreen');\n</code></pre>"},{"location":"architecture/navigation/#next-steps","title":"Next Steps","text":"<ol> <li>Choose between Expo Router and React Navigation based on your needs</li> <li>Set up your navigation structure with proper typing</li> <li>Implement authentication guards for protected routes</li> <li>Add deep linking support for better user experience</li> <li>Test your navigation flows thoroughly</li> </ol> <p>Pro Tip: Start with Expo Router if you're building a new app. It provides better developer experience and automatic type safety. Use React Navigation if you need more complex navigation patterns or are migrating an existing app.</p>"},{"location":"architecture/state-management/","title":"State Management","text":"<p>Comprehensive guide to managing state in React Native applications using modern patterns and libraries.</p>"},{"location":"architecture/state-management/#state-management-strategy","title":"State Management Strategy","text":""},{"location":"architecture/state-management/#types-of-state","title":"Types of State","text":"graph TD     A[Application State] --&gt; B[Local State]     A --&gt; C[Shared State]     A --&gt; D[Server State]     A --&gt; E[URL State]     A --&gt; F[Persistent State]      B --&gt; B1[Component State]     B --&gt; B2[Form State]     B --&gt; B3[UI State]      C --&gt; C1[User Preferences]     C --&gt; C2[Theme]     C --&gt; C3[Authentication]      D --&gt; D1[API Data]     D --&gt; D2[Cache]     D --&gt; D3[Real-time Updates]      E --&gt; E1[Navigation State]     E --&gt; E2[Route Parameters]      F --&gt; F1[Settings]     F --&gt; F2[Offline Data]     F --&gt; F3[Tokens]"},{"location":"architecture/state-management/#choosing-the-right-solution","title":"Choosing the Right Solution","text":"State Type Recommended Solution Use Case Component State <code>useState</code>, <code>useReducer</code> Form inputs, toggles, local UI state Shared State <code>Zustand</code>, <code>Context</code> User preferences, theme, auth state Server State <code>React Query</code>, <code>SWR</code> API data, caching, synchronization Persistent State <code>MMKV</code>, <code>AsyncStorage</code> Settings, offline data, tokens"},{"location":"architecture/state-management/#zustand-recommended","title":"Zustand (Recommended)","text":""},{"location":"architecture/state-management/#why-zustand","title":"Why Zustand?","text":"<ul> <li>Minimal boilerplate</li> <li>TypeScript-first</li> <li>No providers needed</li> <li>Great DevTools</li> <li>Excellent performance</li> </ul>"},{"location":"architecture/state-management/#basic-setup","title":"Basic Setup","text":"<pre><code>npm install zustand\n</code></pre>"},{"location":"architecture/state-management/#simple-store","title":"Simple Store","text":"<pre><code>// store/useCounterStore.ts\nimport { create } from 'zustand';\n\ninterface CounterState {\n  count: number;\n  increment: () =&gt; void;\n  decrement: () =&gt; void;\n  reset: () =&gt; void;\n}\n\nexport const useCounterStore = create&lt;CounterState&gt;((set) =&gt; ({\n  count: 0,\n  increment: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n  decrement: () =&gt; set((state) =&gt; ({ count: state.count - 1 })),\n  reset: () =&gt; set({ count: 0 }),\n}));\n\n// Usage in component\nfunction Counter() {\n  const { count, increment, decrement, reset } = useCounterStore();\n\n  return (\n    &lt;View&gt;\n      &lt;Text&gt;Count: {count}&lt;/Text&gt;\n      &lt;Button onPress={increment} title=\"+\" /&gt;\n      &lt;Button onPress={decrement} title=\"-\" /&gt;\n      &lt;Button onPress={reset} title=\"Reset\" /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/state-management/#advanced-zustand-patterns","title":"Advanced Zustand Patterns","text":""},{"location":"architecture/state-management/#slices-pattern","title":"Slices Pattern","text":"<pre><code>// store/slices/authSlice.ts\nexport interface AuthSlice {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  login: (user: User, token: string) =&gt; void;\n  logout: () =&gt; void;\n}\n\nexport const createAuthSlice: StateCreator&lt;AuthSlice &amp; UserSlice, [], [], AuthSlice&gt; = (\n  set,\n  get\n) =&gt; ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  login: (user, token) =&gt; {\n    set({ user, token, isAuthenticated: true });\n    // Access other slices\n    get().setUserPreferences(user.preferences);\n  },\n  logout: () =&gt; set({ user: null, token: null, isAuthenticated: false }),\n});\n\n// store/index.ts\nexport const useAppStore = create&lt;AuthSlice &amp; UserSlice&gt;()((...a) =&gt; ({\n  ...createAuthSlice(...a),\n  ...createUserSlice(...a),\n}));\n</code></pre>"},{"location":"architecture/state-management/#persistence","title":"Persistence","text":"<pre><code>import { persist, createJSONStorage } from 'zustand/middleware';\nimport { MMKV } from 'react-native-mmkv';\n\nconst storage = new MMKV();\n\nconst mmkvStorage = {\n  setItem: (name: string, value: string) =&gt; {\n    return storage.set(name, value);\n  },\n  getItem: (name: string) =&gt; {\n    const value = storage.getString(name);\n    return value ?? null;\n  },\n  removeItem: (name: string) =&gt; {\n    return storage.delete(name);\n  },\n};\n\nexport const useAuthStore = create&lt;AuthState&gt;()(\n  persist(\n    (set, get) =&gt; ({\n      user: null,\n      token: null,\n      login: (user, token) =&gt; set({ user, token }),\n      logout: () =&gt; set({ user: null, token: null }),\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() =&gt; mmkvStorage),\n      partialize: state =&gt; ({\n        user: state.user,\n        token: state.token,\n      }),\n    }\n  )\n);\n</code></pre>"},{"location":"architecture/state-management/#react-query-for-server-state","title":"React Query for Server State","text":""},{"location":"architecture/state-management/#setup","title":"Setup","text":"<pre><code>npm install @tanstack/react-query\n</code></pre> <pre><code>// app/_layout.tsx\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 3,\n    },\n  },\n});\n\nexport default function RootLayout() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      {/* Your app */}\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/state-management/#query-hooks","title":"Query Hooks","text":"<pre><code>// hooks/useUsers.ts\nexport function useUsers(filters?: UserFilters) {\n  return useQuery({\n    queryKey: ['users', filters],\n    queryFn: () =&gt; userService.getUsers(filters),\n    enabled: !!filters,\n  });\n}\n\nexport function useUser(userId: string) {\n  return useQuery({\n    queryKey: ['user', userId],\n    queryFn: () =&gt; userService.getUser(userId),\n    enabled: !!userId,\n  });\n}\n\n// Infinite queries for pagination\nexport function useInfiniteUsers() {\n  return useInfiniteQuery({\n    queryKey: ['users', 'infinite'],\n    queryFn: ({ pageParam = 1 }) =&gt; userService.getUsers({ page: pageParam }),\n    getNextPageParam: (lastPage, pages) =&gt; {\n      return lastPage.hasMore ? pages.length + 1 : undefined;\n    },\n  });\n}\n</code></pre>"},{"location":"architecture/state-management/#state-flow-diagram","title":"State Flow Diagram","text":"sequenceDiagram     participant C as Component     participant RQ as React Query     participant API as API Server     participant Cache as Cache      C-&gt;&gt;RQ: useQuery()     RQ-&gt;&gt;Cache: Check cache     alt Cache hit         Cache-&gt;&gt;RQ: Return cached data         RQ-&gt;&gt;C: Return data (stale)     else Cache miss         RQ-&gt;&gt;API: Fetch data         API-&gt;&gt;RQ: Return fresh data         RQ-&gt;&gt;Cache: Update cache     end     RQ-&gt;&gt;C: Return data      Note over RQ: Background refetch if stale     RQ-&gt;&gt;API: Refetch in background     API-&gt;&gt;RQ: Return fresh data     RQ-&gt;&gt;Cache: Update cache     RQ-&gt;&gt;C: Update component"},{"location":"architecture/state-management/#best-practices","title":"Best Practices","text":""},{"location":"architecture/state-management/#1-state-colocation","title":"1. State Colocation","text":"<pre><code>// Bad - Global state for local concerns\nconst useGlobalFormStore = create(set =&gt; ({\n  formData: {},\n  setFormData: data =&gt; set({ formData: data }),\n}));\n\n// Good - Local state for local concerns\nfunction ContactForm() {\n  const [formData, setFormData] = useState({});\n  // Form logic here\n}\n</code></pre>"},{"location":"architecture/state-management/#2-derived-state","title":"2. Derived State","text":"<pre><code>// Bad - Storing derived state\nconst useUserStore = create(set =&gt; ({\n  user: null,\n  isAdmin: false,\n  setUser: user =&gt; set({ user, isAdmin: user.role === 'admin' }),\n}));\n\n// Good - Computing derived state\nconst useUserStore = create(set =&gt; ({\n  user: null,\n  setUser: user =&gt; set({ user }),\n}));\n\nconst useIsAdmin = () =&gt; useUserStore(state =&gt; state.user?.role === 'admin');\n</code></pre>"},{"location":"architecture/state-management/#3-action-creators","title":"3. Action Creators","text":"<pre><code>// Good - Centralized actions\nconst useUserStore = create((set, get) =&gt; ({\n  users: [],\n  loading: false,\n\n  // Action creators\n  actions: {\n    async fetchUsers() {\n      set({ loading: true });\n      try {\n        const users = await userService.getUsers();\n        set({ users, loading: false });\n      } catch (error) {\n        set({ loading: false });\n        throw error;\n      }\n    },\n\n    addUser(user: User) {\n      set(state =&gt; ({ users: [...state.users, user] }));\n    },\n\n    removeUser(userId: string) {\n      set(state =&gt; ({\n        users: state.users.filter(u =&gt; u.id !== userId),\n      }));\n    },\n  },\n}));\n\n// Usage\nconst { users, loading } = useUserStore();\nconst { fetchUsers, addUser } = useUserStore(state =&gt; state.actions);\n</code></pre>"},{"location":"architecture/state-management/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/state-management/#selectors","title":"Selectors","text":"<pre><code>// Use specific selectors to prevent unnecessary re-renders\nexport const useUser = () =&gt; useAuthStore(state =&gt; state.user);\nexport const useIsAuthenticated = () =&gt; useAuthStore(state =&gt; state.isAuthenticated);\n\n// Shallow comparison for objects\nimport { shallow } from 'zustand/shallow';\n\nexport const useUserProfile = () =&gt;\n  useAuthStore(\n    state =&gt; ({\n      name: state.user?.name,\n      email: state.user?.email,\n      avatar: state.user?.avatar,\n    }),\n    shallow\n  );\n</code></pre>"},{"location":"architecture/state-management/#react-query-optimization","title":"React Query Optimization","text":"<pre><code>// Prefetch data\nconst queryClient = useQueryClient();\n\n// Prefetch user data\nawait queryClient.prefetchQuery({\n  queryKey: ['user', userId],\n  queryFn: () =&gt; userService.getUser(userId),\n});\n\n// Optimistic updates\nconst updateUser = useMutation({\n  mutationFn: userService.updateUser,\n  onMutate: async updatedUser =&gt; {\n    await queryClient.cancelQueries({ queryKey: ['user', updatedUser.id] });\n    const previousUser = queryClient.getQueryData(['user', updatedUser.id]);\n    queryClient.setQueryData(['user', updatedUser.id], updatedUser);\n    return { previousUser };\n  },\n  onError: (err, updatedUser, context) =&gt; {\n    queryClient.setQueryData(['user', updatedUser.id], context?.previousUser);\n  },\n});\n</code></pre>"},{"location":"architecture/state-management/#next-steps","title":"Next Steps","text":"<ol> <li>Choose your state management strategy based on app complexity</li> <li>Set up Zustand for client state management</li> <li>Implement React Query for server state</li> <li>Add persistence for important data</li> <li>Create custom hooks for complex state logic</li> </ol> <p>Pro Tip: Start with local state and React Query. Add Zustand only when you need to share state between distant components. Avoid over-engineering your state management early on.</p>"},{"location":"data/api-integration/","title":"API Integration","text":"<p>Comprehensive guide to integrating APIs in React Native applications with modern patterns, error handling, and performance optimization.</p>"},{"location":"data/api-integration/#api-architecture-overview","title":"API Architecture Overview","text":"graph TB     A[React Native App] --&gt; B[API Layer]     B --&gt; C[HTTP Client]     B --&gt; D[Request/Response Interceptors]     B --&gt; E[Error Handling]     B --&gt; F[Caching Layer]      C --&gt; C1[Fetch API]     C --&gt; C2[Axios]     C --&gt; C3[Custom Client]      D --&gt; D1[Authentication]     D --&gt; D2[Request Logging]     D --&gt; D3[Response Transformation]      E --&gt; E1[Network Errors]     E --&gt; E2[HTTP Errors]     E --&gt; E3[Timeout Handling]      F --&gt; F1[Memory Cache]     F --&gt; F2[Persistent Cache]     F --&gt; F3[Cache Invalidation]"},{"location":"data/api-integration/#http-client-setup","title":"HTTP Client Setup","text":""},{"location":"data/api-integration/#custom-api-client","title":"Custom API Client","text":"<pre><code>// lib/api/client.ts\ninterface ApiClientConfig {\n  baseURL: string;\n  timeout?: number;\n  headers?: Record&lt;string, string&gt;;\n}\n\ninterface RequestConfig {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record&lt;string, string&gt;;\n  body?: any;\n  timeout?: number;\n  cache?: boolean;\n}\n\ninterface ApiResponse&lt;T&gt; {\n  data: T;\n  status: number;\n  headers: Headers;\n  ok: boolean;\n}\n\nclass ApiClient {\n  private baseURL: string;\n  private defaultHeaders: Record&lt;string, string&gt;;\n  private timeout: number;\n  private interceptors: {\n    request: Array&lt;(config: RequestConfig) =&gt; RequestConfig | Promise&lt;RequestConfig&gt;&gt;;\n    response: Array&lt;(response: ApiResponse&lt;any&gt;) =&gt; ApiResponse&lt;any&gt; | Promise&lt;ApiResponse&lt;any&gt;&gt;&gt;;\n  };\n\n  constructor(config: ApiClientConfig) {\n    this.baseURL = config.baseURL;\n    this.timeout = config.timeout || 10000;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      ...config.headers,\n    };\n    this.interceptors = {\n      request: [],\n      response: [],\n    };\n  }\n\n  addRequestInterceptor(\n    interceptor: (config: RequestConfig) =&gt; RequestConfig | Promise&lt;RequestConfig&gt;\n  ) {\n    this.interceptors.request.push(interceptor);\n  }\n\n  addResponseInterceptor(\n    interceptor: (response: ApiResponse&lt;any&gt;) =&gt; ApiResponse&lt;any&gt; | Promise&lt;ApiResponse&lt;any&gt;&gt;\n  ) {\n    this.interceptors.response.push(interceptor);\n  }\n\n  async request&lt;T&gt;(endpoint: string, config: RequestConfig = {}): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Apply request interceptors\n    let requestConfig = { ...config };\n    for (const interceptor of this.interceptors.request) {\n      requestConfig = await interceptor(requestConfig);\n    }\n\n    const headers = {\n      ...this.defaultHeaders,\n      ...requestConfig.headers,\n    };\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() =&gt; controller.abort(), requestConfig.timeout || this.timeout);\n\n    try {\n      const response = await fetch(url, {\n        method: requestConfig.method || 'GET',\n        headers,\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : undefined,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      let data: T;\n      const contentType = response.headers.get('content-type');\n\n      if (contentType &amp;&amp; contentType.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = (await response.text()) as unknown as T;\n      }\n\n      let apiResponse: ApiResponse&lt;T&gt; = {\n        data,\n        status: response.status,\n        headers: response.headers,\n        ok: response.ok,\n      };\n\n      // Apply response interceptors\n      for (const interceptor of this.interceptors.response) {\n        apiResponse = await interceptor(apiResponse);\n      }\n\n      if (!response.ok) {\n        throw new ApiError(response.status, data as any, response.statusText);\n      }\n\n      return apiResponse;\n    } catch (error) {\n      clearTimeout(timeoutId);\n\n      if (error.name === 'AbortError') {\n        throw new ApiError(408, 'Request timeout', 'Request Timeout');\n      }\n\n      throw error;\n    }\n  }\n\n  async get&lt;T&gt;(\n    endpoint: string,\n    config?: Omit&lt;RequestConfig, 'method' | 'body'&gt;\n  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n    return this.request&lt;T&gt;(endpoint, { ...config, method: 'GET' });\n  }\n\n  async post&lt;T&gt;(\n    endpoint: string,\n    body?: any,\n    config?: Omit&lt;RequestConfig, 'method'&gt;\n  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n    return this.request&lt;T&gt;(endpoint, { ...config, method: 'POST', body });\n  }\n\n  async put&lt;T&gt;(\n    endpoint: string,\n    body?: any,\n    config?: Omit&lt;RequestConfig, 'method'&gt;\n  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n    return this.request&lt;T&gt;(endpoint, { ...config, method: 'PUT', body });\n  }\n\n  async delete&lt;T&gt;(\n    endpoint: string,\n    config?: Omit&lt;RequestConfig, 'method' | 'body'&gt;\n  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n    return this.request&lt;T&gt;(endpoint, { ...config, method: 'DELETE' });\n  }\n}\n\nclass ApiError extends Error {\n  constructor(\n    public status: number,\n    public data: any,\n    public statusText: string\n  ) {\n    super(`API Error ${status}: ${statusText}`);\n    this.name = 'ApiError';\n  }\n}\n\nexport { ApiClient, ApiError };\n</code></pre>"},{"location":"data/api-integration/#api-client-configuration","title":"API Client Configuration","text":"<pre><code>// lib/api/index.ts\nimport { ApiClient } from './client';\nimport { authStorage } from '../auth/storage';\n\nconst apiClient = new ApiClient({\n  baseURL: process.env.EXPO_PUBLIC_API_URL || 'https://api.example.com',\n  timeout: 15000,\n});\n\n// Authentication interceptor\napiClient.addRequestInterceptor(async config =&gt; {\n  const token = await authStorage.getToken();\n  if (token) {\n    config.headers = {\n      ...config.headers,\n      Authorization: `Bearer ${token}`,\n    };\n  }\n  return config;\n});\n\n// Response interceptor for token refresh\napiClient.addResponseInterceptor(async response =&gt; {\n  if (response.status === 401) {\n    // Handle token refresh\n    try {\n      const refreshToken = await authStorage.getRefreshToken();\n      if (refreshToken) {\n        const newTokens = await refreshAuthTokens(refreshToken);\n        await authStorage.setTokens(newTokens.accessToken, newTokens.refreshToken);\n\n        // Retry original request\n        // Note: This is a simplified example\n        // In practice, you'd want to retry the original request\n      }\n    } catch (error) {\n      // Redirect to login\n      await authStorage.clearTokens();\n      // Navigate to login screen\n    }\n  }\n  return response;\n});\n\n// Logging interceptor (development only)\nif (__DEV__) {\n  apiClient.addRequestInterceptor(config =&gt; {\n    console.log('API Request:', config);\n    return config;\n  });\n\n  apiClient.addResponseInterceptor(response =&gt; {\n    console.log('API Response:', {\n      status: response.status,\n      data: response.data,\n    });\n    return response;\n  });\n}\n\nexport { apiClient };\n</code></pre>"},{"location":"data/api-integration/#service-layer-pattern","title":"Service Layer Pattern","text":""},{"location":"data/api-integration/#base-service","title":"Base Service","text":"<pre><code>// services/BaseService.ts\nimport { apiClient, ApiError } from '../lib/api';\n\nexport abstract class BaseService {\n  protected client = apiClient;\n\n  protected handleError(error: unknown): never {\n    if (error instanceof ApiError) {\n      switch (error.status) {\n        case 400:\n          throw new Error('Invalid request data');\n        case 401:\n          throw new Error('Authentication required');\n        case 403:\n          throw new Error('Access denied');\n        case 404:\n          throw new Error('Resource not found');\n        case 500:\n          throw new Error('Server error occurred');\n        default:\n          throw new Error(`API error: ${error.statusText}`);\n      }\n    }\n\n    if (error instanceof Error) {\n      throw error;\n    }\n\n    throw new Error('Unknown error occurred');\n  }\n\n  protected async request&lt;T&gt;(\n    method: 'get' | 'post' | 'put' | 'delete',\n    endpoint: string,\n    data?: any\n  ): Promise&lt;T&gt; {\n    try {\n      const response = await this.client[method]&lt;T&gt;(endpoint, data);\n      return response.data;\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n}\n</code></pre>"},{"location":"data/api-integration/#specific-services","title":"Specific Services","text":"<pre><code>// services/UserService.ts\nimport { BaseService } from './BaseService';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface CreateUserRequest {\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport interface UpdateUserRequest {\n  name?: string;\n  avatar?: string;\n}\n\nexport interface UserFilters {\n  search?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: 'name' | 'email' | 'createdAt';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedUsers {\n  users: User[];\n  total: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n\nclass UserService extends BaseService {\n  async getUsers(filters: UserFilters = {}): Promise&lt;PaginatedUsers&gt; {\n    const params = new URLSearchParams();\n\n    Object.entries(filters).forEach(([key, value]) =&gt; {\n      if (value !== undefined) {\n        params.append(key, value.toString());\n      }\n    });\n\n    return this.request&lt;PaginatedUsers&gt;('get', `/users?${params}`);\n  }\n\n  async getUser(id: string): Promise&lt;User&gt; {\n    return this.request&lt;User&gt;('get', `/users/${id}`);\n  }\n\n  async createUser(userData: CreateUserRequest): Promise&lt;User&gt; {\n    return this.request&lt;User&gt;('post', '/users', userData);\n  }\n\n  async updateUser(id: string, updates: UpdateUserRequest): Promise&lt;User&gt; {\n    return this.request&lt;User&gt;('put', `/users/${id}`, updates);\n  }\n\n  async deleteUser(id: string): Promise&lt;void&gt; {\n    return this.request&lt;void&gt;('delete', `/users/${id}`);\n  }\n\n  async uploadAvatar(id: string, imageUri: string): Promise&lt;User&gt; {\n    const formData = new FormData();\n    formData.append('avatar', {\n      uri: imageUri,\n      type: 'image/jpeg',\n      name: 'avatar.jpg',\n    } as any);\n\n    try {\n      const response = await this.client.request&lt;User&gt;(`/users/${id}/avatar`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n}\n\nexport const userService = new UserService();\n</code></pre>"},{"location":"data/api-integration/#react-query-integration","title":"React Query Integration","text":""},{"location":"data/api-integration/#query-hooks","title":"Query Hooks","text":"<pre><code>// hooks/useUsers.ts\nimport { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport {\n  userService,\n  UserFilters,\n  CreateUserRequest,\n  UpdateUserRequest,\n} from '../services/UserService';\n\nexport const useUsers = (filters: UserFilters = {}) =&gt; {\n  return useQuery({\n    queryKey: ['users', filters],\n    queryFn: () =&gt; userService.getUsers(filters),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    cacheTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n\nexport const useUser = (id: string) =&gt; {\n  return useQuery({\n    queryKey: ['user', id],\n    queryFn: () =&gt; userService.getUser(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useInfiniteUsers = (filters: Omit&lt;UserFilters, 'page'&gt; = {}) =&gt; {\n  return useInfiniteQuery({\n    queryKey: ['users', 'infinite', filters],\n    queryFn: ({ pageParam = 1 }) =&gt; userService.getUsers({ ...filters, page: pageParam }),\n    getNextPageParam: lastPage =&gt; (lastPage.hasMore ? lastPage.page + 1 : undefined),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useCreateUser = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (userData: CreateUserRequest) =&gt; userService.createUser(userData),\n    onSuccess: newUser =&gt; {\n      // Update users list\n      queryClient.setQueryData(['users'], (old: any) =&gt; {\n        if (!old) return { users: [newUser], total: 1, page: 1, limit: 10, hasMore: false };\n        return {\n          ...old,\n          users: [newUser, ...old.users],\n          total: old.total + 1,\n        };\n      });\n\n      // Set individual user data\n      queryClient.setQueryData(['user', newUser.id], newUser);\n    },\n  });\n};\n\nexport const useUpdateUser = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: UpdateUserRequest }) =&gt;\n      userService.updateUser(id, updates),\n    onMutate: async ({ id, updates }) =&gt; {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['user', id] });\n\n      // Snapshot previous value\n      const previousUser = queryClient.getQueryData(['user', id]);\n\n      // Optimistically update\n      queryClient.setQueryData(['user', id], (old: any) =&gt; ({\n        ...old,\n        ...updates,\n      }));\n\n      return { previousUser };\n    },\n    onError: (err, { id }, context) =&gt; {\n      // Rollback on error\n      queryClient.setQueryData(['user', id], context?.previousUser);\n    },\n    onSettled: (data, error, { id }) =&gt; {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: ['user', id] });\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n\nexport const useDeleteUser = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) =&gt; userService.deleteUser(id),\n    onSuccess: (_, deletedId) =&gt; {\n      // Remove from users list\n      queryClient.setQueryData(['users'], (old: any) =&gt; {\n        if (!old) return old;\n        return {\n          ...old,\n          users: old.users.filter((user: any) =&gt; user.id !== deletedId),\n          total: old.total - 1,\n        };\n      });\n\n      // Remove individual user data\n      queryClient.removeQueries({ queryKey: ['user', deletedId] });\n    },\n  });\n};\n</code></pre>"},{"location":"data/api-integration/#query-configuration","title":"Query Configuration","text":"<pre><code>// lib/queryClient.ts\nimport { QueryClient } from '@tanstack/react-query';\nimport { ApiError } from './api';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      retry: (failureCount, error) =&gt; {\n        // Don't retry on 4xx errors\n        if (error instanceof ApiError &amp;&amp; error.status &gt;= 400 &amp;&amp; error.status &lt; 500) {\n          return false;\n        }\n        return failureCount &lt; 3;\n      },\n      retryDelay: attemptIndex =&gt; Math.min(1000 * 2 ** attemptIndex, 30000),\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Global error handler\nqueryClient.setMutationDefaults(['user'], {\n  onError: error =&gt; {\n    console.error('Mutation error:', error);\n    // Show toast notification\n    // toast.error(error.message);\n  },\n});\n</code></pre>"},{"location":"data/api-integration/#error-handling","title":"Error Handling","text":""},{"location":"data/api-integration/#error-boundary-for-api-errors","title":"Error Boundary for API Errors","text":"<pre><code>// components/ApiErrorBoundary.tsx\ninterface ApiErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ApiErrorBoundary extends React.Component&lt;\nReact.PropsWithChildren&lt;{}&gt;,\nApiErrorBoundaryState\n&gt; {\n  constructor(props: React.PropsWithChildren&lt;{}&gt;) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ApiErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('API Error Boundary:', error, errorInfo);\n\n// Log to crash reporting\n    crashlytics().recordError(error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;View className=\"flex-1 items-center justify-center p-4\"&gt;\n          &lt;Text className=\"text-lg font-semibold mb-2\"&gt;\n            Something went wrong\n          &lt;/Text&gt;\n          &lt;Text className=\"text-gray-600 text-center mb-4\"&gt;\n            {this.state.error?.message || 'An unexpected error occurred'}\n          &lt;/Text&gt;\n          &lt;Button onPress={() =&gt; this.setState({ hasError: false })}&gt;\n            Try Again\n          &lt;/Button&gt;\n        &lt;/View&gt;\n      );\n    }\n\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"data/api-integration/#error-handling-hook","title":"Error Handling Hook","text":"<pre><code>// hooks/useErrorHandler.ts\nimport { useCallback } from 'react';\nimport { ApiError } from '../lib/api';\n\nexport const useErrorHandler = () =&gt; {\n  const handleError = useCallback((error: unknown) =&gt; {\n    let message = 'An unexpected error occurred';\n\n    if (error instanceof ApiError) {\n      switch (error.status) {\n        case 400:\n          message = 'Invalid request. Please check your input.';\n          break;\n        case 401:\n          message = 'Please log in to continue.';\n          break;\n        case 403:\n          message = 'You do not have permission to perform this action.';\n          break;\n        case 404:\n          message = 'The requested resource was not found.';\n          break;\n        case 500:\n          message = 'Server error. Please try again later.';\n          break;\n        default:\n          message = error.message || 'Network error occurred.';\n      }\n    } else if (error instanceof Error) {\n      message = error.message;\n    }\n\n    // Show toast notification\n    // toast.error(message);\n\n    // Log error\n    console.error('Error handled:', error);\n\n    return message;\n  }, []);\n\n  return { handleError };\n};\n</code></pre>"},{"location":"data/api-integration/#requestresponse-transformation","title":"Request/Response Transformation","text":""},{"location":"data/api-integration/#data-transformation","title":"Data Transformation","text":"<pre><code>// utils/transformers.ts\nexport const transformUserFromApi = (apiUser: any): User =&gt; ({\n  id: apiUser.id,\n  email: apiUser.email,\n  name: apiUser.full_name, // Transform snake_case to camelCase\n  avatar: apiUser.avatar_url,\n  createdAt: apiUser.created_at,\n  updatedAt: apiUser.updated_at,\n});\n\nexport const transformUserToApi = (user: Partial&lt;User&gt;): any =&gt; ({\n  full_name: user.name,\n  avatar_url: user.avatar,\n  // Only include fields that should be sent to API\n});\n\n// Generic transformer\nexport const createTransformer = &lt;TInput, TOutput&gt;(transformFn: (input: TInput) =&gt; TOutput) =&gt; {\n  return {\n    transform: transformFn,\n    transformArray: (items: TInput[]): TOutput[] =&gt; items.map(transformFn),\n  };\n};\n\nconst userTransformer = createTransformer(transformUserFromApi);\n</code></pre>"},{"location":"data/api-integration/#response-interceptor-with-transformation","title":"Response Interceptor with Transformation","text":"<pre><code>// Add transformation interceptor\napiClient.addResponseInterceptor(response =&gt; {\n  // Transform user responses\n  if (response.data &amp;&amp; typeof response.data === 'object') {\n    if (Array.isArray(response.data.users)) {\n      response.data.users = response.data.users.map(transformUserFromApi);\n    } else if (response.data.id &amp;&amp; response.data.email) {\n      response.data = transformUserFromApi(response.data);\n    }\n  }\n\n  return response;\n});\n</code></pre>"},{"location":"data/api-integration/#best-practices","title":"Best Practices","text":""},{"location":"data/api-integration/#1-type-safety","title":"1. Type Safety","text":"<pre><code>// Always use proper TypeScript types\ninterface ApiEndpoints {\n  getUsers: (filters: UserFilters) =&gt; Promise&lt;PaginatedUsers&gt;;\n  getUser: (id: string) =&gt; Promise&lt;User&gt;;\n  createUser: (data: CreateUserRequest) =&gt; Promise&lt;User&gt;;\n}\n\n// Use branded types for IDs\ntype UserId = string &amp; { readonly brand: unique symbol };\ntype PostId = string &amp; { readonly brand: unique symbol };\n</code></pre>"},{"location":"data/api-integration/#2-request-deduplication","title":"2. Request Deduplication","text":"<pre><code>// Prevent duplicate requests\nconst requestCache = new Map&lt;string, Promise&lt;any&gt;&gt;();\n\nconst deduplicatedRequest = async &lt;T&gt;(key: string, requestFn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; =&gt; {\n  if (requestCache.has(key)) {\n    return requestCache.get(key);\n  }\n\n  const promise = requestFn().finally(() =&gt; {\n    requestCache.delete(key);\n  });\n\n  requestCache.set(key, promise);\n  return promise;\n};\n</code></pre>"},{"location":"data/api-integration/#3-offline-support","title":"3. Offline Support","text":"<pre><code>// Queue requests when offline\nimport NetInfo from '@react-native-community/netinfo';\n\nclass OfflineRequestQueue {\n  private queue: Array&lt;() =&gt; Promise&lt;any&gt;&gt; = [];\n  private isOnline = true;\n\n  constructor() {\n    NetInfo.addEventListener(state =&gt; {\n      this.isOnline = state.isConnected ?? false;\n      if (this.isOnline) {\n        this.processQueue();\n      }\n    });\n  }\n\n  async addRequest&lt;T&gt;(requestFn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; {\n    if (this.isOnline) {\n      return requestFn();\n    }\n\n    return new Promise((resolve, reject) =&gt; {\n      this.queue.push(async () =&gt; {\n        try {\n          const result = await requestFn();\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  private async processQueue() {\n    while (this.queue.length &gt; 0 &amp;&amp; this.isOnline) {\n      const request = this.queue.shift();\n      if (request) {\n        try {\n          await request();\n        } catch (error) {\n          console.error('Queued request failed:', error);\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"data/api-integration/#next-steps","title":"Next Steps","text":"<ol> <li>Set up your API client with proper configuration and interceptors</li> <li>Create service layer with proper error handling and type safety</li> <li>Integrate React Query for efficient data fetching and caching</li> <li>Implement proper error boundaries and user feedback</li> <li>Add request transformation and validation</li> <li>Consider offline support and request queuing for better UX</li> </ol> <p>Pro Tip: Start with a simple API client and gradually add features like caching, offline support, and advanced error handling. Focus on type safety and consistent error handling patterns from the beginning.</p>"},{"location":"data/offline-support/","title":"Offline Support","text":"<p>Guide to offline support in React Native applications.</p>"},{"location":"data/offline-support/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for offline support.</p>"},{"location":"data/offline-support/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"data/offline-support/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"data/realtime-data/","title":"Realtime Data","text":"<p>Guide to realtime data in React Native applications.</p>"},{"location":"data/realtime-data/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for realtime data.</p>"},{"location":"data/realtime-data/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"data/realtime-data/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"data/state-sync/","title":"State Synchronization","text":"<p>Guide to state synchronization in React Native applications.</p>"},{"location":"data/state-sync/#overview","title":"Overview","text":"<p>State synchronization ensures data consistency across different parts of your application and between client and server.</p>"},{"location":"data/state-sync/#implementation-strategies","title":"Implementation Strategies","text":""},{"location":"data/state-sync/#real-time-synchronization","title":"Real-time Synchronization","text":"<pre><code>// Using WebSocket for real-time updates\nimport { useEffect, useState } from 'react';\n\nexport function useRealtimeSync(endpoint: string) {\n  const [data, setData] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() =&gt; {\n    const ws = new WebSocket(endpoint);\n\n    ws.onopen = () =&gt; setIsConnected(true);\n    ws.onmessage = event =&gt; {\n      const update = JSON.parse(event.data);\n      setData(update);\n    };\n    ws.onclose = () =&gt; setIsConnected(false);\n\n    return () =&gt; ws.close();\n  }, [endpoint]);\n\n  return { data, isConnected };\n}\n</code></pre>"},{"location":"data/state-sync/#best-practices","title":"Best Practices","text":"<ol> <li>Conflict Resolution: Implement strategies for handling conflicting updates</li> <li>Offline Support: Queue updates when offline and sync when reconnected</li> <li>Performance: Use efficient diffing algorithms for large datasets</li> <li>Error Handling: Gracefully handle sync failures and network issues</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"deployment/app-store/","title":"App Store","text":"<p>Guide to app store in React Native applications.</p>"},{"location":"deployment/app-store/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for app store.</p>"},{"location":"deployment/app-store/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"deployment/app-store/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"deployment/build-config/","title":"Build Config","text":"<p>Guide to build config in React Native applications.</p>"},{"location":"deployment/build-config/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for build config.</p>"},{"location":"deployment/build-config/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"deployment/build-config/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"deployment/cicd/","title":"CI/CD Pipelines","text":"<p>Comprehensive guide to setting up continuous integration and deployment pipelines for React Native applications.</p>"},{"location":"deployment/cicd/#cicd-architecture","title":"CI/CD Architecture","text":"graph TB     A[Code Push] --&gt; B[GitHub Actions]     B --&gt; C[Build &amp; Test]     C --&gt; D[Code Quality]     D --&gt; E[Security Scan]     E --&gt; F{Branch?}      F --&gt;|main| G[Production Build]     F --&gt;|develop| H[Staging Build]     F --&gt;|feature| I[Preview Build]      G --&gt; J[App Store Deploy]     G --&gt; K[Play Store Deploy]      H --&gt; L[TestFlight]     H --&gt; M[Internal Testing]      I --&gt; N[PR Preview]      J --&gt; O[Production Monitoring]     K --&gt; O"},{"location":"deployment/cicd/#github-actions-setup","title":"GitHub Actions Setup","text":""},{"location":"deployment/cicd/#main-workflow","title":"Main Workflow","text":"<pre><code># .github/workflows/ci-cd.yml\nname: CI/CD Pipeline\n\non:\npush:\nbranches: [main, develop]\npull_request:\nbranches: [main, develop]\n\nenv:\nNODE_VERSION: '18'\nJAVA_VERSION: '11'\nXCODE_VERSION: '14.3'\n\njobs:\ntest:\nname: Test &amp; Quality\nruns-on: ubuntu-latest\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: ${{ env.NODE_VERSION }}\ncache: 'npm'\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: Run linter\nrun: npm run lint\n\n  - name: Run type check\nrun: npm run type-check\n\n  - name: Run tests\nrun: npm test -- --coverage --watchAll=false\n\n  - name: Upload coverage to Codecov\nuses: codecov/codecov-action@v3\nwith:\nfile: ./coverage/lcov.info\n\n  - name: SonarCloud Scan\nuses: SonarSource/sonarcloud-github-action@master\nenv:\nGITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\nSONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\nsecurity:\nname: Security Scan\nruns-on: ubuntu-latest\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Run Snyk to check for vulnerabilities\nuses: snyk/actions/node@master\nenv:\nSNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\nwith:\nargs: --severity-threshold=high\n\n  - name: Upload result to GitHub Code Scanning\nuses: github/codeql-action/upload-sarif@v2\nwith:\nsarif_file: snyk.sarif\n\nbuild-ios:\nname: Build iOS\nruns-on: macos-latest\nneeds: [test, security]\nif: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: ${{ env.NODE_VERSION }}\ncache: 'npm'\n\n  - name: Setup Xcode\nuses: maxim-lobanov/setup-xcode@v1\nwith:\nxcode-version: ${{ env.XCODE_VERSION }}\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: Setup Expo\nuses: expo/expo-github-action@v8\nwith:\nexpo-version: latest\ntoken: ${{ secrets.EXPO_TOKEN }}\n\n  - name: Build iOS app\nrun: |\n    if [ \"${{ github.ref }}\" = \"refs/heads/main\" ]; then\n    eas build --platform ios --profile production --non-interactive\n    else\n    eas build --platform ios --profile preview --non-interactive\n    fi\n\nbuild-android:\nname: Build Android\nruns-on: ubuntu-latest\nneeds: [test, security]\nif: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: ${{ env.NODE_VERSION }}\ncache: 'npm'\n\n  - name: Setup Java\nuses: actions/setup-java@v3\nwith:\ndistribution: 'temurin'\njava-version: ${{ env.JAVA_VERSION }}\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: Setup Expo\nuses: expo/expo-github-action@v8\nwith:\nexpo-version: latest\ntoken: ${{ secrets.EXPO_TOKEN }}\n\n  - name: Build Android app\nrun: |\n    if [ \"${{ github.ref }}\" = \"refs/heads/main\" ]; then\n    eas build --platform android --profile production --non-interactive\n    else\n    eas build --platform android --profile preview --non-interactive\n    fi\n\ndeploy-stores:\nname: Deploy to App Stores\nruns-on: ubuntu-latest\nneeds: [build-ios, build-android]\nif: github.ref == 'refs/heads/main'\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Expo\nuses: expo/expo-github-action@v8\nwith:\nexpo-version: latest\ntoken: ${{ secrets.EXPO_TOKEN }}\n\n  - name: Submit to App Store\nrun: eas submit --platform ios --latest --non-interactive\n\n  - name: Submit to Play Store\nrun: eas submit --platform android --latest --non-interactive\n\nnotify:\nname: Notify Team\nruns-on: ubuntu-latest\nneeds: [deploy-stores]\nif: always()\nsteps:\n  - name: Notify Slack\nuses: 8398a7/action-slack@v3\nwith:\nstatus: ${{ job.status }}\nchannel: '#deployments'\nwebhook_url: ${{ secrets.SLACK_WEBHOOK }}\n</code></pre>"},{"location":"deployment/cicd/#e2e-testing-workflow","title":"E2E Testing Workflow","text":"<pre><code># .github/workflows/e2e.yml\nname: E2E Tests\n\non:\nschedule:\n  - cron: '0 2 * * *' # Run daily at 2 AM\nworkflow_dispatch:\n\njobs:\ne2e-ios:\nname: E2E Tests iOS\nruns-on: macos-latest\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: '18'\ncache: 'npm'\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: Build iOS app for testing\nrun: npx detox build --configuration ios.sim.release\n\n  - name: Run E2E tests\nrun: npx detox test --configuration ios.sim.release --cleanup\n\n  - name: Upload test results\nuses: actions/upload-artifact@v3\nif: failure()\nwith:\nname: e2e-test-results\npath: e2e/artifacts/\n\ne2e-android:\nname: E2E Tests Android\nruns-on: macos-latest\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: '18'\ncache: 'npm'\n\n  - name: Setup Java\nuses: actions/setup-java@v3\nwith:\ndistribution: 'temurin'\njava-version: '11'\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: AVD cache\nuses: actions/cache@v3\nid: avd-cache\nwith:\npath: |\n    ~/.android/avd/*\n    ~/.android/adb*\nkey: avd-29\n\n  - name: Create AVD and generate snapshot for caching\nif: steps.avd-cache.outputs.cache-hit != 'true'\nuses: reactivecircus/android-emulator-runner@v2\nwith:\napi-level: 29\nforce-avd-creation: false\nemulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none\ndisable-animations: false\nscript: echo \"Generated AVD snapshot for caching.\"\n\n  - name: Run E2E tests\nuses: reactivecircus/android-emulator-runner@v2\nwith:\napi-level: 29\nscript: |\n    npx detox build --configuration android.emu.release\n    npx detox test --configuration android.emu.release --cleanup\n</code></pre>"},{"location":"deployment/cicd/#eas-build-configuration","title":"EAS Build Configuration","text":""},{"location":"deployment/cicd/#eas-configuration","title":"EAS Configuration","text":"<pre><code>// eas.json\n{\n  \"cli\": {\n    \"version\": \"&gt;= 3.0.0\"\n  },\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"resourceClass\": \"m1-medium\"\n      }\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true,\n        \"resourceClass\": \"m1-medium\"\n      },\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"ios\": {\n        \"resourceClass\": \"m1-medium\"\n      }\n    }\n  },\n  \"submit\": {\n    \"production\": {\n      \"ios\": {\n        \"appleId\": \"your-apple-id@example.com\",\n        \"ascAppId\": \"1234567890\",\n        \"appleTeamId\": \"ABCDEFGHIJ\"\n      },\n      \"android\": {\n        \"serviceAccountKeyPath\": \"./google-service-account.json\",\n        \"track\": \"production\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"deployment/cicd/#build-hooks","title":"Build Hooks","text":"<pre><code>// scripts/eas-build-pre-install.js\n#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Set environment-specific configurations\nconst environment = process.env.EAS_BUILD_PROFILE;\n\nconsole.log(`Running pre-install hook for ${environment} build`);\n\n// Copy environment-specific files\nif (environment === 'production') {\n  fs.copyFileSync(\n    path.join(__dirname, '../config/production.env'),\n    path.join(__dirname, '../.env')\n  );\n} else if (environment === 'preview') {\n  fs.copyFileSync(\n    path.join(__dirname, '../config/staging.env'),\n    path.join(__dirname, '../.env')\n  );\n}\n\n// Update app configuration\nconst appConfig = require('../app.json');\nif (environment === 'production') {\n  appConfig.expo.name = 'MyApp';\n  appConfig.expo.slug = 'myapp';\n} else {\n  appConfig.expo.name = 'MyApp (Preview)';\n  appConfig.expo.slug = 'myapp-preview';\n}\n\nfs.writeFileSync(\n  path.join(__dirname, '../app.json'),\n  JSON.stringify(appConfig, null, 2)\n);\n</code></pre>"},{"location":"deployment/cicd/#environment-management","title":"Environment Management","text":""},{"location":"deployment/cicd/#environment-configuration","title":"Environment Configuration","text":"<pre><code>// config/environments.ts\ninterface Environment {\n  API_URL: string;\n  WS_URL: string;\n  SENTRY_DSN: string;\n  ANALYTICS_KEY: string;\n  LOG_LEVEL: 'debug' | 'info' | 'warn' | 'error';\n}\n\nconst environments: Record&lt;string, Environment&gt; = {\n  development: {\n    API_URL: 'http://localhost:3000/api',\n    WS_URL: 'ws://localhost:3000',\n    SENTRY_DSN: '',\n    ANALYTICS_KEY: '',\n    LOG_LEVEL: 'debug',\n  },\n  staging: {\n    API_URL: 'https://staging-api.example.com',\n    WS_URL: 'wss://staging-api.example.com',\n    SENTRY_DSN: process.env.EXPO_PUBLIC_SENTRY_DSN_STAGING!,\n    ANALYTICS_KEY: process.env.EXPO_PUBLIC_ANALYTICS_KEY_STAGING!,\n    LOG_LEVEL: 'info',\n  },\n  production: {\n    API_URL: 'https://api.example.com',\n    WS_URL: 'wss://api.example.com',\n    SENTRY_DSN: process.env.EXPO_PUBLIC_SENTRY_DSN_PRODUCTION!,\n    ANALYTICS_KEY: process.env.EXPO_PUBLIC_ANALYTICS_KEY_PRODUCTION!,\n    LOG_LEVEL: 'error',\n  },\n};\n\nconst currentEnvironment = process.env.EXPO_PUBLIC_ENVIRONMENT || 'development';\n\nexport const config = environments[currentEnvironment];\n</code></pre>"},{"location":"deployment/cicd/#secret-management","title":"Secret Management","text":"<pre><code># .github/workflows/secrets.yml\nname: Manage Secrets\n\non:\nworkflow_dispatch:\ninputs:\naction:\ndescription: 'Action to perform'\nrequired: true\ndefault: 'update'\ntype: choice\noptions:\n  - update\n  - rotate\n\njobs:\nmanage-secrets:\nruns-on: ubuntu-latest\nsteps:\n  - name: Update secrets in EAS\nrun: |\n  npx eas secret:create --scope project --name API_KEY --value \"${{ secrets.API_KEY }}\" --force\n  npx eas secret:create --scope project --name DATABASE_URL --value \"${{ secrets.DATABASE_URL }}\" --force\nenv:\nEXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}\n</code></pre>"},{"location":"deployment/cicd/#automated-testing-in-ci","title":"Automated Testing in CI","text":""},{"location":"deployment/cicd/#test-configuration","title":"Test Configuration","text":"<pre><code>// jest.config.ci.js\nmodule.exports = {\n  ...require('./jest.config.js'),\n  collectCoverage: true,\n  coverageReporters: ['text', 'lcov', 'html'],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n  testResultsProcessor: 'jest-sonar-reporter',\n  reporters: [\n    'default',\n    [\n      'jest-junit',\n      {\n        outputDirectory: 'test-results',\n        outputName: 'junit.xml',\n      },\n    ],\n  ],\n};\n</code></pre>"},{"location":"deployment/cicd/#performance-testing","title":"Performance Testing","text":"<pre><code># .github/workflows/performance.yml\nname: Performance Tests\n\non:\nschedule:\n  - cron: '0 4 * * 1' # Weekly on Monday at 4 AM\nworkflow_dispatch:\n\njobs:\nlighthouse:\nruns-on: ubuntu-latest\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: '18'\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: Build web version\nrun: npx expo export:web\n\n  - name: Serve web build\nrun: npx serve web-build &amp;\n\n  - name: Run Lighthouse CI\nrun: |\n    npm install -g @lhci/cli\n    lhci autorun\nenv:\nLHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}\n\nbundle-analysis:\nruns-on: ubuntu-latest\nsteps:\n  - name: Checkout code\nuses: actions/checkout@v4\n\n  - name: Setup Node.js\nuses: actions/setup-node@v4\nwith:\nnode-version: '18'\n\n  - name: Install dependencies\nrun: npm ci\n\n  - name: Analyze bundle\nrun: |\n    npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android-bundle.js\n    npx bundlesize\n\n  - name: Comment bundle size\nuses: actions/github-script@v6\nwith:\nscript: |\n    const fs = require('fs');\n    const bundleSize = fs.statSync('android-bundle.js').size;\n    const sizeMB = (bundleSize / 1024 / 1024).toFixed(2);\n\n    github.rest.issues.createComment({\nissue_number: context.issue.number,\nowner: context.repo.owner,\nrepo: context.repo.repo,\nbody: `Bundle size: ${sizeMB} MB`\n    });\n</code></pre>"},{"location":"deployment/cicd/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"deployment/cicd/#blue-green-deployment","title":"Blue-Green Deployment","text":"<pre><code># .github/workflows/blue-green.yml\nname: Blue-Green Deployment\n\non:\nworkflow_dispatch:\ninputs:\nenvironment:\ndescription: 'Target environment'\nrequired: true\ndefault: 'staging'\ntype: choice\noptions:\n  - staging\n  - production\n\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n  - name: Deploy to Blue environment\nrun: |\n # Deploy new version to blue environment\n    eas update --branch blue-${{ github.event.inputs.environment }} --message \"Blue deployment\"\n\n  - name: Run health checks\nrun: |\n # Run comprehensive health checks\n    npm run health-check:blue\n\n  - name: Switch traffic to Blue\nif: success()\nrun: |\n # Switch traffic from green to blue\n    eas channel:edit ${{ github.event.inputs.environment }} --branch blue-${{ github.event.inputs.environment }}\n\n  - name: Rollback on failure\nif: failure()\nrun: |\n # Rollback to green environment\n    eas channel:edit ${{ github.event.inputs.environment }} --branch green-${{ github.event.inputs.environment }}\n</code></pre>"},{"location":"deployment/cicd/#canary-deployment","title":"Canary Deployment","text":"<pre><code># .github/workflows/canary.yml\nname: Canary Deployment\n\non:\nworkflow_dispatch:\ninputs:\npercentage:\ndescription: 'Canary percentage'\nrequired: true\ndefault: '10'\ntype: choice\noptions:\n  - '10'\n  - '25'\n  - '50'\n  - '100'\n\njobs:\ncanary:\nruns-on: ubuntu-latest\nsteps:\n  - name: Deploy canary\nrun: |\n    eas update --branch canary --message \"Canary deployment ${{ github.event.inputs.percentage }}%\"\n\n  - name: Configure traffic split\nrun: |\n # Configure load balancer for traffic split\n # This would typically involve your infrastructure management tools\n    echo \"Routing ${{ github.event.inputs.percentage }}% traffic to canary\"\n\n  - name: Monitor metrics\nrun: |\n # Monitor error rates, performance metrics\n    npm run monitor:canary\n\n  - name: Promote or rollback\nrun: |\n # Based on metrics, either promote to 100% or rollback\n    if [ \"${{ steps.monitor.outcome }}\" = \"success\" ]; then\n    eas channel:edit production --branch canary\n    else\n    echo \"Rolling back canary deployment\"\n    fi\n</code></pre>"},{"location":"deployment/cicd/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"deployment/cicd/#deployment-monitoring","title":"Deployment Monitoring","text":"<pre><code>// scripts/deployment-monitor.ts\nimport { Sentry } from '@sentry/react-native';\n\ninterface DeploymentMetrics {\n  errorRate: number;\n  responseTime: number;\n  crashRate: number;\n  userSatisfaction: number;\n}\n\nclass DeploymentMonitor {\n  async checkDeploymentHealth(version: string): Promise&lt;boolean&gt; {\n    const metrics = await this.getMetrics(version);\n\n    const healthChecks = [\n      metrics.errorRate &lt; 0.01, // Less than 1% error rate\n      metrics.responseTime &lt; 2000, // Less than 2s response time\n      metrics.crashRate &lt; 0.001, // Less than 0.1% crash rate\n      metrics.userSatisfaction &gt; 0.95, // More than 95% satisfaction\n    ];\n\n    const isHealthy = healthChecks.every(check =&gt; check);\n\n    if (!isHealthy) {\n      await this.alertTeam(version, metrics);\n    }\n\n    return isHealthy;\n  }\n\n  private async getMetrics(version: string): Promise&lt;DeploymentMetrics&gt; {\n    // Fetch metrics from monitoring services\n    // This would integrate with your monitoring stack\n    return {\n      errorRate: 0.005,\n      responseTime: 1500,\n      crashRate: 0.0005,\n      userSatisfaction: 0.97,\n    };\n  }\n\n  private async alertTeam(version: string, metrics: DeploymentMetrics) {\n    // Send alerts via Slack, email, etc.\n    console.error(`Deployment ${version} health check failed:`, metrics);\n\n    Sentry.captureMessage(`Deployment ${version} health check failed`, {\n      level: 'error',\n      extra: { metrics },\n    });\n  }\n}\n</code></pre>"},{"location":"deployment/cicd/#best-practices","title":"Best Practices","text":""},{"location":"deployment/cicd/#1-branch-strategy","title":"1. Branch Strategy","text":"gitGraph     commit id: \"Initial\"     branch develop     checkout develop     commit id: \"Feature 1\"     branch feature/auth     checkout feature/auth     commit id: \"Add login\"     commit id: \"Add logout\"     checkout develop     merge feature/auth     commit id: \"Integration\"     checkout main     merge develop     commit id: \"Release v1.0\"     branch hotfix/critical-bug     checkout hotfix/critical-bug     commit id: \"Fix bug\"     checkout main     merge hotfix/critical-bug     checkout develop     merge hotfix/critical-bug"},{"location":"deployment/cicd/#2-automated-quality-gates","title":"2. Automated Quality Gates","text":"<pre><code>quality-gates:\n  - name: \"Code Coverage\"\nthreshold: 80%\nblocking: true\n\n  - name: \"Security Scan\"\nseverity: \"high\"\nblocking: true\n\n  - name: \"Performance Budget\"\nbundle-size: \"5MB\"\nblocking: false\n\n  - name: \"Accessibility\"\nscore: 90%\nblocking: false\n</code></pre>"},{"location":"deployment/cicd/#3-rollback-strategy","title":"3. Rollback Strategy","text":"<pre><code>// scripts/rollback.ts\ninterface RollbackPlan {\n  version: string;\n  strategy: 'immediate' | 'gradual';\n  healthChecks: string[];\n  rollbackTriggers: string[];\n}\n\nconst rollbackPlan: RollbackPlan = {\n  version: 'v1.2.3',\n  strategy: 'immediate',\n  healthChecks: ['error-rate', 'crash-rate', 'response-time'],\n  rollbackTriggers: ['error-rate &gt; 1%', 'crash-rate &gt; 0.1%', 'response-time &gt; 5s'],\n};\n</code></pre>"},{"location":"deployment/cicd/#next-steps","title":"Next Steps","text":"<ol> <li>Set up GitHub Actions workflows for your project</li> <li>Configure EAS Build with proper environment management</li> <li>Implement automated testing in your CI pipeline</li> <li>Set up deployment strategies (blue-green or canary)</li> <li>Add monitoring and alerting for deployments</li> <li>Create rollback procedures and test them regularly</li> </ol> <p>Pro Tip: Start with a simple CI/CD pipeline and gradually add complexity. Focus on automating the most critical and error-prone processes first, such as testing and basic deployment. Always have a rollback plan and test it regularly.</p>"},{"location":"deployment/google-play/","title":"Google Play","text":"<p>Guide to google play in React Native applications.</p>"},{"location":"deployment/google-play/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for google play.</p>"},{"location":"deployment/google-play/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"deployment/google-play/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"maintenance/legacy-support/","title":"Legacy Support","text":"<p>Guide to legacy support in React Native applications.</p>"},{"location":"maintenance/legacy-support/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for legacy support.</p>"},{"location":"maintenance/legacy-support/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"maintenance/legacy-support/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"maintenance/migrations/","title":"Migrations","text":"<p>Guide to migrations in React Native applications.</p>"},{"location":"maintenance/migrations/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for migrations.</p>"},{"location":"maintenance/migrations/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"maintenance/migrations/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"maintenance/ota-updates/","title":"Ota Updates","text":"<p>Guide to ota updates in React Native applications.</p>"},{"location":"maintenance/ota-updates/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for ota updates.</p>"},{"location":"maintenance/ota-updates/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"maintenance/ota-updates/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"maintenance/version-management/","title":"Version Management","text":"<p>Guide to version management in React Native applications.</p>"},{"location":"maintenance/version-management/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for version management.</p>"},{"location":"maintenance/version-management/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"maintenance/version-management/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"monitoring/ab-testing/","title":"Ab Testing","text":"<p>Guide to ab testing in React Native applications.</p>"},{"location":"monitoring/ab-testing/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for ab testing.</p>"},{"location":"monitoring/ab-testing/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"monitoring/ab-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"monitoring/analytics/","title":"Analytics","text":"<p>Guide to analytics in React Native applications.</p>"},{"location":"monitoring/analytics/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for analytics.</p>"},{"location":"monitoring/analytics/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"monitoring/analytics/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"monitoring/crash-reporting/","title":"Crash Reporting","text":"<p>Comprehensive guide to implementing crash reporting and error monitoring in React Native applications for production stability.</p>"},{"location":"monitoring/crash-reporting/#crash-reporting-architecture","title":"Crash Reporting Architecture","text":"graph TB     A[React Native App] --&gt; B[Error Boundary]     A --&gt; C[Global Error Handler]     A --&gt; D[Unhandled Promise Rejections]      B --&gt; E[Sentry]     C --&gt; E     D --&gt; E      E --&gt; F[Error Processing]     F --&gt; G[Alerting]     F --&gt; H[Analytics]     F --&gt; I[Issue Tracking]      G --&gt; J[Slack/Email]     H --&gt; K[Dashboard]     I --&gt; L[Jira/Linear]"},{"location":"monitoring/crash-reporting/#sentry-integration","title":"Sentry Integration","text":""},{"location":"monitoring/crash-reporting/#installation-and-setup","title":"Installation and Setup","text":"<pre><code>npm install @sentry/react-native\nnpx @sentry/wizard -i reactNative -p ios android\n</code></pre>"},{"location":"monitoring/crash-reporting/#configuration","title":"Configuration","text":"<pre><code>// lib/monitoring/sentry.ts\nimport * as Sentry from '@sentry/react-native';\nimport { isRunningInExpoGo } from 'expo';\n\ninterface SentryConfig {\n  dsn: string;\n  environment: string;\n  release?: string;\n  dist?: string;\n}\n\nconst sentryConfig: SentryConfig = {\n  dsn: process.env.EXPO_PUBLIC_SENTRY_DSN!,\n  environment: process.env.EXPO_PUBLIC_ENVIRONMENT || 'development',\n  release: process.env.EXPO_PUBLIC_APP_VERSION,\n  dist: process.env.EXPO_PUBLIC_BUILD_NUMBER,\n};\n\nexport function initializeSentry() {\n  if (isRunningInExpoGo()) {\n    console.log('Skipping Sentry initialization in Expo Go');\n    return;\n  }\n\n  Sentry.init({\n    dsn: sentryConfig.dsn,\n    environment: sentryConfig.environment,\n    release: sentryConfig.release,\n    dist: sentryConfig.dist,\n\n    // Performance monitoring\n    tracesSampleRate: sentryConfig.environment === 'production' ? 0.1 : 1.0,\n\n    // Session tracking\n    autoSessionTracking: true,\n\n    // Native crash handling\n    enableNativeCrashHandling: true,\n    enableNativeNagger: false,\n\n    // Debug options\n    debug: sentryConfig.environment === 'development',\n\n    // Integrations\n    integrations: [\n      new Sentry.ReactNativeTracing({\n        routingInstrumentation: new Sentry.ReactNavigationInstrumentation(),\n        enableNativeFramesTracking: true,\n        enableStallTracking: true,\n        enableAppStartTracking: true,\n      }),\n    ],\n\n    // Before send hook for filtering\n    beforeSend(event, hint) {\n      // Filter out development errors\n      if (sentryConfig.environment === 'development') {\n        console.log('Sentry Event:', event);\n        return null;\n      }\n\n      // Filter out known issues\n      if (event.exception) {\n        const error = hint.originalException;\n        if (error instanceof Error) {\n          // Skip network errors in development\n          if (error.message.includes('Network request failed')) {\n            return null;\n          }\n\n          // Skip cancelled requests\n          if (error.message.includes('cancelled')) {\n            return null;\n          }\n        }\n      }\n\n      return event;\n    },\n\n    // Before breadcrumb hook\n    beforeBreadcrumb(breadcrumb) {\n      // Filter sensitive data from breadcrumbs\n      if (breadcrumb.category === 'http') {\n        // Remove sensitive headers\n        if (breadcrumb.data?.headers) {\n          delete breadcrumb.data.headers.Authorization;\n          delete breadcrumb.data.headers.Cookie;\n        }\n      }\n\n      return breadcrumb;\n    },\n  });\n}\n\n// User context management\nexport function setUserContext(user: { id: string; email?: string; username?: string }) {\n  Sentry.setUser({\n    id: user.id,\n    email: user.email,\n    username: user.username,\n  });\n}\n\nexport function clearUserContext() {\n  Sentry.setUser(null);\n}\n\n// Custom error reporting\nexport function reportError(error: Error, context?: Record&lt;string, any&gt;) {\n  Sentry.withScope(scope =&gt; {\n    if (context) {\n      Object.entries(context).forEach(([key, value]) =&gt; {\n        scope.setContext(key, value);\n      });\n    }\n\n    Sentry.captureException(error);\n  });\n}\n\n// Performance monitoring\nexport function startTransaction(name: string, operation: string) {\n  return Sentry.startTransaction({ name, op: operation });\n}\n\nexport function addBreadcrumb(message: string, category: string, data?: any) {\n  Sentry.addBreadcrumb({\n    message,\n    category,\n    data,\n    level: 'info',\n  });\n}\n</code></pre>"},{"location":"monitoring/crash-reporting/#error-boundaries-with-sentry","title":"Error Boundaries with Sentry","text":"<pre><code>// components/SentryErrorBoundary.tsx\nimport * as Sentry from '@sentry/react-native';\n\ninterface SentryErrorBoundaryState {\n  hasError: boolean;\n  eventId?: string;\n}\n\nexport class SentryErrorBoundary extends React.Component&lt;\nReact.PropsWithChildren&lt;{}&gt;,\nSentryErrorBoundaryState\n&gt; {\n  constructor(props: React.PropsWithChildren&lt;{}&gt;) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): SentryErrorBoundaryState {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    const eventId = Sentry.captureException(error, {\n      contexts: {\n        react: {\n          componentStack: errorInfo.componentStack,\n        },\n      },\n    });\n\n    this.setState({ eventId });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;View className=\"flex-1 items-center justify-center p-4\"&gt;\n          &lt;Text className=\"text-lg font-semibold mb-2\"&gt;\n            Something went wrong\n          &lt;/Text&gt;\n          &lt;Text className=\"text-gray-600 text-center mb-4\"&gt;\n            We've been notified about this error and are working to fix it.\n          &lt;/Text&gt;\n          &lt;Button\n            onPress={() =&gt; this.setState({ hasError: false })}\n            className=\"mb-2\"\n            &gt;\n            Try Again\n          &lt;/Button&gt;\n          {this.state.eventId &amp;&amp; (\n            &lt;Button\n              variant=\"outline\"\n              onPress={() =&gt; {\n                Sentry.showReportDialog({ eventId: this.state.eventId! });\n              }}\n              &gt;\n              Report Feedback\n            &lt;/Button&gt;\n          )}\n        &lt;/View&gt;\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// HOC for wrapping screens\nexport function withSentryErrorBoundary&lt;P extends object&gt;(\n  WrappedComponent: React.ComponentType&lt;P&gt;,\n  options?: { fallback?: React.ComponentType }\n) {\n  return function SentryWrappedComponent(props: P) {\n    return (\n      &lt;SentryErrorBoundary&gt;\n        &lt;WrappedComponent {...props} /&gt;\n      &lt;/SentryErrorBoundary&gt;\n    );\n  };\n}\n</code></pre>"},{"location":"monitoring/crash-reporting/#global-error-handling","title":"Global Error Handling","text":""},{"location":"monitoring/crash-reporting/#javascript-error-handler","title":"JavaScript Error Handler","text":"<pre><code>// lib/monitoring/errorHandler.ts\nimport { ErrorUtils } from 'react-native';\nimport * as Sentry from '@sentry/react-native';\n\ninterface ErrorContext {\n  userId?: string;\n  screen?: string;\n  action?: string;\n  metadata?: Record&lt;string, any&gt;;\n}\n\nclass GlobalErrorHandler {\n  private originalHandler: any;\n  private errorContext: ErrorContext = {};\n\n  initialize() {\n    this.setupJavaScriptErrorHandler();\n    this.setupPromiseRejectionHandler();\n    this.setupConsoleErrorCapture();\n  }\n\n  setContext(context: Partial&lt;ErrorContext&gt;) {\n    this.errorContext = { ...this.errorContext, ...context };\n  }\n\n  clearContext() {\n    this.errorContext = {};\n  }\n\n  private setupJavaScriptErrorHandler() {\n    this.originalHandler = ErrorUtils.getGlobalHandler();\n\n    ErrorUtils.setGlobalHandler((error: any, isFatal: boolean) =&gt; {\n      console.error('Global JavaScript error:', error);\n\n      // Report to Sentry\n      Sentry.withScope(scope =&gt; {\n        scope.setTag('errorType', 'javascript');\n        scope.setTag('isFatal', isFatal);\n        scope.setContext('errorContext', this.errorContext);\n\n        if (this.errorContext.userId) {\n          scope.setUser({ id: this.errorContext.userId });\n        }\n\n        Sentry.captureException(error);\n      });\n\n      // Call original handler\n      this.originalHandler(error, isFatal);\n    });\n  }\n\n  private setupPromiseRejectionHandler() {\n    const tracking = require('promise/setimmediate/rejection-tracking');\n\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: (id: string, error: Error) =&gt; {\n        console.error('Unhandled promise rejection:', error);\n\n        Sentry.withScope(scope =&gt; {\n          scope.setTag('errorType', 'unhandledPromise');\n          scope.setContext('promiseRejection', { id });\n          scope.setContext('errorContext', this.errorContext);\n\n          Sentry.captureException(error);\n        });\n      },\n      onHandled: (id: string) =&gt; {\n        console.log('Promise rejection handled:', id);\n      },\n    });\n  }\n\n  private setupConsoleErrorCapture() {\n    const originalConsoleError = console.error;\n\n    console.error = (...args: any[]) =&gt; {\n      // Call original console.error\n      originalConsoleError.apply(console, args);\n\n      // Capture console errors in production\n      if (process.env.NODE_ENV === 'production') {\n        const message = args\n          .map(arg =&gt; (typeof arg === 'string' ? arg : JSON.stringify(arg)))\n          .join(' ');\n\n        Sentry.addBreadcrumb({\n          message,\n          category: 'console',\n          level: 'error',\n        });\n      }\n    };\n  }\n}\n\nexport const globalErrorHandler = new GlobalErrorHandler();\n</code></pre>"},{"location":"monitoring/crash-reporting/#network-error-handling","title":"Network Error Handling","text":"<pre><code>// lib/monitoring/networkErrorHandler.ts\ninterface NetworkError {\n  url: string;\n  method: string;\n  status?: number;\n  statusText?: string;\n  responseTime: number;\n  error: Error;\n}\n\nclass NetworkErrorHandler {\n  private errorCounts = new Map&lt;string, number&gt;();\n  private readonly MAX_ERRORS_PER_ENDPOINT = 5;\n\n  reportNetworkError(networkError: NetworkError) {\n    const endpointKey = `${networkError.method}:${networkError.url}`;\n    const currentCount = this.errorCounts.get(endpointKey) || 0;\n\n    // Avoid spam by limiting reports per endpoint\n    if (currentCount &gt;= this.MAX_ERRORS_PER_ENDPOINT) {\n      return;\n    }\n\n    this.errorCounts.set(endpointKey, currentCount + 1);\n\n    Sentry.withScope(scope =&gt; {\n      scope.setTag('errorType', 'network');\n      scope.setContext('networkRequest', {\n        url: networkError.url,\n        method: networkError.method,\n        status: networkError.status,\n        statusText: networkError.statusText,\n        responseTime: networkError.responseTime,\n      });\n\n      // Set fingerprint for grouping similar network errors\n      scope.setFingerprint([\n        'network-error',\n        networkError.method,\n        networkError.url,\n        networkError.status?.toString() || 'unknown',\n      ]);\n\n      Sentry.captureException(networkError.error);\n    });\n  }\n\n  resetErrorCounts() {\n    this.errorCounts.clear();\n  }\n}\n\nexport const networkErrorHandler = new NetworkErrorHandler();\n</code></pre>"},{"location":"monitoring/crash-reporting/#custom-error-types","title":"Custom Error Types","text":""},{"location":"monitoring/crash-reporting/#structured-error-classes","title":"Structured Error Classes","text":"<pre><code>// lib/errors/AppError.ts\nexport enum ErrorCode {\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  PERMISSION_ERROR = 'PERMISSION_ERROR',\n  NOT_FOUND_ERROR = 'NOT_FOUND_ERROR',\n  SERVER_ERROR = 'SERVER_ERROR',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\nexport class AppError extends Error {\n  public readonly code: ErrorCode;\n  public readonly statusCode?: number;\n  public readonly context?: Record&lt;string, any&gt;;\n  public readonly timestamp: Date;\n\n  constructor(\n    message: string,\n    code: ErrorCode,\n    statusCode?: number,\n    context?: Record&lt;string, any&gt;\n  ) {\n    super(message);\n    this.name = 'AppError';\n    this.code = code;\n    this.statusCode = statusCode;\n    this.context = context;\n    this.timestamp = new Date();\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      statusCode: this.statusCode,\n      context: this.context,\n      timestamp: this.timestamp,\n      stack: this.stack,\n    };\n  }\n}\n\nexport class NetworkError extends AppError {\n  constructor(message: string, statusCode?: number, context?: Record&lt;string, any&gt;) {\n    super(message, ErrorCode.NETWORK_ERROR, statusCode, context);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class AuthenticationError extends AppError {\n  constructor(message: string = 'Authentication required', context?: Record&lt;string, any&gt;) {\n    super(message, ErrorCode.AUTHENTICATION_ERROR, 401, context);\n    this.name = 'AuthenticationError';\n  }\n}\n\nexport class ValidationError extends AppError {\n  constructor(message: string, context?: Record&lt;string, any&gt;) {\n    super(message, ErrorCode.VALIDATION_ERROR, 400, context);\n    this.name = 'ValidationError';\n  }\n}\n</code></pre>"},{"location":"monitoring/crash-reporting/#error-factory","title":"Error Factory","text":"<pre><code>// lib/errors/errorFactory.ts\nexport class ErrorFactory {\n  static createFromApiError(apiError: any): AppError {\n    const { status, data, message } = apiError;\n\n    switch (status) {\n      case 400:\n        return new ValidationError(data?.message || 'Invalid request data', {\n          originalError: apiError,\n        });\n      case 401:\n        return new AuthenticationError(data?.message || 'Authentication required', {\n          originalError: apiError,\n        });\n      case 403:\n        return new AppError(data?.message || 'Access denied', ErrorCode.PERMISSION_ERROR, 403, {\n          originalError: apiError,\n        });\n      case 404:\n        return new AppError(data?.message || 'Resource not found', ErrorCode.NOT_FOUND_ERROR, 404, {\n          originalError: apiError,\n        });\n      case 500:\n      default:\n        return new AppError(\n          data?.message || message || 'Server error occurred',\n          ErrorCode.SERVER_ERROR,\n          status,\n          { originalError: apiError }\n        );\n    }\n  }\n\n  static createFromNetworkError(error: Error, context?: Record&lt;string, any&gt;): NetworkError {\n    return new NetworkError(error.message || 'Network request failed', undefined, {\n      ...context,\n      originalError: error,\n    });\n  }\n}\n</code></pre>"},{"location":"monitoring/crash-reporting/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"monitoring/crash-reporting/#performance-tracking","title":"Performance Tracking","text":"<pre><code>// lib/monitoring/performance.ts\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  tags?: Record&lt;string, string&gt;;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n\n  trackMetric(metric: PerformanceMetric) {\n    this.metrics.push(metric);\n\n    // Report to Sentry\n    Sentry.addBreadcrumb({\n      message: `Performance: ${metric.name}`,\n      category: 'performance',\n      data: {\n        value: metric.value,\n        unit: metric.unit,\n        tags: metric.tags,\n      },\n    });\n\n    // Report slow operations\n    if (metric.name.includes('duration') &amp;&amp; metric.value &gt; 1000) {\n      Sentry.captureMessage(`Slow operation detected: ${metric.name}`, {\n        level: 'warning',\n        extra: metric,\n      });\n    }\n  }\n\n  trackScreenLoad(screenName: string, duration: number) {\n    this.trackMetric({\n      name: 'screen_load_duration',\n      value: duration,\n      unit: 'ms',\n      tags: { screen: screenName },\n    });\n  }\n\n  trackApiCall(endpoint: string, duration: number, status: number) {\n    this.trackMetric({\n      name: 'api_call_duration',\n      value: duration,\n      unit: 'ms',\n      tags: {\n        endpoint,\n        status: status.toString(),\n        success: status &lt; 400 ? 'true' : 'false',\n      },\n    });\n  }\n\n  trackMemoryUsage() {\n    if (performance.memory) {\n      this.trackMetric({\n        name: 'memory_usage',\n        value: performance.memory.usedJSHeapSize,\n        unit: 'bytes',\n      });\n    }\n  }\n\n  getMetrics(): PerformanceMetric[] {\n    return [...this.metrics];\n  }\n\n  clearMetrics() {\n    this.metrics = [];\n  }\n}\n\nexport const performanceMonitor = new PerformanceMonitor();\n</code></pre>"},{"location":"monitoring/crash-reporting/#alerting-and-notifications","title":"Alerting and Notifications","text":""},{"location":"monitoring/crash-reporting/#alert-configuration","title":"Alert Configuration","text":"<pre><code>// lib/monitoring/alerts.ts\ninterface AlertRule {\n  name: string;\n  condition: (error: Error) =&gt; boolean;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  channels: ('slack' | 'email' | 'sms')[];\n  throttle?: number; // minutes\n}\n\nclass AlertManager {\n  private rules: AlertRule[] = [\n    {\n      name: 'Critical App Crash',\n      condition: error =&gt;\n        error.message.includes('ReferenceError') || error.message.includes('TypeError'),\n      severity: 'critical',\n      channels: ['slack', 'email', 'sms'],\n      throttle: 5,\n    },\n    {\n      name: 'Authentication Failure',\n      condition: error =&gt; error instanceof AuthenticationError,\n      severity: 'high',\n      channels: ['slack', 'email'],\n      throttle: 15,\n    },\n    {\n      name: 'Network Error Spike',\n      condition: error =&gt; error instanceof NetworkError,\n      severity: 'medium',\n      channels: ['slack'],\n      throttle: 30,\n    },\n  ];\n\n  private lastAlerts = new Map&lt;string, number&gt;();\n\n  processError(error: Error) {\n    for (const rule of this.rules) {\n      if (rule.condition(error)) {\n        this.triggerAlert(rule, error);\n      }\n    }\n  }\n\n  private triggerAlert(rule: AlertRule, error: Error) {\n    const now = Date.now();\n    const lastAlert = this.lastAlerts.get(rule.name) || 0;\n    const throttleMs = (rule.throttle || 0) * 60 * 1000;\n\n    if (now - lastAlert &lt; throttleMs) {\n      return; // Throttled\n    }\n\n    this.lastAlerts.set(rule.name, now);\n\n    // Send alert through configured channels\n    rule.channels.forEach(channel =&gt; {\n      this.sendAlert(channel, rule, error);\n    });\n  }\n\n  private async sendAlert(channel: string, rule: AlertRule, error: Error) {\n    const alertData = {\n      rule: rule.name,\n      severity: rule.severity,\n      error: error.message,\n      timestamp: new Date().toISOString(),\n    };\n\n    switch (channel) {\n      case 'slack':\n        await this.sendSlackAlert(alertData);\n        break;\n      case 'email':\n        await this.sendEmailAlert(alertData);\n        break;\n      case 'sms':\n        await this.sendSMSAlert(alertData);\n        break;\n    }\n  }\n\n  private async sendSlackAlert(alertData: any) {\n    // Implement Slack webhook integration\n    console.log('Slack alert:', alertData);\n  }\n\n  private async sendEmailAlert(alertData: any) {\n    // Implement email service integration\n    console.log('Email alert:', alertData);\n  }\n\n  private async sendSMSAlert(alertData: any) {\n    // Implement SMS service integration\n    console.log('SMS alert:', alertData);\n  }\n}\n\nexport const alertManager = new AlertManager();\n</code></pre>"},{"location":"monitoring/crash-reporting/#error-analytics","title":"Error Analytics","text":""},{"location":"monitoring/crash-reporting/#error-metrics-dashboard","title":"Error Metrics Dashboard","text":"<pre><code>// lib/monitoring/analytics.ts\ninterface ErrorMetrics {\n  totalErrors: number;\n  errorsByType: Record&lt;string, number&gt;;\n  errorsByScreen: Record&lt;string, number&gt;;\n  errorTrends: Array&lt;{ date: string; count: number }&gt;;\n  topErrors: Array&lt;{ message: string; count: number; lastSeen: Date }&gt;;\n}\n\nclass ErrorAnalytics {\n  private errors: Array&lt;{\n    error: Error;\n    timestamp: Date;\n    screen?: string;\n    userId?: string;\n  }&gt; = [];\n\n  recordError(error: Error, context?: { screen?: string; userId?: string }) {\n    this.errors.push({\n      error,\n      timestamp: new Date(),\n      screen: context?.screen,\n      userId: context?.userId,\n    });\n\n    // Keep only last 1000 errors in memory\n    if (this.errors.length &gt; 1000) {\n      this.errors = this.errors.slice(-1000);\n    }\n  }\n\n  getMetrics(): ErrorMetrics {\n    const totalErrors = this.errors.length;\n\n    const errorsByType = this.errors.reduce(\n      (acc, { error }) =&gt; {\n        const type = error.constructor.name;\n        acc[type] = (acc[type] || 0) + 1;\n        return acc;\n      },\n      {} as Record&lt;string, number&gt;\n    );\n\n    const errorsByScreen = this.errors.reduce(\n      (acc, { screen }) =&gt; {\n        if (screen) {\n          acc[screen] = (acc[screen] || 0) + 1;\n        }\n        return acc;\n      },\n      {} as Record&lt;string, number&gt;\n    );\n\n    const errorTrends = this.calculateTrends();\n    const topErrors = this.getTopErrors();\n\n    return {\n      totalErrors,\n      errorsByType,\n      errorsByScreen,\n      errorTrends,\n      topErrors,\n    };\n  }\n\n  private calculateTrends(): Array&lt;{ date: string; count: number }&gt; {\n    const last7Days = Array.from({ length: 7 }, (_, i) =&gt; {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      return date.toISOString().split('T')[0];\n    }).reverse();\n\n    return last7Days.map(date =&gt; ({\n      date,\n      count: this.errors.filter(({ timestamp }) =&gt; timestamp.toISOString().split('T')[0] === date)\n        .length,\n    }));\n  }\n\n  private getTopErrors(): Array&lt;{ message: string; count: number; lastSeen: Date }&gt; {\n    const errorCounts = new Map&lt;string, { count: number; lastSeen: Date }&gt;();\n\n    this.errors.forEach(({ error, timestamp }) =&gt; {\n      const message = error.message;\n      const existing = errorCounts.get(message);\n\n      if (existing) {\n        existing.count++;\n        if (timestamp &gt; existing.lastSeen) {\n          existing.lastSeen = timestamp;\n        }\n      } else {\n        errorCounts.set(message, { count: 1, lastSeen: timestamp });\n      }\n    });\n\n    return Array.from(errorCounts.entries())\n      .map(([message, data]) =&gt; ({ message, ...data }))\n      .sort((a, b) =&gt; b.count - a.count)\n      .slice(0, 10);\n  }\n}\n\nexport const errorAnalytics = new ErrorAnalytics();\n</code></pre>"},{"location":"monitoring/crash-reporting/#best-practices","title":"Best Practices","text":""},{"location":"monitoring/crash-reporting/#1-error-context","title":"1. Error Context","text":"<pre><code>// Always provide context with errors\nSentry.withScope(scope =&gt; {\n  scope.setContext('userAction', {\n    action: 'login',\n    screen: 'LoginScreen',\n    timestamp: Date.now(),\n  });\n\n  scope.setUser({\n    id: user.id,\n    email: user.email,\n  });\n\n  Sentry.captureException(error);\n});\n</code></pre>"},{"location":"monitoring/crash-reporting/#2-error-filtering","title":"2. Error Filtering","text":"<pre><code>// Filter out noise and focus on actionable errors\nconst shouldReportError = (error: Error): boolean =&gt; {\n  // Don't report network errors in development\n  if (__DEV__ &amp;&amp; error.message.includes('Network')) {\n    return false;\n  }\n\n  // Don't report cancelled requests\n  if (error.message.includes('cancelled')) {\n    return false;\n  }\n\n  // Don't report user-initiated actions\n  if (error.message.includes('User cancelled')) {\n    return false;\n  }\n\n  return true;\n};\n</code></pre>"},{"location":"monitoring/crash-reporting/#3-privacy-protection","title":"3. Privacy Protection","text":"<pre><code>// Sanitize sensitive data before reporting\nconst sanitizeError = (error: any) =&gt; {\n  if (error.config?.headers) {\n    delete error.config.headers.Authorization;\n    delete error.config.headers.Cookie;\n  }\n\n  if (error.request?.responseText) {\n    // Remove sensitive data from response\n    error.request.responseText = '[REDACTED]';\n  }\n\n  return error;\n};\n</code></pre>"},{"location":"monitoring/crash-reporting/#next-steps","title":"Next Steps","text":"<ol> <li>Set up Sentry or another crash reporting service</li> <li>Implement global error handlers for comprehensive coverage</li> <li>Create custom error types for better categorization</li> <li>Add performance monitoring to track app health</li> <li>Configure alerting rules for critical errors</li> <li>Build error analytics dashboard for insights</li> </ol> <p>Pro Tip: Start with basic crash reporting and gradually add more sophisticated error handling and monitoring. Focus on actionable errors and avoid noise. Always protect user privacy by sanitizing sensitive data before reporting.</p>"},{"location":"monitoring/performance/","title":"Performance","text":"<p>Guide to performance in React Native applications.</p>"},{"location":"monitoring/performance/#overview","title":"Overview","text":"<p>This section covers best practices and implementation strategies for performance.</p>"},{"location":"monitoring/performance/#implementation","title":"Implementation","text":"<p>Coming soon - detailed implementation guide.</p>"},{"location":"monitoring/performance/#best-practices","title":"Best Practices","text":"<ol> <li>Follow industry standards</li> <li>Implement proper error handling</li> <li>Test thoroughly across platforms</li> <li>Monitor performance and usage</li> </ol> <p>Pro Tip: Start with basic implementation and gradually add advanced features based on your app's needs.</p>"},{"location":"native/expo-vs-pure-rn/","title":"Expo vs Pure React Native","text":"<p>Comprehensive comparison and migration guide for choosing between Expo and pure React Native development approaches.</p>"},{"location":"native/expo-vs-pure-rn/#overview-comparison","title":"Overview Comparison","text":"graph TB     A[React Native Development] --&gt; B[Expo Managed]     A --&gt; C[Expo Development Build]     A --&gt; D[Pure React Native]      B --&gt; B1[Expo Go]     B --&gt; B2[EAS Build]     B --&gt; B3[Limited Native Access]      C --&gt; C1[Custom Native Code]     C --&gt; C2[Expo Services]     C --&gt; C3[Development Client]      D --&gt; D1[Full Native Control]     D --&gt; D2[Manual Configuration]     D --&gt; D3[Custom Build Process]"},{"location":"native/expo-vs-pure-rn/#feature-comparison","title":"Feature Comparison","text":"Feature Expo Managed Expo Development Build Pure React Native Setup Time Minutes Hours Hours/Days Native Modules Expo modules only Any module Any module Build Process EAS Build EAS Build or local Local/CI OTA Updates Expo Updates Expo Updates CodePush/Custom App Store Deployment Automated Automated Manual Bundle Size Larger Medium Smallest Customization Limited High Complete Learning Curve Easy Medium Steep"},{"location":"native/expo-vs-pure-rn/#expo-managed-workflow","title":"Expo Managed Workflow","text":""},{"location":"native/expo-vs-pure-rn/#advantages","title":"Advantages","text":"<ul> <li>Rapid Development: Get started in minutes</li> <li>Simplified Build Process: No need to manage native code</li> <li>Automatic Updates: Over-the-air updates built-in</li> <li>Cross-platform: Write once, run everywhere</li> <li>Rich Ecosystem: Pre-built modules for common features</li> </ul>"},{"location":"native/expo-vs-pure-rn/#limitations","title":"Limitations","text":"<ul> <li>Limited Native Access: Can't use arbitrary native modules</li> <li>Bundle Size: Includes unused Expo modules</li> <li>Customization: Limited native customization options</li> <li>Dependency: Tied to Expo's release cycle</li> </ul>"},{"location":"native/expo-vs-pure-rn/#when-to-choose-expo-managed","title":"When to Choose Expo Managed","text":"<pre><code>// Good for:\n// - Prototypes and MVPs\n// - Apps using standard features (camera, location, notifications)\n// - Teams without native development experience\n// - Rapid iteration and testing\n\n// Example: Simple social media app\nimport { Camera } from 'expo-camera';\nimport { Location } from 'expo-location';\nimport { Notifications } from 'expo-notifications';\n\nfunction SocialApp() {\n// All these work out of the box with Expo\n  const [hasPermission] = Camera.useCameraPermissions();\n  const [location] = Location.useLocationAsync();\n\n  return (\n    &lt;View&gt;\n      &lt;Camera style={{ flex: 1 }} /&gt;\n      &lt;Text&gt;Location: {location?.coords.latitude}&lt;/Text&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#expo-development-build","title":"Expo Development Build","text":""},{"location":"native/expo-vs-pure-rn/#setup-process","title":"Setup Process","text":"<pre><code># Install development build\nnpx expo install expo-dev-client\n\n# Create development build\neas build --profile development --platform ios\neas build --profile development --platform android\n\n# Or build locally\nnpx expo run:ios\nnpx expo run:android\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#configuration","title":"Configuration","text":"<pre><code>// eas.json\n{\n  \"cli\": {\n    \"version\": \"&gt;= 3.0.0\"\n  },\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#adding-native-modules","title":"Adding Native Modules","text":"<pre><code># Install any React Native module\nnpm install react-native-ble-plx\n\n# For iOS, install pods\ncd ios &amp;&amp; pod install\n\n# Rebuild development client\neas build --profile development --platform ios\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#custom-native-code","title":"Custom Native Code","text":"<pre><code>// You can now add custom native modules\nimport { NativeModules } from 'react-native';\n\n// Custom native module\nconst { CustomBluetooth } = NativeModules;\n\nfunction BluetoothComponent() {\n  const scanDevices = async () =&gt; {\n    try {\n      const devices = await CustomBluetooth.scanForDevices();\n      console.log('Found devices:', devices);\n    } catch (error) {\n      console.error('Bluetooth scan failed:', error);\n    }\n  };\n\n  return (\n    &lt;Button onPress={scanDevices} title=\"Scan Bluetooth Devices\" /&gt;\n  );\n}\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#pure-react-native","title":"Pure React Native","text":""},{"location":"native/expo-vs-pure-rn/#project-setup","title":"Project Setup","text":"<pre><code># Create new project\nnpx react-native init MyApp --template react-native-template-typescript\n\n# Install dependencies\ncd MyApp\nnpm install\n\n# Ios Setup\ncd ios &amp;&amp; pod install &amp;&amp; cd ..\n\n# Run on devices\nnpx react-native run-ios\nnpx react-native run-android\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#native-module-integration","title":"Native Module Integration","text":"<pre><code># Install native module\nnpm install react-native-camera\n\n# Ios - Add to Podfile\ncd ios\npod install\n\n# Android - Manual linking (if required)\n# Add to android/settings.gradle\ninclude ':react-native-camera'\nproject(':react-native-camera').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-camera/android')\n\n# Add to android/app/build.gradle\ndependencies {\nimplementation project(':react-native-camera')\n}\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#custom-native-modules","title":"Custom Native Modules","text":"<pre><code>// Android - CustomModule.java\npackage com.myapp;\n\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.Promise;\n\npublic class CustomModule extends ReactContextBaseJavaModule {\n  CustomModule(ReactApplicationContext context) {\n    super(context);\n  }\n\n  @Override\n  public String getName() {\n    return \"CustomModule\";\n  }\n\n  @ReactMethod\n  public void getDeviceInfo(Promise promise) {\n    try {\n      String deviceInfo = android.os.Build.MODEL;\n      promise.resolve(deviceInfo);\n    } catch (Exception e) {\n      promise.reject(\"ERROR\", e);\n    }\n  }\n}\n</code></pre> <pre><code>// iOS - CustomModule.m\n#import \"CustomModule.h\"\n#import &lt;React/RCTLog.h&gt;\n\n@implementation CustomModule\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(getDeviceInfo:(RCTPromiseResolveBlock)resolve\n        rejecter:(RCTPromiseRejectBlock)reject)\n{\n  NSString *deviceInfo = [[UIDevice currentDevice] model];\n  resolve(deviceInfo);\n}\n\n@end\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#migration-strategies","title":"Migration Strategies","text":""},{"location":"native/expo-vs-pure-rn/#from-expo-managed-to-development-build","title":"From Expo Managed to Development Build","text":"flowchart LR     A[Expo Managed] --&gt; B[Install expo-dev-client]     B --&gt; C[Add Native Dependencies]     C --&gt; D[Build Development Client]     D --&gt; E[Test &amp; Iterate]     E --&gt; F[Production Build]"},{"location":"native/expo-vs-pure-rn/#step-by-step-migration","title":"Step-by-Step Migration","text":"<pre><code># 1. Install Development Client\nnpx expo install expo-dev-client\n\n# 2. Generate Native Code\nnpx expo prebuild\n\n# 3. Add Native Dependencies\nnpm install react-native-ble-plx\ncd ios &amp;&amp; pod install\n\n# 4. Build Development Client\neas build --profile development --platform ios\n\n# 5. Test Your App\nnpx expo start --dev-client\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#from-expo-to-pure-react-native","title":"From Expo to Pure React Native","text":"<pre><code># 1. Eject From Expo (deprecated Approach)\n# Use prebuild instead:\nnpx expo prebuild\n\n# 2. Remove Expo Dependencies\nnpm uninstall expo\n\n# 3. Update Entry Point\n# Change from expo-router/entry to your own index.js\n\n# 4. Update Build Scripts\n# Remove Expo-specific scripts from package.json\n\n# 5. Handle Expo Modules\n# Replace with React Native alternatives:\n# Expo-camera -&gt; React-native-camera\n# Expo-location -&gt; @react-native-community/geolocation\n# Expo-notifications -&gt; @react-native-firebase/messaging\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#module-replacement-guide","title":"Module Replacement Guide","text":"Expo Module React Native Alternative <code>expo-camera</code> <code>react-native-vision-camera</code> <code>expo-location</code> <code>@react-native-community/geolocation</code> <code>expo-notifications</code> <code>@react-native-firebase/messaging</code> <code>expo-image-picker</code> <code>react-native-image-picker</code> <code>expo-linear-gradient</code> <code>react-native-linear-gradient</code> <code>expo-blur</code> <code>@react-native-blur/blur</code> <code>expo-haptics</code> <code>react-native-haptic-feedback</code>"},{"location":"native/expo-vs-pure-rn/#decision-framework","title":"Decision Framework","text":""},{"location":"native/expo-vs-pure-rn/#choose-expo-managed-when","title":"Choose Expo Managed When:","text":"<ul> <li>Building prototypes or MVPs</li> <li>Team lacks native development experience</li> <li>Using standard mobile features only</li> <li>Need rapid development and deployment</li> <li>Don't require custom native functionality</li> </ul>"},{"location":"native/expo-vs-pure-rn/#choose-expo-development-build-when","title":"Choose Expo Development Build When:","text":"<ul> <li>Need custom native modules</li> <li>Want Expo's developer experience</li> <li>Require specific native functionality</li> <li>Building production apps with custom requirements</li> <li>Want to gradually migrate from managed workflow</li> </ul>"},{"location":"native/expo-vs-pure-rn/#choose-pure-react-native-when","title":"Choose Pure React Native When:","text":"<ul> <li>Need maximum control over native code</li> <li>Building complex, performance-critical apps</li> <li>Have experienced native developers</li> <li>Require extensive customization</li> <li>Want smallest possible bundle size</li> </ul>"},{"location":"native/expo-vs-pure-rn/#performance-considerations","title":"Performance Considerations","text":""},{"location":"native/expo-vs-pure-rn/#bundle-size-comparison","title":"Bundle Size Comparison","text":"<pre><code># Expo Managed (includes all Expo modules)\n# Ios: ~50-80mb\n# Android: ~30-50MB\n\n# Expo Development Build (only used modules)\n# Ios: ~20-40mb\n# Android: ~15-25MB\n\n# Pure React Native (minimal dependencies)\n# Ios: ~10-20mb\n# Android: ~8-15MB\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#runtime-performance","title":"Runtime Performance","text":"<pre><code>// Expo modules are optimized but include overhead\nimport { Camera } from 'expo-camera';\n\n// Pure React Native modules are typically lighter\nimport { RNCamera } from 'react-native-camera';\n\n// Benchmark example\nconst ExpoCamera = () =&gt; (\n  &lt;Camera style={{ flex: 1 }} type={Camera.Constants.Type.back} /&gt;\n);\n\nconst PureRNCamera = () =&gt; (\n  &lt;RNCamera style={{ flex: 1 }} type={RNCamera.Constants.Type.back} /&gt;\n);\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#best-practices","title":"Best Practices","text":""},{"location":"native/expo-vs-pure-rn/#1-start-with-expo-development-build","title":"1. Start with Expo Development Build","text":"<pre><code>// Begin with development build for flexibility\n// You can always add more native code later\n\n// app.json\n{\n  \"expo\": {\n    \"name\": \"My App\",\n    \"plugins\": [\n      \"expo-dev-client\",\n// Add plugins as needed\n      \"expo-camera\",\n      \"expo-location\"\n    ]\n  }\n}\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#2-plan-your-native-requirements","title":"2. Plan Your Native Requirements","text":"<pre><code>// Audit your app's native requirements early\nconst nativeRequirements = {\n  camera: 'expo-camera', // Available in Expo\n  bluetooth: 'react-native-ble-plx', // Requires development build\n  customSecurity: 'custom-native-module', // Requires pure RN\n  backgroundProcessing: 'custom-implementation', // Requires pure RN\n};\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#3-gradual-migration","title":"3. Gradual Migration","text":"<pre><code>// Migrate incrementally\n// 1. Start with Expo managed\n// 2. Move to development build when needed\n// 3. Consider pure RN for specific requirements\n\n// Keep migration path open\nconst migrationStrategy = {\n  phase1: 'expo-managed', // MVP\n  phase2: 'expo-dev-build', // Add native modules\n  phase3: 'pure-rn', // Full control (if needed)\n};\n</code></pre>"},{"location":"native/expo-vs-pure-rn/#next-steps","title":"Next Steps","text":"<ol> <li>Evaluate your app's native requirements</li> <li>Choose the appropriate approach based on your needs</li> <li>Set up your development environment accordingly</li> <li>Plan migration strategy for future requirements</li> <li>Consider team expertise and project timeline</li> </ol> <p>Pro Tip: Start with Expo Development Build for new projects. It provides the best balance of developer experience and flexibility, allowing you to add native functionality as needed without major architectural changes.</p>"},{"location":"native/native-modules/","title":"Native Modules","text":"<p>Guide to creating and integrating custom native modules in React Native applications.</p>"},{"location":"native/native-modules/#when-to-use-native-modules","title":"When to Use Native Modules","text":"<ul> <li>Access platform-specific APIs not available in React Native</li> <li>Integrate existing native libraries</li> <li>Optimize performance-critical operations</li> <li>Implement custom native UI components</li> </ul>"},{"location":"native/native-modules/#creating-ios-native-modules","title":"Creating iOS Native Modules","text":""},{"location":"native/native-modules/#swift-implementation","title":"Swift Implementation","text":"<pre><code>// ios/MyApp/CustomModule.swift\nimport Foundation\nimport React\n\n@objc(CustomModule)\nclass CustomModule: NSObject {\n\n  @objc\n  static func requiresMainQueueSetup() -&gt; Bool {\n    return false\n  }\n\n  @objc\n  func getDeviceInfo(_ resolve: @escaping RCTPromiseResolveBlock,\n  rejecter reject: @escaping RCTPromiseRejectBlock) {\n    let deviceInfo = [\n      \"model\": UIDevice.current.model,\n      \"systemName\": UIDevice.current.systemName,\n      \"systemVersion\": UIDevice.current.systemVersion,\n      \"name\": UIDevice.current.name\n    ]\n    resolve(deviceInfo)\n  }\n\n  @objc\n  func showAlert(_ title: String,\n         message: String,\n  resolver resolve: @escaping RCTPromiseResolveBlock,\n  rejecter reject: @escaping RCTPromiseRejectBlock) {\n    DispatchQueue.main.async {\n      let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\n      alert.addAction(UIAlertAction(title: \"OK\", style: .default) { _ in\n      resolve(\"OK\")\n    })\n\n    if let rootViewController = UIApplication.shared.windows.first?.rootViewController {\n      rootViewController.present(alert, animated: true)\n    }\n  }\n}\n}\n</code></pre>"},{"location":"native/native-modules/#objective-c-bridge","title":"Objective-C Bridge","text":"<pre><code>// ios/MyApp/CustomModule.m\n#import &lt;React/RCTBridgeModule.h&gt;\n\n@interface RCT_EXTERN_MODULE(CustomModule, NSObject)\n\nRCT_EXTERN_METHOD(getDeviceInfo:(RCTPromiseResolveBlock)resolve\n        rejecter:(RCTPromiseRejectBlock)reject)\n\nRCT_EXTERN_METHOD(showAlert:(NSString *)title\n       message:(NSString *)message\n        resolver:(RCTPromiseResolveBlock)resolve\n        rejecter:(RCTPromiseRejectBlock)reject)\n\n@end\n</code></pre>"},{"location":"native/native-modules/#creating-android-native-modules","title":"Creating Android Native Modules","text":""},{"location":"native/native-modules/#java-implementation","title":"Java Implementation","text":"<pre><code>// android/app/src/main/java/com/myapp/CustomModule.java\npackage com.myapp;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.os.Build;\n\nimport com.facebook.react.bridge.Promise;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.bridge.Arguments;\n\npublic class CustomModule extends ReactContextBaseJavaModule {\n\n  private ReactApplicationContext reactContext;\n\n  public CustomModule(ReactApplicationContext reactContext) {\n    super(reactContext);\n    this.reactContext = reactContext;\n  }\n\n  @Override\n  public String getName() {\n    return \"CustomModule\";\n  }\n\n  @ReactMethod\n  public void getDeviceInfo(Promise promise) {\n    try {\n      WritableMap deviceInfo = Arguments.createMap();\n      deviceInfo.putString(\"model\", Build.MODEL);\n      deviceInfo.putString(\"manufacturer\", Build.MANUFACTURER);\n      deviceInfo.putString(\"version\", Build.VERSION.RELEASE);\n      deviceInfo.putInt(\"sdkVersion\", Build.VERSION.SDK_INT);\n\n      promise.resolve(deviceInfo);\n    } catch (Exception e) {\n      promise.reject(\"ERROR\", e.getMessage());\n    }\n  }\n\n  @ReactMethod\n  public void showAlert(String title, String message, Promise promise) {\n    getCurrentActivity().runOnUiThread(new Runnable() {\n      @Override\n      public void run() {\n        AlertDialog.Builder builder = new AlertDialog.Builder(getCurrentActivity());\n        builder.setTitle(title)\n            .setMessage(message)\n            .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n          @Override\n          public void onClick(DialogInterface dialog, int which) {\n            promise.resolve(\"OK\");\n          }\n        })\n            .show();\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"native/native-modules/#package-registration","title":"Package Registration","text":"<pre><code>// android/app/src/main/java/com/myapp/CustomModulePackage.java\npackage com.myapp;\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CustomModulePackage implements ReactPackage {\n\n  @Override\n  public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) {\n    List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();\n    modules.add(new CustomModule(reactContext));\n    return modules;\n  }\n}\n</code></pre>"},{"location":"native/native-modules/#typescript-definitions","title":"TypeScript Definitions","text":""},{"location":"native/native-modules/#type-definitions","title":"Type Definitions","text":"<pre><code>// types/native-modules.d.ts\ninterface CustomModuleInterface {\n  getDeviceInfo(): Promise&lt;{\n    model: string;\n    systemName?: string; // iOS only\n    systemVersion?: string; // iOS only\n    name?: string; // iOS only\n    manufacturer?: string; // Android only\n    version?: string; // Android only\n    sdkVersion?: number; // Android only\n  }&gt;;\n\n  showAlert(title: string, message: string): Promise&lt;string&gt;;\n}\n\ndeclare module 'react-native' {\n  interface NativeModulesStatic {\n    CustomModule: CustomModuleInterface;\n  }\n}\n</code></pre>"},{"location":"native/native-modules/#usage-in-react-native","title":"Usage in React Native","text":"<pre><code>// hooks/useCustomModule.ts\nimport { NativeModules } from 'react-native';\n\nconst { CustomModule } = NativeModules;\n\nexport function useCustomModule() {\n  const getDeviceInfo = async () =&gt; {\n    try {\n      const deviceInfo = await CustomModule.getDeviceInfo();\n      return deviceInfo;\n    } catch (error) {\n      console.error('Failed to get device info:', error);\n      throw error;\n    }\n  };\n\n  const showAlert = async (title: string, message: string) =&gt; {\n    try {\n      const result = await CustomModule.showAlert(title, message);\n      return result;\n    } catch (error) {\n      console.error('Failed to show alert:', error);\n      throw error;\n    }\n  };\n\n  return {\n    getDeviceInfo,\n    showAlert,\n  };\n}\n\n// Usage in component\nfunction MyComponent() {\n  const { getDeviceInfo, showAlert } = useCustomModule();\n\n  const handleGetDeviceInfo = async () =&gt; {\n    const info = await getDeviceInfo();\n    console.log('Device info:', info);\n  };\n\n  const handleShowAlert = async () =&gt; {\n    await showAlert('Hello', 'This is a native alert!');\n  };\n\n  return (\n    &lt;View&gt;\n      &lt;Button onPress={handleGetDeviceInfo} title=\"Get Device Info\" /&gt;\n      &lt;Button onPress={handleShowAlert} title=\"Show Alert\" /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"native/native-modules/#event-emitters","title":"Event Emitters","text":""},{"location":"native/native-modules/#ios-event-emitter","title":"iOS Event Emitter","text":"<pre><code>// ios/MyApp/EventEmitterModule.swift\nimport Foundation\nimport React\n\n@objc(EventEmitterModule)\nclass EventEmitterModule: RCTEventEmitter {\n\n  override func supportedEvents() -&gt; [String]! {\n    return [\"onCustomEvent\"]\n  }\n\n  @objc\n  override static func requiresMainQueueSetup() -&gt; Bool {\n    return false\n  }\n\n  @objc\n  func startListening() {\n    // Start listening to system events\n    NotificationCenter.default.addObserver(\n      self,\n              selector: #selector(handleNotification),\n          name: UIApplication.didBecomeActiveNotification,\n            object: nil\n    )\n  }\n\n  @objc\n  func stopListening() {\n    NotificationCenter.default.removeObserver(self)\n  }\n\n  @objc\n  private func handleNotification() {\n    sendEvent(withName: \"onCustomEvent\", body: [\"status\": \"active\"])\n  }\n}\n</code></pre>"},{"location":"native/native-modules/#android-event-emitter","title":"Android Event Emitter","text":"<pre><code>// android/app/src/main/java/com/myapp/EventEmitterModule.java\npackage com.myapp;\n\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\n\npublic class EventEmitterModule extends ReactContextBaseJavaModule {\n\n  public EventEmitterModule(ReactApplicationContext reactContext) {\n    super(reactContext);\n  }\n\n  @Override\n  public String getName() {\n    return \"EventEmitterModule\";\n  }\n\n  private void sendEvent(String eventName, WritableMap params) {\n    getReactApplicationContext()\n        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n        .emit(eventName, params);\n  }\n\n  @ReactMethod\n  public void startListening() {\n    // Start listening to system events\n    // Send events using sendEvent method\n    WritableMap params = Arguments.createMap();\n    params.putString(\"status\", \"listening\");\n    sendEvent(\"onCustomEvent\", params);\n  }\n\n  @ReactMethod\n  public void stopListening() {\n    // Stop listening to events\n  }\n}\n</code></pre>"},{"location":"native/native-modules/#react-native-event-listener","title":"React Native Event Listener","text":"<pre><code>// hooks/useEventEmitter.ts\nimport { useEffect, useState } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst { EventEmitterModule } = NativeModules;\nconst eventEmitter = new NativeEventEmitter(EventEmitterModule);\n\nexport function useEventEmitter() {\n  const [events, setEvents] = useState&lt;any[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const subscription = eventEmitter.addListener('onCustomEvent', event =&gt; {\n      setEvents(prev =&gt; [...prev, event]);\n    });\n\n    EventEmitterModule.startListening();\n\n    return () =&gt; {\n      subscription.remove();\n      EventEmitterModule.stopListening();\n    };\n  }, []);\n\n  return events;\n}\n</code></pre>"},{"location":"native/native-modules/#best-practices","title":"Best Practices","text":""},{"location":"native/native-modules/#1-error-handling","title":"1. Error Handling","text":"<pre><code>// Always handle errors properly\ntry {\n  const result = await CustomModule.someMethod();\n  return result;\n} catch (error) {\n  console.error('Native module error:', error);\n  // Provide fallback behavior\n  return null;\n}\n</code></pre>"},{"location":"native/native-modules/#2-threading","title":"2. Threading","text":"<pre><code>// iOS - Use appropriate queues\n@objc\nfunc heavyOperation(_ resolve: @escaping RCTPromiseResolveBlock,\nrejecter reject: @escaping RCTPromiseRejectBlock) {\n  DispatchQueue.global(qos: .background).async {\n    // Heavy work here\n    let result = performHeavyWork()\n\n    DispatchQueue.main.async {\n      resolve(result)\n    }\n  }\n}\n</code></pre>"},{"location":"native/native-modules/#3-memory-management","title":"3. Memory Management","text":"<pre><code>// Android - Clean up resources\n@Override\npublic void onCatalystInstanceDestroy() {\n  super.onCatalystInstanceDestroy();\n  // Clean up resources\n}\n</code></pre>"},{"location":"native/native-modules/#4-testing","title":"4. Testing","text":"<pre><code>// Mock native modules for testing\njest.mock('react-native', () =&gt; ({\n  NativeModules: {\n    CustomModule: {\n      getDeviceInfo: jest.fn(() =&gt;\n        Promise.resolve({\n          model: 'iPhone',\n          systemName: 'iOS',\n        })\n      ),\n      showAlert: jest.fn(() =&gt; Promise.resolve('OK')),\n    },\n  },\n}));\n</code></pre> <p>Pro Tip: Start with simple native modules and gradually add complexity. Always provide TypeScript definitions and proper error handling. Test thoroughly on both platforms.</p>"},{"location":"native/permissions/","title":"Permissions","text":"<p>Guide to handling device permissions in React Native applications.</p>"},{"location":"native/permissions/#permission-types","title":"Permission Types","text":""},{"location":"native/permissions/#common-permissions","title":"Common Permissions","text":"<ul> <li>Camera access</li> <li>Photo library access</li> <li>Location services</li> <li>Microphone access</li> <li>Push notifications</li> <li>Contacts access</li> <li>Calendar access</li> </ul>"},{"location":"native/permissions/#implementation","title":"Implementation","text":""},{"location":"native/permissions/#using-expo-permissions","title":"Using expo-permissions","text":"<pre><code>npx expo install expo-permissions expo-camera expo-location\n</code></pre> <pre><code>import * as Permissions from 'expo-permissions';\nimport { Camera } from 'expo-camera';\n\nexport async function requestCameraPermission() {\n  const { status } = await Camera.requestCameraPermissionsAsync();\n  return status === 'granted';\n}\n</code></pre>"},{"location":"native/permissions/#manual-permission-handling","title":"Manual Permission Handling","text":"<pre><code>import { PermissionsAndroid, Platform } from 'react-native';\n\nexport async function requestLocationPermission() {\n  if (Platform.OS === 'android') {\n    const granted = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION\n    );\n    return granted === PermissionsAndroid.RESULTS.GRANTED;\n  }\n  return true; // iOS handles permissions automatically\n}\n</code></pre>"},{"location":"native/permissions/#best-practices","title":"Best Practices","text":""},{"location":"native/permissions/#1-request-permissions-when-needed","title":"1. Request Permissions When Needed","text":"<p>Only request permissions when the user is about to use the feature.</p>"},{"location":"native/permissions/#2-explain-why","title":"2. Explain Why","text":"<p>Always explain why your app needs specific permissions.</p>"},{"location":"native/permissions/#3-handle-denials-gracefully","title":"3. Handle Denials Gracefully","text":"<p>Provide fallback functionality when permissions are denied.</p>"},{"location":"native/permissions/#4-check-permission-status","title":"4. Check Permission Status","text":"<p>Always check current permission status before requesting.</p> <p>Pro Tip: Be transparent about permission usage and provide clear value to users for granting permissions.</p>"},{"location":"native/platform-specific/","title":"Platform-Specific Code","text":"<p>Guide to handling iOS and Android differences in React Native applications.</p>"},{"location":"native/platform-specific/#platform-detection","title":"Platform Detection","text":""},{"location":"native/platform-specific/#basic-platform-checks","title":"Basic Platform Checks","text":"<pre><code>import { Platform } from 'react-native';\n\n// Simple platform check\nif (Platform.OS === 'ios') {\n  // iOS-specific code\n} else if (Platform.OS === 'android') {\n  // Android-specific code\n}\n\n// Platform-specific values\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: Platform.OS === 'ios' ? 20 : 0,\n  },\n});\n</code></pre>"},{"location":"native/platform-specific/#platform-specific-components","title":"Platform-Specific Components","text":"<pre><code>// components/PlatformButton.tsx\nconst PlatformButton = Platform.select({\n  ios: () =&gt; require('./IOSButton').default,\n  android: () =&gt; require('./AndroidButton').default,\n})();\n\nexport default PlatformButton;\n</code></pre>"},{"location":"native/platform-specific/#file-based-platform-separation","title":"File-Based Platform Separation","text":""},{"location":"native/platform-specific/#platform-specific-files","title":"Platform-Specific Files","text":"<pre><code>components/\nButton.ios.tsx\nButton.android.tsx\nButton.tsx (fallback)\n</code></pre> <pre><code>// Button.ios.tsx\nexport default function Button({ title, onPress }) {\n  return (\n    &lt;Pressable style={iosStyles.button} onPress={onPress}&gt;\n      &lt;Text style={iosStyles.text}&gt;{title}&lt;/Text&gt;\n    &lt;/Pressable&gt;\n  );\n}\n\n// Button.android.tsx\nexport default function Button({ title, onPress }) {\n  return (\n    &lt;TouchableNativeFeedback onPress={onPress}&gt;\n      &lt;View style={androidStyles.button}&gt;\n        &lt;Text style={androidStyles.text}&gt;{title}&lt;/Text&gt;\n      &lt;/View&gt;\n    &lt;/TouchableNativeFeedback&gt;\n  );\n}\n</code></pre>"},{"location":"native/platform-specific/#platform-specific-styling","title":"Platform-Specific Styling","text":""},{"location":"native/platform-specific/#conditional-styles","title":"Conditional Styles","text":"<pre><code>const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    ...Platform.select({\n      ios: {\n        backgroundColor: '#f8f9fa',\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n      },\n      android: {\n        backgroundColor: '#ffffff',\n        elevation: 4,\n      },\n    }),\n  },\n});\n</code></pre>"},{"location":"native/platform-specific/#safe-area-handling","title":"Safe Area Handling","text":"<pre><code>import { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction Header() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    &lt;View style={{\n        paddingTop: Platform.OS === 'ios' ? insets.top : 0,\n        height: Platform.OS === 'ios' ? 44 + insets.top : 56,\n      }}&gt;\n      &lt;Text&gt;Header&lt;/Text&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"native/platform-specific/#navigation-differences","title":"Navigation Differences","text":""},{"location":"native/platform-specific/#platform-specific-navigation","title":"Platform-Specific Navigation","text":"<pre><code>// navigation/PlatformNavigator.tsx\nconst Stack = createNativeStackNavigator();\n\nfunction PlatformNavigator() {\n  return (\n    &lt;Stack.Navigator\n      screenOptions={{\n        ...Platform.select({\n          ios: {\n            headerStyle: { backgroundColor: '#f8f9fa' },\n            headerTitleStyle: { fontSize: 17, fontWeight: '600' },\n          },\n          android: {\n            headerStyle: { backgroundColor: '#2196f3' },\n            headerTitleStyle: { fontSize: 20, fontWeight: '500' },\n            headerTintColor: '#fff',\n          },\n        }),\n      }}\n      &gt;\n      &lt;Stack.Screen name=\"Home\" component={HomeScreen} /&gt;\n    &lt;/Stack.Navigator&gt;\n  );\n}\n</code></pre>"},{"location":"native/platform-specific/#best-practices","title":"Best Practices","text":""},{"location":"native/platform-specific/#1-minimize-platform-specific-code","title":"1. Minimize Platform-Specific Code","text":"<p>Keep platform differences to a minimum and use shared components when possible.</p>"},{"location":"native/platform-specific/#2-use-platformselect-sparingly","title":"2. Use Platform.select Sparingly","text":"<p>Prefer file-based separation for complex platform differences.</p>"},{"location":"native/platform-specific/#3-test-on-both-platforms","title":"3. Test on Both Platforms","text":"<p>Always test platform-specific code on actual devices.</p>"},{"location":"native/platform-specific/#4-follow-platform-guidelines","title":"4. Follow Platform Guidelines","text":"<p>Respect iOS Human Interface Guidelines and Android Material Design principles.</p> <p>Pro Tip: Start with shared components and only add platform-specific code when necessary for user experience or platform compliance.</p>"},{"location":"security/api-security/","title":"API Security","text":"<p>Guide to implementing secure API communication in React Native applications.</p>"},{"location":"security/api-security/#api-security-architecture","title":"API Security Architecture","text":"graph TB     A[React Native App] --&gt; B[API Security Layer]     B --&gt; C[Authentication]     B --&gt; D[Authorization]     B --&gt; E[Request Validation]     B --&gt; F[Response Filtering]      C --&gt; C1[JWT Tokens]     C --&gt; C2[OAuth 2.0]     C --&gt; C3[API Keys]      D --&gt; D1[Role-Based Access]     D --&gt; D2[Permission Checks]      E --&gt; E1[Input Sanitization]     E --&gt; E2[Rate Limiting]      F --&gt; F1[Data Masking]     F --&gt; F2[Error Sanitization]"},{"location":"security/api-security/#secure-api-communication","title":"Secure API Communication","text":""},{"location":"security/api-security/#https-enforcement","title":"HTTPS Enforcement","text":"<pre><code>// lib/api/secureClient.ts\nexport class SecureApiClient {\n  private baseURL: string;\n\n  constructor() {\n    // Always use HTTPS in production\n    this.baseURL =\n      process.env.NODE_ENV === 'production'\n        ? 'https://api.example.com'\n        : 'https://staging-api.example.com';\n  }\n\n  async secureRequest&lt;T&gt;(endpoint: string, options: RequestInit = {}): Promise&lt;T&gt; {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Ensure HTTPS\n    if (!url.startsWith('https://')) {\n      throw new Error('Only HTTPS requests are allowed');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n}\n</code></pre>"},{"location":"security/api-security/#request-signing","title":"Request Signing","text":"<pre><code>// lib/security/requestSigning.ts\nimport CryptoJS from 'crypto-js';\n\nexport class RequestSigner {\n  private static readonly SECRET_KEY = process.env.EXPO_PUBLIC_API_SECRET;\n\n  static signRequest(method: string, url: string, body: string, timestamp: number): string {\n    const message = `${method}${url}${body}${timestamp}`;\n    return CryptoJS.HmacSHA256(message, this.SECRET_KEY).toString();\n  }\n\n  static verifySignature(\n    signature: string,\n    method: string,\n    url: string,\n    body: string,\n    timestamp: number\n  ): boolean {\n    const expectedSignature = this.signRequest(method, url, body, timestamp);\n    return signature === expectedSignature;\n  }\n}\n</code></pre>"},{"location":"security/api-security/#best-practices","title":"Best Practices","text":"<ol> <li>Always use HTTPS for API communication</li> <li>Implement request signing for critical operations</li> <li>Validate all inputs before sending to API</li> <li>Handle errors securely without exposing sensitive information</li> <li>Use proper authentication mechanisms (JWT, OAuth)</li> <li>Implement rate limiting to prevent abuse</li> </ol> <p>Pro Tip: Never expose API secrets in client-side code. Use environment variables and secure key management.</p>"},{"location":"security/app-security/","title":"App Security","text":"<p>Comprehensive guide to implementing security measures in React Native applications.</p>"},{"location":"security/app-security/#security-architecture","title":"Security Architecture","text":"graph TB     A[App Security] --&gt; B[Code Protection]     A --&gt; C[Runtime Security]     A --&gt; D[Data Protection]     A --&gt; E[Network Security]      B --&gt; B1[Code Obfuscation]     B --&gt; B2[Anti-Tampering]     B --&gt; B3[Certificate Pinning]      C --&gt; C1[Root Detection]     C --&gt; C2[Debug Detection]     C --&gt; C3[Emulator Detection]      D --&gt; D1[Encryption]     D --&gt; D2[Secure Storage]     D --&gt; D3[Biometric Auth]      E --&gt; E1[HTTPS Only]     E --&gt; E2[Certificate Validation]     E --&gt; E3[Request Signing]"},{"location":"security/app-security/#code-protection","title":"Code Protection","text":""},{"location":"security/app-security/#code-obfuscation","title":"Code Obfuscation","text":"<pre><code>// metro.config.js\nmodule.exports = {\n  transformer: {\n    minifierConfig: {\n      mangle: {\n        keep_fnames: true,\n      },\n      output: {\n        ascii_only: true,\n        quote_keys: true,\n        wrap_iife: true,\n      },\n      sourceMap: false,\n      toplevel: false,\n      warnings: false,\n    },\n  },\n};\n</code></pre>"},{"location":"security/app-security/#anti-tampering","title":"Anti-Tampering","text":"<pre><code>// lib/security/antiTampering.ts\nexport class AntiTampering {\n  static checkIntegrity(): boolean {\n    // Check if app is running in debug mode\n    if (__DEV__) {\n      console.warn('App is running in debug mode');\n      return false;\n    }\n\n    // Check for common debugging tools\n    const debuggerDetected = this.detectDebugger();\n    if (debuggerDetected) {\n      console.warn('Debugger detected');\n      return false;\n    }\n\n    return true;\n  }\n\n  private static detectDebugger(): boolean {\n    // Simple debugger detection\n    let start = Date.now();\n    debugger;\n    let end = Date.now();\n    return end - start &gt; 100;\n  }\n}\n</code></pre>"},{"location":"security/app-security/#runtime-security","title":"Runtime Security","text":""},{"location":"security/app-security/#rootjailbreak-detection","title":"Root/Jailbreak Detection","text":"<pre><code>// lib/security/rootDetection.ts\nimport { Platform } from 'react-native';\n\nexport class RootDetection {\n  static async isDeviceCompromised(): Promise&lt;boolean&gt; {\n    if (Platform.OS === 'ios') {\n      return this.checkJailbreak();\n    } else {\n      return this.checkRoot();\n    }\n  }\n\n  private static checkJailbreak(): boolean {\n    // Check for common jailbreak indicators\n    const jailbreakPaths = ['/Applications/Cydia.app', '/usr/sbin/sshd', '/bin/bash', '/etc/apt'];\n\n    // This is a simplified check - use a proper library in production\n    return false; // Placeholder\n  }\n\n  private static checkRoot(): boolean {\n    // Check for common root indicators\n    const rootPaths = [\n      '/system/bin/su',\n      '/system/xbin/su',\n      '/sbin/su',\n      '/system/app/Superuser.apk',\n    ];\n\n    // This is a simplified check - use a proper library in production\n    return false; // Placeholder\n  }\n}\n</code></pre>"},{"location":"security/app-security/#best-practices","title":"Best Practices","text":"<ol> <li>Enable code obfuscation for production builds</li> <li>Implement certificate pinning for API communication</li> <li>Detect compromised devices (rooted/jailbroken)</li> <li>Use secure storage for sensitive data</li> <li>Implement proper session management</li> <li>Regular security audits and penetration testing</li> </ol> <p>Pro Tip: Security is a layered approach. Implement multiple security measures rather than relying on a single solution.</p>"},{"location":"security/authentication/","title":"Authentication","text":"<p>Comprehensive guide to implementing secure authentication in React Native applications with modern patterns and best practices.</p>"},{"location":"security/authentication/#authentication-flow-overview","title":"Authentication Flow Overview","text":"sequenceDiagram     participant U as User     participant A as App     participant AS as Auth Service     participant API as API Server     participant S as Secure Storage      U-&gt;&gt;A: Enter credentials     A-&gt;&gt;AS: Login request     AS-&gt;&gt;API: Authenticate     API-&gt;&gt;AS: Return tokens     AS-&gt;&gt;S: Store tokens securely     AS-&gt;&gt;A: Authentication success     A-&gt;&gt;U: Navigate to app      Note over A,API: Subsequent API calls     A-&gt;&gt;API: Request with access token     alt Token valid         API-&gt;&gt;A: Return data     else Token expired         API-&gt;&gt;A: 401 Unauthorized         A-&gt;&gt;AS: Refresh token         AS-&gt;&gt;API: Refresh request         API-&gt;&gt;AS: New tokens         AS-&gt;&gt;S: Update stored tokens         AS-&gt;&gt;A: Retry original request     end"},{"location":"security/authentication/#token-based-authentication","title":"Token-Based Authentication","text":""},{"location":"security/authentication/#jwt-token-management","title":"JWT Token Management","text":"<pre><code>// types/auth.ts\nexport interface AuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  roles: string[];\n  permissions: string[];\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n}\n\n// lib/auth/tokenManager.ts\nimport { jwtDecode } from 'jwt-decode';\nimport { secureStorage } from './secureStorage';\n\ninterface JWTPayload {\n  sub: string;\n  email: string;\n  name: string;\n  roles: string[];\n  permissions: string[];\n  exp: number;\n  iat: number;\n}\n\nclass TokenManager {\n  private static readonly ACCESS_TOKEN_KEY = 'access_token';\n  private static readonly REFRESH_TOKEN_KEY = 'refresh_token';\n  private static readonly EXPIRES_AT_KEY = 'expires_at';\n\n  async setTokens(tokens: AuthTokens): Promise&lt;void&gt; {\n    await Promise.all([\n      secureStorage.setItem(TokenManager.ACCESS_TOKEN_KEY, tokens.accessToken),\n      secureStorage.setItem(TokenManager.REFRESH_TOKEN_KEY, tokens.refreshToken),\n      secureStorage.setItem(TokenManager.EXPIRES_AT_KEY, tokens.expiresAt.toString()),\n    ]);\n  }\n\n  async getAccessToken(): Promise&lt;string | null&gt; {\n    return secureStorage.getItem(TokenManager.ACCESS_TOKEN_KEY);\n  }\n\n  async getRefreshToken(): Promise&lt;string | null&gt; {\n    return secureStorage.getItem(TokenManager.REFRESH_TOKEN_KEY);\n  }\n\n  async getExpiresAt(): Promise&lt;number | null&gt; {\n    const expiresAt = await secureStorage.getItem(TokenManager.EXPIRES_AT_KEY);\n    return expiresAt ? parseInt(expiresAt, 10) : null;\n  }\n\n  async isTokenValid(): Promise&lt;boolean&gt; {\n    const token = await this.getAccessToken();\n    const expiresAt = await this.getExpiresAt();\n\n    if (!token || !expiresAt) {\n      return false;\n    }\n\n    // Check if token expires in the next 5 minutes\n    const fiveMinutesFromNow = Date.now() + 5 * 60 * 1000;\n    return expiresAt &gt; fiveMinutesFromNow;\n  }\n\n  async getUserFromToken(): Promise&lt;User | null&gt; {\n    const token = await this.getAccessToken();\n    if (!token) return null;\n\n    try {\n      const payload = jwtDecode&lt;JWTPayload&gt;(token);\n      return {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        roles: payload.roles,\n        permissions: payload.permissions,\n      };\n    } catch (error) {\n      console.error('Failed to decode token:', error);\n      return null;\n    }\n  }\n\n  async clearTokens(): Promise&lt;void&gt; {\n    await Promise.all([\n      secureStorage.removeItem(TokenManager.ACCESS_TOKEN_KEY),\n      secureStorage.removeItem(TokenManager.REFRESH_TOKEN_KEY),\n      secureStorage.removeItem(TokenManager.EXPIRES_AT_KEY),\n    ]);\n  }\n}\n\nexport const tokenManager = new TokenManager();\n</code></pre>"},{"location":"security/authentication/#secure-storage-implementation","title":"Secure Storage Implementation","text":"<pre><code>// lib/auth/secureStorage.ts\nimport * as Keychain from 'react-native-keychain';\nimport { Platform } from 'react-native';\n\ninterface SecureStorageOptions {\n  service?: string;\n  accessGroup?: string;\n}\n\nclass SecureStorage {\n  private service: string;\n  private accessGroup?: string;\n\n  constructor(options: SecureStorageOptions = {}) {\n    this.service = options.service || 'MyAppAuth';\n    this.accessGroup = options.accessGroup;\n  }\n\n  async setItem(key: string, value: string): Promise&lt;void&gt; {\n    try {\n      await Keychain.setInternetCredentials(key, key, value, {\n        service: this.service,\n        accessGroup: this.accessGroup,\n        accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE,\n        authenticationType: Keychain.AUTHENTICATION_TYPE.DEVICE_PASSCODE_OR_BIOMETRICS,\n      });\n    } catch (error) {\n      console.error('Failed to store secure item:', error);\n      throw new Error('Failed to store secure data');\n    }\n  }\n\n  async getItem(key: string): Promise&lt;string | null&gt; {\n    try {\n      const credentials = await Keychain.getInternetCredentials(key, {\n        service: this.service,\n        accessGroup: this.accessGroup,\n        authenticationType: Keychain.AUTHENTICATION_TYPE.DEVICE_PASSCODE_OR_BIOMETRICS,\n      });\n\n      if (credentials &amp;&amp; credentials.password) {\n        return credentials.password;\n      }\n      return null;\n    } catch (error) {\n      console.error('Failed to retrieve secure item:', error);\n      return null;\n    }\n  }\n\n  async removeItem(key: string): Promise&lt;void&gt; {\n    try {\n      await Keychain.resetInternetCredentials(key, {\n        service: this.service,\n      });\n    } catch (error) {\n      console.error('Failed to remove secure item:', error);\n    }\n  }\n\n  async clear(): Promise&lt;void&gt; {\n    try {\n      await Keychain.resetGenericPassword({\n        service: this.service,\n      });\n    } catch (error) {\n      console.error('Failed to clear secure storage:', error);\n    }\n  }\n\n  async getSupportedBiometryType(): Promise&lt;Keychain.BIOMETRY_TYPE | null&gt; {\n    try {\n      return await Keychain.getSupportedBiometryType();\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nexport const secureStorage = new SecureStorage();\n</code></pre>"},{"location":"security/authentication/#authentication-service","title":"Authentication Service","text":""},{"location":"security/authentication/#auth-service-implementation","title":"Auth Service Implementation","text":"<pre><code>// services/authService.ts\nimport { apiClient } from '../lib/api';\nimport { tokenManager } from '../lib/auth/tokenManager';\n\ninterface LoginResponse {\n  user: User;\n  tokens: AuthTokens;\n}\n\ninterface RefreshResponse {\n  tokens: AuthTokens;\n}\n\nclass AuthService {\n  async login(credentials: LoginCredentials): Promise&lt;User&gt; {\n    try {\n      const response = await apiClient.post&lt;LoginResponse&gt;('/auth/login', credentials);\n\n      await tokenManager.setTokens(response.data.tokens);\n\n      return response.data.user;\n    } catch (error) {\n      throw new Error('Invalid email or password');\n    }\n  }\n\n  async register(userData: RegisterData): Promise&lt;User&gt; {\n    try {\n      const response = await apiClient.post&lt;LoginResponse&gt;('/auth/register', userData);\n\n      await tokenManager.setTokens(response.data.tokens);\n\n      return response.data.user;\n    } catch (error) {\n      throw new Error('Registration failed');\n    }\n  }\n\n  async logout(): Promise&lt;void&gt; {\n    try {\n      const refreshToken = await tokenManager.getRefreshToken();\n      if (refreshToken) {\n        await apiClient.post('/auth/logout', { refreshToken });\n      }\n    } catch (error) {\n      console.warn('Logout request failed:', error);\n    } finally {\n      await tokenManager.clearTokens();\n    }\n  }\n\n  async refreshTokens(): Promise&lt;AuthTokens&gt; {\n    const refreshToken = await tokenManager.getRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const response = await apiClient.post&lt;RefreshResponse&gt;('/auth/refresh', {\n        refreshToken,\n      });\n\n      await tokenManager.setTokens(response.data.tokens);\n\n      return response.data.tokens;\n    } catch (error) {\n      await tokenManager.clearTokens();\n      throw new Error('Token refresh failed');\n    }\n  }\n\n  async getCurrentUser(): Promise&lt;User | null&gt; {\n    const isValid = await tokenManager.isTokenValid();\n    if (!isValid) {\n      try {\n        await this.refreshTokens();\n      } catch (error) {\n        return null;\n      }\n    }\n\n    return tokenManager.getUserFromToken();\n  }\n\n  async forgotPassword(email: string): Promise&lt;void&gt; {\n    await apiClient.post('/auth/forgot-password', { email });\n  }\n\n  async resetPassword(token: string, newPassword: string): Promise&lt;void&gt; {\n    await apiClient.post('/auth/reset-password', {\n      token,\n      password: newPassword,\n    });\n  }\n\n  async changePassword(currentPassword: string, newPassword: string): Promise&lt;void&gt; {\n    await apiClient.post('/auth/change-password', {\n      currentPassword,\n      newPassword,\n    });\n  }\n\n  async verifyEmail(token: string): Promise&lt;void&gt; {\n    await apiClient.post('/auth/verify-email', { token });\n  }\n\n  async resendVerificationEmail(): Promise&lt;void&gt; {\n    await apiClient.post('/auth/resend-verification');\n  }\n}\n\nexport const authService = new AuthService();\n</code></pre>"},{"location":"security/authentication/#authentication-context","title":"Authentication Context","text":""},{"location":"security/authentication/#auth-provider","title":"Auth Provider","text":"<pre><code>// contexts/AuthContext.tsx\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (credentials: LoginCredentials) =&gt; Promise&lt;void&gt;;\n  register: (userData: RegisterData) =&gt; Promise&lt;void&gt;;\n  logout: () =&gt; Promise&lt;void&gt;;\n  refreshUser: () =&gt; Promise&lt;void&gt;;\n}\n\nconst AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user;\n\n  useEffect(() =&gt; {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () =&gt; {\n    try {\n      const currentUser = await authService.getCurrentUser();\n      setUser(currentUser);\n    } catch (error) {\n      console.error('Auth initialization failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (credentials: LoginCredentials) =&gt; {\n    setIsLoading(true);\n    try {\n      const user = await authService.login(credentials);\n      setUser(user);\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: RegisterData) =&gt; {\n    setIsLoading(true);\n    try {\n      const user = await authService.register(userData);\n      setUser(user);\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () =&gt; {\n    setIsLoading(true);\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshUser = async () =&gt; {\n    try {\n      const currentUser = await authService.getCurrentUser();\n      setUser(currentUser);\n    } catch (error) {\n      console.error('User refresh failed:', error);\n      setUser(null);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    &lt;AuthContext.Provider value={value}&gt;\n      {children}\n    &lt;/AuthContext.Provider&gt;\n  );\n}\n\nexport const useAuth = () =&gt; {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n</code></pre>"},{"location":"security/authentication/#biometric-authentication","title":"Biometric Authentication","text":""},{"location":"security/authentication/#biometric-setup","title":"Biometric Setup","text":"<pre><code>// lib/auth/biometricAuth.ts\nimport TouchID from 'react-native-touch-id';\nimport { Platform } from 'react-native';\n\ninterface BiometricConfig {\n  title: string;\n  subtitle?: string;\n  description?: string;\n  fallbackLabel?: string;\n  cancelLabel?: string;\n}\n\nclass BiometricAuth {\n  async isSupported(): Promise&lt;boolean&gt; {\n    try {\n      const biometryType = await TouchID.isSupported();\n      return biometryType !== false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async getSupportedType(): Promise&lt;string | null&gt; {\n    try {\n      const biometryType = await TouchID.isSupported();\n      if (typeof biometryType === 'string') {\n        return biometryType;\n      }\n      return biometryType ? 'TouchID' : null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async authenticate(config: BiometricConfig): Promise&lt;boolean&gt; {\n    try {\n      const isSupported = await this.isSupported();\n      if (!isSupported) {\n        throw new Error('Biometric authentication not supported');\n      }\n\n      const options = {\n        title: config.title,\n        subtitle: config.subtitle,\n        description: config.description,\n        fallbackLabel: config.fallbackLabel || 'Use Passcode',\n        cancelLabel: config.cancelLabel || 'Cancel',\n        color: '#007AFF',\n        sensorDescription: 'Touch sensor',\n        sensorErrorDescription: 'Failed',\n        unifiedErrors: false,\n        passcodeFallback: true,\n      };\n\n      await TouchID.authenticate(config.title, options);\n      return true;\n    } catch (error) {\n      console.error('Biometric authentication failed:', error);\n      return false;\n    }\n  }\n\n  async authenticateForLogin(): Promise&lt;boolean&gt; {\n    return this.authenticate({\n      title: 'Authenticate',\n      subtitle: 'Use your biometric to sign in',\n      description: 'Place your finger on the sensor or look at the camera',\n    });\n  }\n\n  async authenticateForSensitiveAction(action: string): Promise&lt;boolean&gt; {\n    return this.authenticate({\n      title: 'Confirm Action',\n      subtitle: `Authenticate to ${action}`,\n      description: 'This action requires biometric verification',\n    });\n  }\n}\n\nexport const biometricAuth = new BiometricAuth();\n</code></pre>"},{"location":"security/authentication/#biometric-login-hook","title":"Biometric Login Hook","text":"<pre><code>// hooks/useBiometricLogin.ts\nexport const useBiometricLogin = () =&gt; {\n  const { login } = useAuth();\n  const [isBiometricEnabled, setIsBiometricEnabled] = useState(false);\n  const [isSupported, setIsSupported] = useState(false);\n\n  useEffect(() =&gt; {\n    checkBiometricSupport();\n    loadBiometricPreference();\n  }, []);\n\n  const checkBiometricSupport = async () =&gt; {\n    const supported = await biometricAuth.isSupported();\n    setIsSupported(supported);\n  };\n\n  const loadBiometricPreference = async () =&gt; {\n    try {\n      const enabled = await AsyncStorage.getItem('biometric_enabled');\n      setIsBiometricEnabled(enabled === 'true');\n    } catch (error) {\n      console.error('Failed to load biometric preference:', error);\n    }\n  };\n\n  const enableBiometric = async (credentials: LoginCredentials) =&gt; {\n    try {\n      // First, verify credentials with regular login\n      await login(credentials);\n\n      // Then enable biometric for future logins\n      await secureStorage.setItem('biometric_credentials', JSON.stringify(credentials));\n      await AsyncStorage.setItem('biometric_enabled', 'true');\n      setIsBiometricEnabled(true);\n\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const disableBiometric = async () =&gt; {\n    try {\n      await secureStorage.removeItem('biometric_credentials');\n      await AsyncStorage.setItem('biometric_enabled', 'false');\n      setIsBiometricEnabled(false);\n    } catch (error) {\n      console.error('Failed to disable biometric:', error);\n    }\n  };\n\n  const loginWithBiometric = async () =&gt; {\n    try {\n      if (!isBiometricEnabled) {\n        throw new Error('Biometric login not enabled');\n      }\n\n      const authenticated = await biometricAuth.authenticateForLogin();\n      if (!authenticated) {\n        throw new Error('Biometric authentication failed');\n      }\n\n      const credentialsJson = await secureStorage.getItem('biometric_credentials');\n      if (!credentialsJson) {\n        throw new Error('No stored credentials found');\n      }\n\n      const credentials = JSON.parse(credentialsJson) as LoginCredentials;\n      await login(credentials);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  return {\n    isSupported,\n    isBiometricEnabled,\n    enableBiometric,\n    disableBiometric,\n    loginWithBiometric,\n  };\n};\n</code></pre>"},{"location":"security/authentication/#oauth-integration","title":"OAuth Integration","text":""},{"location":"security/authentication/#oauth-service","title":"OAuth Service","text":"<pre><code>// lib/auth/oauthService.ts\nimport { authorize, refresh, revoke } from 'react-native-app-auth';\n\ninterface OAuthConfig {\n  issuer: string;\n  clientId: string;\n  redirectUrl: string;\n  scopes: string[];\n  additionalParameters?: Record&lt;string, string&gt;;\n}\n\nclass OAuthService {\n  private configs: Record&lt;string, OAuthConfig&gt; = {\n    google: {\n      issuer: 'https://accounts.google.com',\n      clientId: process.env.EXPO_PUBLIC_GOOGLE_CLIENT_ID!,\n      redirectUrl: 'com.yourapp://oauth/google',\n      scopes: ['openid', 'profile', 'email'],\n    },\n    apple: {\n      issuer: 'https://appleid.apple.com',\n      clientId: process.env.EXPO_PUBLIC_APPLE_CLIENT_ID!,\n      redirectUrl: 'com.yourapp://oauth/apple',\n      scopes: ['openid', 'email', 'name'],\n    },\n  };\n\n  async signInWithProvider(provider: 'google' | 'apple'): Promise&lt;User&gt; {\n    const config = this.configs[provider];\n    if (!config) {\n      throw new Error(`OAuth provider ${provider} not configured`);\n    }\n\n    try {\n      const result = await authorize(config);\n\n      // Exchange OAuth token for app tokens\n      const response = await apiClient.post&lt;LoginResponse&gt;('/auth/oauth', {\n        provider,\n        accessToken: result.accessToken,\n        idToken: result.idToken,\n      });\n\n      await tokenManager.setTokens(response.data.tokens);\n\n      return response.data.user;\n    } catch (error) {\n      throw new Error(`${provider} sign-in failed`);\n    }\n  }\n\n  async refreshOAuthToken(provider: 'google' | 'apple', refreshToken: string): Promise&lt;string&gt; {\n    const config = this.configs[provider];\n\n    try {\n      const result = await refresh(config, {\n        refreshToken,\n      });\n\n      return result.accessToken;\n    } catch (error) {\n      throw new Error(`Failed to refresh ${provider} token`);\n    }\n  }\n\n  async revokeOAuthToken(provider: 'google' | 'apple', token: string): Promise&lt;void&gt; {\n    const config = this.configs[provider];\n\n    try {\n      await revoke(config, {\n        tokenToRevoke: token,\n        sendClientId: true,\n      });\n    } catch (error) {\n      console.warn(`Failed to revoke ${provider} token:`, error);\n    }\n  }\n}\n\nexport const oauthService = new OAuthService();\n</code></pre>"},{"location":"security/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"security/authentication/#input-validation","title":"Input Validation","text":"<pre><code>// utils/validation.ts\nimport * as yup from 'yup';\n\nexport const loginSchema = yup.object({\n  email: yup.string().email('Invalid email format').required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .required('Password is required'),\n});\n\nexport const registerSchema = yup.object({\n  email: yup.string().email('Invalid email format').required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]/,\n      'Password must contain uppercase, lowercase, number and special character'\n    )\n    .required('Password is required'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Passwords must match')\n    .required('Confirm password is required'),\n  name: yup.string().min(2, 'Name must be at least 2 characters').required('Name is required'),\n});\n</code></pre>"},{"location":"security/authentication/#rate-limiting","title":"Rate Limiting","text":"<pre><code>// utils/rateLimiter.ts\nclass RateLimiter {\n  private attempts = new Map&lt;string, { count: number; resetTime: number }&gt;();\n\n  isAllowed(key: string, maxAttempts: number, windowMs: number): boolean {\n    const now = Date.now();\n    const attempt = this.attempts.get(key);\n\n    if (!attempt || now &gt; attempt.resetTime) {\n      this.attempts.set(key, { count: 1, resetTime: now + windowMs });\n      return true;\n    }\n\n    if (attempt.count &gt;= maxAttempts) {\n      return false;\n    }\n\n    attempt.count++;\n    return true;\n  }\n\n  getRemainingTime(key: string): number {\n    const attempt = this.attempts.get(key);\n    if (!attempt) return 0;\n\n    return Math.max(0, attempt.resetTime - Date.now());\n  }\n\n  reset(key: string): void {\n    this.attempts.delete(key);\n  }\n}\n\nexport const rateLimiter = new RateLimiter();\n</code></pre>"},{"location":"security/authentication/#next-steps","title":"Next Steps","text":"<ol> <li>Implement secure token storage with proper encryption</li> <li>Set up biometric authentication for enhanced security</li> <li>Add OAuth providers for social login options</li> <li>Implement proper session management and token refresh</li> <li>Add security monitoring and anomaly detection</li> <li>Test authentication flows thoroughly across different scenarios</li> </ol> <p>Pro Tip: Always use HTTPS for all authentication endpoints, implement proper token expiration and refresh mechanisms, and never store sensitive data in plain text. Consider implementing additional security measures like device fingerprinting and anomaly detection for production applications.</p>"},{"location":"security/data-security/","title":"Data Security","text":"<p>Guide to implementing data security best practices in React Native applications.</p>"},{"location":"security/data-security/#data-protection-strategies","title":"Data Protection Strategies","text":""},{"location":"security/data-security/#encryption-at-rest","title":"Encryption at Rest","text":"<pre><code>// lib/security/encryption.ts\nimport CryptoJS from 'crypto-js';\n\nexport class DataEncryption {\n  private static readonly SECRET_KEY = process.env.EXPO_PUBLIC_ENCRYPTION_KEY;\n\n  static encrypt(data: string): string {\n    return CryptoJS.AES.encrypt(data, this.SECRET_KEY).toString();\n  }\n\n  static decrypt(encryptedData: string): string {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, this.SECRET_KEY);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  }\n}\n</code></pre>"},{"location":"security/data-security/#secure-storage","title":"Secure Storage","text":"<pre><code>// lib/security/secureStorage.ts\nimport * as SecureStore from 'expo-secure-store';\n\nexport class SecureDataStorage {\n  static async store(key: string, value: string): Promise&lt;void&gt; {\n    await SecureStore.setItemAsync(key, value, {\n      keychainService: 'myapp-keychain',\n      requireAuthentication: true,\n    });\n  }\n\n  static async retrieve(key: string): Promise&lt;string | null&gt; {\n    return await SecureStore.getItemAsync(key, {\n      keychainService: 'myapp-keychain',\n      requireAuthentication: true,\n    });\n  }\n}\n</code></pre>"},{"location":"security/data-security/#best-practices","title":"Best Practices","text":"<ol> <li>Encrypt sensitive data before storing locally</li> <li>Use secure storage for authentication tokens</li> <li>Implement data validation on all inputs</li> <li>Regular security audits of data handling</li> </ol> <p>Pro Tip: Never store sensitive data in plain text. Always use encryption and secure storage mechanisms provided by the platform.</p>"},{"location":"setup/environment-setup/","title":"Environment Setup","text":"<p>Complete guide to setting up your React Native development environment for production-grade applications.</p>"},{"location":"setup/environment-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"setup/environment-setup/#system-requirements","title":"System Requirements","text":"<ul> <li>macOS (for iOS development) or Windows/Linux (for Android only)</li> <li>8GB+ RAM (16GB recommended)</li> <li>50GB+ free disk space</li> <li>Stable internet connection</li> </ul>"},{"location":"setup/environment-setup/#core-tools-installation","title":"Core Tools Installation","text":""},{"location":"setup/environment-setup/#1-nodejs-package-manager","title":"1. Node.js &amp; Package Manager","text":""},{"location":"setup/environment-setup/#option-a-using-nvm-recommended","title":"Option A: Using nvm (Recommended)","text":"<pre><code># Install nvm (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# Restart terminal or reload shell\nsource ~/.bashrc # or ~/.zshrc\n\n# Install Node.js LTS\nnvm install --lts\nnvm use --lts\nnvm alias default node\n\n# Verify installation\nnode --version # Should be v18+\nnpm --version\n</code></pre>"},{"location":"setup/environment-setup/#option-b-direct-installation","title":"Option B: Direct Installation","text":"<p>Download from nodejs.org and install Node.js v18+</p>"},{"location":"setup/environment-setup/#package-managers","title":"Package Managers","text":"<p>Choose one based on your preference:</p> <pre><code># Bun (Fastest)\ncurl -fsSL https://bun.sh/install | bash\nbun --version\n\n# Yarn\nnpm install -g yarn\nyarn --version\n\n# Pnpm\nnpm install -g pnpm\npnpm --version\n</code></pre>"},{"location":"setup/environment-setup/#2-git-configuration","title":"2. Git Configuration","text":"<pre><code># Set your identity\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Useful aliases\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n</code></pre>"},{"location":"setup/environment-setup/#3-code-editor-setup","title":"3. Code Editor Setup","text":""},{"location":"setup/environment-setup/#vs-code-recommended","title":"VS Code (Recommended)","text":"<p>Download from code.visualstudio.com</p> <p>Essential Extensions:</p> <pre><code># Install via command palette (Cmd+Shift+P)\next install ms-vscode.vscode-typescript-next\next install bradlc.vscode-tailwindcss\next install esbenp.prettier-vscode\next install ms-vscode.vscode-eslint\next install formulahendry.auto-rename-tag\next install christian-kohler.path-intellisense\next install ms-vscode.vscode-json\n</code></pre> <p>VS Code Settings:</p> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"emmet.includeLanguages\": {\n    \"typescript\": \"html\",\n    \"typescriptreact\": \"html\"\n  }\n}\n</code></pre>"},{"location":"setup/environment-setup/#mobile-development-setup","title":"Mobile Development Setup","text":""},{"location":"setup/environment-setup/#ios-development-macos-only","title":"iOS Development (macOS only)","text":""},{"location":"setup/environment-setup/#1-xcode","title":"1. Xcode","text":"<pre><code># Install from Mac App Store or Apple Developer\n# Xcode 14+ required\n\n# Install Command Line Tools\nxcode-select --install\n\n# Verify installation\nxcodebuild -version\n</code></pre>"},{"location":"setup/environment-setup/#2-ios-simulator","title":"2. iOS Simulator","text":"<pre><code># Open Xcode &gt; Preferences &gt; Components\n# Download iOS simulators for testing\n\n# List available simulators\nxcrun simctl list devices\n</code></pre>"},{"location":"setup/environment-setup/#3-cocoapods","title":"3. CocoaPods","text":"<pre><code># Install CocoaPods\nsudo gem install cocoapods\n\n# Verify installation\npod --version\n</code></pre>"},{"location":"setup/environment-setup/#android-development","title":"Android Development","text":""},{"location":"setup/environment-setup/#1-java-development-kit-jdk","title":"1. Java Development Kit (JDK)","text":"<pre><code># Install JDK 11 (recommended)\n# Macos with Homebrew\nbrew install openjdk@11\n\n# Add to shell profile\necho 'export PATH=\"/opt/homebrew/opt/openjdk@11/bin:$PATH\"' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"setup/environment-setup/#2-android-studio","title":"2. Android Studio","text":"<ol> <li>Download from developer.android.com/studio</li> <li>Install Android Studio</li> <li>Open Android Studio &gt; Configure &gt; SDK Manager</li> <li>Install:</li> <li>Android SDK Platform 33+</li> <li>Android SDK Build-Tools 33+</li> <li>Android Emulator</li> <li>Android SDK Platform-Tools</li> </ol>"},{"location":"setup/environment-setup/#3-environment-variables","title":"3. Environment Variables","text":"<p>Add to your shell profile (<code>~/.zshrc</code> or <code>~/.bash_profile</code>):</p> <pre><code>export ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/emulator\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_HOME/tools/bin\n</code></pre>"},{"location":"setup/environment-setup/#4-android-virtual-device-avd","title":"4. Android Virtual Device (AVD)","text":"<pre><code># Create AVD via Android Studio\n# Tools &gt; AVD Manager &gt; Create Virtual Device\n\n# Or via command line\navdmanager create avd -n \"Pixel_6_API_33\" -k \"system-images;android-33;google_apis;x86_64\"\n</code></pre>"},{"location":"setup/environment-setup/#react-native-tools","title":"React Native Tools","text":""},{"location":"setup/environment-setup/#1-expo-cli","title":"1. Expo CLI","text":"<pre><code># Install Expo CLI\nnpm install -g @expo/cli\n\n# Verify installation\nexpo --version\n</code></pre>"},{"location":"setup/environment-setup/#2-react-native-cli","title":"2. React Native CLI","text":"<pre><code># Install React Native CLI\nnpm install -g @react-native-community/cli\n\n# Verify installation\nnpx react-native --version\n</code></pre>"},{"location":"setup/environment-setup/#3-eas-cli-for-expo-builds","title":"3. EAS CLI (for Expo builds)","text":"<pre><code># Install EAS CLI\nnpm install -g @expo/eas-cli\n\n# Login to Expo\neas login\n\n# Verify installation\neas --version\n</code></pre>"},{"location":"setup/environment-setup/#verification-testing","title":"Verification &amp; Testing","text":""},{"location":"setup/environment-setup/#environment-check","title":"Environment Check","text":"<pre><code># Check Node.js\nnode --version\n\n# Check package manager\nnpm --version\nyarn --version # if using Yarn\nbun --version # if using Bun\n\n# Check React Native environment\nnpx react-native doctor\n\n# Check Expo environment\nexpo doctor\n</code></pre>"},{"location":"setup/environment-setup/#ios-verification","title":"iOS Verification","text":"<pre><code># Check Xcode\nxcodebuild -version\n\n# Check iOS Simulator\nxcrun simctl list devices\n\n# Check CocoaPods\npod --version\n</code></pre>"},{"location":"setup/environment-setup/#android-verification","title":"Android Verification","text":"<pre><code># Check Java\njava -version\n\n# Check Android SDK\nadb --version\n\n# List Android devices/emulators\nadb devices\n</code></pre>"},{"location":"setup/environment-setup/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"setup/environment-setup/#nodejs-issues","title":"Node.js Issues","text":"<pre><code># Permission errors with npm\nnpm config set prefix ~/.npm-global\nexport PATH=~/.npm-global/bin:$PATH\n\n# Clear npm cache\nnpm cache clean --force\n</code></pre>"},{"location":"setup/environment-setup/#ios-issues","title":"iOS Issues","text":"<pre><code># Xcode Command Line Tools issues\nsudo xcode-select --reset\nxcode-select --install\n\n# CocoaPods issues\nsudo gem install cocoapods\npod repo update\n</code></pre>"},{"location":"setup/environment-setup/#android-issues","title":"Android Issues","text":"<pre><code># SDK not found\necho $ANDROID_HOME # Should show SDK path\n\n# Emulator issues\nemulator -list-avds\nemulator @Pixel_6_API_33\n</code></pre>"},{"location":"setup/environment-setup/#metroreact-native-issues","title":"Metro/React Native Issues","text":"<pre><code># Clear Metro cache\nnpx react-native start --reset-cache\n\n# Clear React Native cache\nrm -rf node_modules\nnpm install\n</code></pre>"},{"location":"setup/environment-setup/#next-steps","title":"Next Steps","text":"<p>Once your environment is set up:</p> <ol> <li>Create your first project: Follow Project Structure</li> <li>Configure package management: See Package Management</li> <li>Set up development tools: Check Development Tools</li> </ol>"},{"location":"setup/environment-setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>React Native Environment Setup</li> <li>Expo Installation</li> <li>Android Studio Setup</li> <li>Xcode Setup</li> </ul> <p>Pro Tip: Keep your development environment updated regularly. New versions often include performance improvements and bug fixes that can significantly improve your development experience.</p>"},{"location":"setup/package-management/","title":"Package Management","text":"<p>Guide to managing dependencies in React Native projects using npm, yarn, pnpm, and bun.</p>"},{"location":"setup/package-management/#package-manager-comparison","title":"Package Manager Comparison","text":"Feature npm yarn pnpm bun Speed Moderate Fast Very Fast Fastest Disk Usage High High Low Low Lock File package-lock.json yarn.lock pnpm-lock.yaml bun.lockb Workspaces Yes Yes Yes Yes Node.js Required Yes Yes Yes No Stability Very Stable Stable Stable Beta"},{"location":"setup/package-management/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"setup/package-management/#npm-default","title":"npm (Default)","text":"<pre><code># Comes with Node.js\nnpm --version\n\n# Initialize project\nnpm init -y\n\n# Install dependencies\nnpm install react-native\nnpm install --save-dev typescript\n\n# Scripts\nnpm run start\nnpm run build\n</code></pre>"},{"location":"setup/package-management/#yarn","title":"yarn","text":"<pre><code># Install yarn\nnpm install -g yarn\nyarn --version\n\n# Initialize project\nyarn init -y\n\n# Install dependencies\nyarn add react-native\nyarn add --dev typescript\n\n# Scripts\nyarn start\nyarn build\n</code></pre>"},{"location":"setup/package-management/#pnpm","title":"pnpm","text":"<pre><code># Install pnpm\nnpm install -g pnpm\npnpm --version\n\n# Initialize project\npnpm init\n\n# Install dependencies\npnpm add react-native\npnpm add --save-dev typescript\n\n# Scripts\npnpm start\npnpm build\n</code></pre>"},{"location":"setup/package-management/#bun-recommended-for-speed","title":"bun (Recommended for Speed)","text":"<pre><code># Install bun\ncurl -fsSL https://bun.sh/install | bash\nbun --version\n\n# Initialize project\nbun init\n\n# Install dependencies\nbun add react-native\nbun add --dev typescript\n\n# Scripts\nbun start\nbun run build\n</code></pre>"},{"location":"setup/package-management/#react-native-specific-commands","title":"React Native Specific Commands","text":""},{"location":"setup/package-management/#project-creation","title":"Project Creation","text":"Expo <pre><code># Npm\nnpx create-expo-app MyApp\n\n# Yarn\nyarn create expo-app MyApp\n\n# Pnpm\npnpm create expo-app MyApp\n\n# Bun\nbunx create-expo-app MyApp\n</code></pre> React Native CLI <pre><code># Npm\nnpx react-native init MyApp\n\n# Yarn\nyarn react-native init MyApp\n\n# Pnpm\npnpm dlx react-native init MyApp\n\n# Bun\nbunx react-native init MyApp\n</code></pre>"},{"location":"setup/package-management/#common-commands","title":"Common Commands","text":"Development <pre><code># Start Metro bundler\nnpm start # npm\nyarn start # yarn\npnpm start # pnpm\nbun start # bun\n\n# Run on iOS\nnpm run ios # npm\nyarn ios # yarn\npnpm ios # pnpm\nbun ios # bun\n\n# Run on Android\nnpm run android # npm\nyarn android # yarn\npnpm android # pnpm\nbun android # bun\n</code></pre> Dependencies <pre><code># Install package\nnpm install package-name\nyarn add package-name\npnpm add package-name\nbun add package-name\n\n# Install dev dependency\nnpm install --save-dev package-name\nyarn add --dev package-name\npnpm add --save-dev package-name\nbun add --dev package-name\n\n# Install global package\nnpm install -g package-name\nyarn global add package-name\npnpm add -g package-name\nbun add -g package-name\n</code></pre>"},{"location":"setup/package-management/#dependency-management-best-practices","title":"Dependency Management Best Practices","text":""},{"location":"setup/package-management/#lock-files","title":"Lock Files","text":"<p>Always commit lock files to version control:</p> <pre><code># Keep these files\npackage-lock.json # npm\nyarn.lock # yarn\npnpm-lock.yaml # pnpm\nbun.lockb # bun\n\n# Don't commit node_modules\nnode_modules/\n</code></pre>"},{"location":"setup/package-management/#version-pinning","title":"Version Pinning","text":"<pre><code>{\n  \"dependencies\": {\n    \"react\": \"18.2.0\", // Exact version\n    \"react-native\": \"^0.72.0\", // Compatible version\n    \"lodash\": \"~4.17.21\" // Patch-level changes\n  }\n}\n</code></pre>"},{"location":"setup/package-management/#peer-dependencies","title":"Peer Dependencies","text":"<pre><code>{\n  \"peerDependencies\": {\n    \"react\": \"&gt;=16.8.0\",\n    \"react-native\": \"&gt;=0.60.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"react-native\": {\n      \"optional\": true\n    }\n  }\n}\n</code></pre>"},{"location":"setup/package-management/#workspace-management","title":"Workspace Management","text":""},{"location":"setup/package-management/#monorepo-structure","title":"Monorepo Structure","text":"<pre><code>my-app/\npackages/\nmobile/                                 # React Native app\nweb/                                    # Web app\nshared/                                 # Shared components\napi/                                    # Backend API\npackage.json                            # Root package.json\npnpm-workspace.yaml # Workspace config\n</code></pre>"},{"location":"setup/package-management/#pnpm-workspaces","title":"pnpm Workspaces","text":"<pre><code># Pnpm-workspace.yaml\npackages:\n  - 'packages/*'\n  - 'apps/*'\n</code></pre> <pre><code>{\n  \"name\": \"my-monorepo\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"pnpm --parallel --recursive dev\",\n    \"build\": \"pnpm --recursive build\",\n    \"test\": \"pnpm --recursive test\"\n  }\n}\n</code></pre>"},{"location":"setup/package-management/#yarn-workspaces","title":"yarn Workspaces","text":"<pre><code>{\n  \"name\": \"my-monorepo\",\n  \"private\": true,\n  \"workspaces\": [\"packages/*\", \"apps/*\"],\n  \"scripts\": {\n    \"dev\": \"yarn workspaces run dev\",\n    \"build\": \"yarn workspaces run build\"\n  }\n}\n</code></pre>"},{"location":"setup/package-management/#performance-optimization","title":"Performance Optimization","text":""},{"location":"setup/package-management/#package-analysis","title":"Package Analysis","text":"<pre><code># Analyze bundle size\nnpx react-native-bundle-visualizer\n\n# Check for duplicate packages\nnpm ls --depth=0\nyarn list --depth=0\npnpm list --depth=0\nbun pm ls\n</code></pre>"},{"location":"setup/package-management/#dependency-cleanup","title":"Dependency Cleanup","text":"<pre><code># Remove unused dependencies\nnpm uninstall package-name\nyarn remove package-name\npnpm remove package-name\nbun remove package-name\n\n# Clean install\nrm -rf node_modules package-lock.json\nnpm install\n\n# Or with other package managers\nrm -rf node_modules yarn.lock &amp;&amp; yarn install\nrm -rf node_modules pnpm-lock.yaml &amp;&amp; pnpm install\nrm -rf node_modules bun.lockb &amp;&amp; bun install\n</code></pre>"},{"location":"setup/package-management/#cache-management","title":"Cache Management","text":"<pre><code># Clear npm cache\nnpm cache clean --force\n\n# Clear yarn cache\nyarn cache clean\n\n# Clear pnpm cache\npnpm store prune\n\n# Clear bun cache\nbun pm cache rm\n</code></pre>"},{"location":"setup/package-management/#security-best-practices","title":"Security Best Practices","text":""},{"location":"setup/package-management/#audit-dependencies","title":"Audit Dependencies","text":"<pre><code># Check for vulnerabilities\nnpm audit\nyarn audit\npnpm audit\nbun audit\n\n# Fix vulnerabilities\nnpm audit fix\nyarn audit fix\npnpm audit --fix\n# Bun Doesn't Have Auto-fix Yet\n</code></pre>"},{"location":"setup/package-management/#package-verification","title":"Package Verification","text":"<pre><code># Verify package integrity\nnpm ci # Clean install from lock file\nyarn install --frozen-lockfile\npnpm install --frozen-lockfile\nbun install --frozen-lockfile\n</code></pre>"},{"location":"setup/package-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup/package-management/#common-issues","title":"Common Issues","text":""},{"location":"setup/package-management/#metro-cache-issues","title":"Metro Cache Issues","text":"<pre><code># Clear Metro cache\nnpx react-native start --reset-cache\n\n# Or with package managers\nnpm start -- --reset-cache\nyarn start --reset-cache\npnpm start --reset-cache\nbun start --reset-cache\n</code></pre>"},{"location":"setup/package-management/#ios-pod-issues","title":"iOS Pod Issues","text":"<pre><code># Clear CocoaPods cache\ncd ios &amp;&amp; pod deintegrate &amp;&amp; pod install\n</code></pre>"},{"location":"setup/package-management/#android-gradle-issues","title":"Android Gradle Issues","text":"<pre><code># Clean Android build\ncd android &amp;&amp; ./gradlew clean\n</code></pre>"},{"location":"setup/package-management/#node-modules-issues","title":"Node Modules Issues","text":"<pre><code># Complete clean install\nrm -rf node_modules\nrm package-lock.json # or yarn.lock, pnpm-lock.yaml, bun.lockb\nnpm install # or yarn, pnpm install, bun install\n</code></pre>"},{"location":"setup/package-management/#version-conflicts","title":"Version Conflicts","text":"<pre><code># Check for version conflicts\nnpm ls\nyarn list\npnpm list\nbun pm ls\n\n# Force resolution (yarn)\n{\n\"resolutions\": {\n\"package-name\": \"1.0.0\"\n}\n}\n\n# Force resolution (pnpm)\n{\n\"pnpm\": {\n\"overrides\": {\n\"package-name\": \"1.0.0\"\n}\n}\n}\n</code></pre>"},{"location":"setup/package-management/#recommended-setup","title":"Recommended Setup","text":""},{"location":"setup/package-management/#for-new-projects","title":"For New Projects","text":"<ol> <li>Use bun for fastest installation and execution</li> <li>Commit lock files to ensure reproducible builds</li> <li>Use exact versions for critical dependencies</li> <li>Set up workspaces if building multiple apps</li> </ol>"},{"location":"setup/package-management/#packagejson-template","title":"Package.json Template","text":"<pre><code>{\n  \"name\": \"my-react-native-app\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"android\": \"expo run:android\",\n    \"ios\": \"expo run:ios\",\n    \"web\": \"expo start --web\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"expo\": \"~49.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-native\": \"0.72.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"~18.2.0\",\n    \"typescript\": \"^5.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"prettier\": \"^3.0.0\"\n  },\n  \"engines\": {\n    \"node\": \"&gt;=18.0.0\"\n  }\n}\n</code></pre>"},{"location":"setup/package-management/#next-steps","title":"Next Steps","text":"<ol> <li>Choose your preferred package manager based on your needs</li> <li>Set up proper dependency management workflows</li> <li>Configure workspaces if building multiple apps</li> <li>Implement security auditing in your CI/CD pipeline</li> <li>Monitor bundle size and dependency health regularly</li> </ol> <p>Pro Tip: Use bun for development speed, but ensure your CI/CD pipeline works with your chosen package manager. Always test with the same package manager across all environments.</p>"},{"location":"setup/project-structure/","title":"Project Structure","text":"<p>Learn how to organize your React Native project for scalability, maintainability, and team collaboration. This guide presents a progressive approach that starts simple and evolves as your app grows.</p>"},{"location":"setup/project-structure/#architecture-evolution-strategy","title":"Architecture Evolution Strategy","text":""},{"location":"setup/project-structure/#start-simple-scale-smart","title":"Start Simple \u2192 Scale Smart","text":"<ol> <li>Small Projects (&lt; 10 screens): Use Flat Structure</li> <li>Medium Projects (10-30 screens): Introduce Domain Grouping</li> <li>Large Projects (30+ screens): Adopt Feature-Based Architecture</li> </ol>"},{"location":"setup/project-structure/#phase-1-flat-structure-recommended-start","title":"Phase 1: Flat Structure (Recommended Start)","text":"<p>Perfect for: New projects, MVPs, small teams, learning</p> <pre><code>my-app/\n\u251c\u2500\u2500 app/                                # App screens (Expo Router)\n\u2502   \u251c\u2500\u2500 (tabs)/                         # Tab-based navigation\n\u2502   \u2502   \u251c\u2500\u2500 _layout.tsx                 # Tab layout\n\u2502   \u2502   \u251c\u2500\u2500 index.tsx                   # Home tab\n\u2502   \u2502   \u251c\u2500\u2500 search.tsx                  # Search tab\n\u2502   \u2502   \u2514\u2500\u2500 profile.tsx                 # Profile tab\n\u2502   \u251c\u2500\u2500 (auth)/                         # Authentication screens\n\u2502   \u2502   \u251c\u2500\u2500 _layout.tsx                 # Auth layout\n\u2502   \u2502   \u251c\u2500\u2500 login.tsx                   # Login screen\n\u2502   \u2502   \u2514\u2500\u2500 register.tsx                # Register screen\n\u2502   \u251c\u2500\u2500 (modals)/                       # Modal screens\n\u2502   \u2502   \u251c\u2500\u2500 camera.tsx                  # Camera modal\n\u2502   \u2502   \u2514\u2500\u2500 edit-profile.tsx            # Edit profile modal\n\u2502   \u251c\u2500\u2500 _layout.tsx                     # Root layout\n\u2502   \u2514\u2500\u2500 +not-found.tsx                  # 404 screen\n\u251c\u2500\u2500 components/                         # Reusable UI components\n\u2502   \u251c\u2500\u2500 ui/                             # Base UI components (Button, Input, Card)\n\u2502   \u251c\u2500\u2500 forms/                          # Form components (LoginForm, RegisterForm)\n\u2502   \u251c\u2500\u2500 navigation/                     # Navigation components (TabBar, Header)\n\u2502   \u2514\u2500\u2500 index.ts                        # Component exports\n\u251c\u2500\u2500 hooks/                              # Custom React hooks\n\u2502   \u251c\u2500\u2500 useAuth.ts                      # Authentication logic\n\u2502   \u251c\u2500\u2500 useApi.ts                       # API requests\n\u2502   \u251c\u2500\u2500 useStorage.ts                   # Local storage\n\u2502   \u2514\u2500\u2500 index.ts                        # Hook exports\n\u251c\u2500\u2500 lib/                                # Utility libraries &amp; configuration\n\u2502   \u251c\u2500\u2500 api/                            # API configuration\n\u2502   \u2502   \u251c\u2500\u2500 client.ts                   # HTTP client setup\n\u2502   \u2502   \u251c\u2500\u2500 endpoints.ts                # API endpoints\n\u2502   \u2502   \u2514\u2500\u2500 types.ts                    # API types\n\u2502   \u251c\u2500\u2500 auth/                           # Authentication utilities\n\u2502   \u2502   \u251c\u2500\u2500 storage.ts                  # Token storage\n\u2502   \u2502   \u2514\u2500\u2500 types.ts                    # Auth types\n\u2502   \u251c\u2500\u2500 storage/                        # Local storage utilities\n\u2502   \u2502   \u251c\u2500\u2500 mmkv.ts                     # MMKV storage\n\u2502   \u2502   \u2514\u2500\u2500 secure.ts                   # Secure storage\n\u2502   \u251c\u2500\u2500 utils/                          # Helper functions\n\u2502   \u2502   \u251c\u2500\u2500 cn.ts                       # Class name utility\n\u2502   \u2502   \u251c\u2500\u2500 format.ts                   # Formatting utilities\n\u2502   \u2502   \u2514\u2500\u2500 validation.ts               # Validation schemas\n\u2502   \u2514\u2500\u2500 constants/                      # App constants\n\u2502       \u251c\u2500\u2500 colors.ts                   # Color palette\n\u2502       \u251c\u2500\u2500 spacing.ts                  # Spacing scale\n\u2502       \u2514\u2500\u2500 typography.ts               # Typography scale\n\u251c\u2500\u2500 store/                              # State management (optional)\n\u2502   \u251c\u2500\u2500 slices/                         # State slices\n\u2502   \u251c\u2500\u2500 providers/                      # Context providers\n\u2502   \u2514\u2500\u2500 index.ts                        # Store exports\n\u251c\u2500\u2500 assets/                             # Static assets\n\u2502   \u251c\u2500\u2500 images/                         # Image files\n\u2502   \u251c\u2500\u2500 icons/                          # Icon files\n\u2502   \u2514\u2500\u2500 fonts/                          # Custom fonts\n\u251c\u2500\u2500 __tests__/                          # Test files\n\u2502   \u251c\u2500\u2500 components/                     # Component tests\n\u2502   \u251c\u2500\u2500 hooks/                          # Hook tests\n\u2502   \u2514\u2500\u2500 utils/                          # Utility tests\n\u251c\u2500\u2500 docs/                               # Documentation\n\u251c\u2500\u2500 scripts/                            # Build and utility scripts\n\u251c\u2500\u2500 package.json                        # Dependencies\n\u251c\u2500\u2500 .env                                # Environment variables\n\u251c\u2500\u2500 app.json                            # Expo configuration\n\u251c\u2500\u2500 babel.config.js                     # Babel configuration\n\u251c\u2500\u2500 eslint.config.js                    # ESLint configuration\n\u251c\u2500\u2500 tsconfig.json                       # TypeScript configuration\n\u2514\u2500\u2500 tailwind.config.js                  # Tailwind configuration (if using)\n</code></pre>"},{"location":"setup/project-structure/#flat-structure-benefits","title":"Flat Structure Benefits","text":"<ul> <li>Simple to understand and navigate</li> <li>Fast development for small teams</li> <li>Easy refactoring when starting out</li> <li>Minimal cognitive overhead</li> <li>Perfect for Expo Router file-based routing</li> </ul>"},{"location":"setup/project-structure/#phase-2-domain-grouping-growing-projects","title":"Phase 2: Domain Grouping (Growing Projects)","text":"<p>Perfect for: 10-30 screens, multiple developers, clear feature boundaries</p> <pre><code>my-app/\n\u251c\u2500\u2500 app/                                # App screens (Expo Router)\n\u2502   \u251c\u2500\u2500 (tabs)/                         # Main app tabs\n\u2502   \u251c\u2500\u2500 (auth)/                         # Authentication flow\n\u2502   \u251c\u2500\u2500 (modals)/                       # Modal screens\n\u2502   \u251c\u2500\u2500 _layout.tsx                     # Root layout\n\u2502   \u2514\u2500\u2500 +not-found.tsx                  # 404 screen\n\u251c\u2500\u2500 features/                           # Feature-specific code\n\u2502   \u251c\u2500\u2500 auth/                           # Authentication feature\n\u2502   \u2502   \u251c\u2500\u2500 components/                 # Auth-specific components\n\u2502   \u2502   \u251c\u2500\u2500 hooks/                      # Auth-specific hooks\n\u2502   \u2502   \u251c\u2500\u2500 services/                   # Auth API services\n\u2502   \u2502   \u2514\u2500\u2500 types.ts                    # Auth types\n\u2502   \u251c\u2500\u2500 profile/                        # User profile feature\n\u2502   \u2502   \u251c\u2500\u2500 components/                 # Profile components\n\u2502   \u2502   \u251c\u2500\u2500 hooks/                      # Profile hooks\n\u2502   \u2502   \u2514\u2500\u2500 services/                   # Profile services\n\u2502   \u2514\u2500\u2500 feed/                           # Social feed feature\n\u2502       \u251c\u2500\u2500 components/                 # Feed components\n\u2502       \u251c\u2500\u2500 hooks/                      # Feed hooks\n\u2502       \u2514\u2500\u2500 services/                   # Feed services\n\u251c\u2500\u2500 shared/                             # Shared across features\n\u2502   \u251c\u2500\u2500 components/                     # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 ui/                         # Base components\n\u2502   \u2502   \u2514\u2500\u2500 layout/                     # Layout components\n\u2502   \u251c\u2500\u2500 hooks/                          # Common hooks\n\u2502   \u251c\u2500\u2500 services/                       # Shared services\n\u2502   \u251c\u2500\u2500 utils/                          # Utility functions\n\u2502   \u2514\u2500\u2500 types/                          # Global types\n\u251c\u2500\u2500 lib/                                # Core utilities &amp; config\n\u251c\u2500\u2500 assets/                             # Static assets\n\u251c\u2500\u2500 __tests__/                          # Test files\n\u2514\u2500\u2500 [config files...]                   # Configuration files\n</code></pre>"},{"location":"setup/project-structure/#domain-grouping-benefits","title":"Domain Grouping Benefits","text":"<ul> <li>Clear feature boundaries</li> <li>Easier team collaboration</li> <li>Reduced merge conflicts</li> <li>Better code organization</li> <li>Preparation for feature-based architecture</li> </ul>"},{"location":"setup/project-structure/#phase-3-feature-based-architecture-large-projects","title":"Phase 3: Feature-Based Architecture (Large Projects)","text":"<p>Perfect for: 30+ screens, large teams, complex business logic</p> <pre><code>my-app/\n\u251c\u2500\u2500 app/                                # App screens (Expo Router)\n\u251c\u2500\u2500 src/                                # Source code\n\u2502   \u251c\u2500\u2500 features/                       # Feature modules\n\u2502   \u2502   \u251c\u2500\u2500 auth/                       # Authentication feature\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components/             # Auth-specific components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hooks/                  # Auth-specific hooks\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/               # Auth API services\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 store/                  # Auth state management\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types/                  # Auth type definitions\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utils/                  # Auth utilities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts                # Feature exports\n\u2502   \u2502   \u251c\u2500\u2500 profile/                    # User profile feature\n\u2502   \u2502   \u251c\u2500\u2500 feed/                       # Social feed feature\n\u2502   \u2502   \u251c\u2500\u2500 chat/                       # Chat feature\n\u2502   \u2502   \u2514\u2500\u2500 notifications/              # Notifications feature\n\u2502   \u251c\u2500\u2500 shared/                         # Shared across features\n\u2502   \u2502   \u251c\u2500\u2500 components/                 # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 hooks/                      # Common hooks\n\u2502   \u2502   \u251c\u2500\u2500 services/                   # Shared services\n\u2502   \u2502   \u251c\u2500\u2500 store/                      # Global state\n\u2502   \u2502   \u251c\u2500\u2500 utils/                      # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 types/                      # Global types\n\u2502   \u2514\u2500\u2500 app/                            # App-level configuration\n\u2502       \u251c\u2500\u2500 store/                      # Global state setup\n\u2502       \u251c\u2500\u2500 navigation/                 # Navigation configuration\n\u2502       \u2514\u2500\u2500 providers/                  # App providers\n\u251c\u2500\u2500 lib/                                # External utilities &amp; config\n\u251c\u2500\u2500 assets/                             # Static assets\n\u2514\u2500\u2500 [config files...]                   # Configuration files\n</code></pre>"},{"location":"setup/project-structure/#feature-based-benefits","title":"Feature-Based Benefits","text":"<ul> <li>Maximum scalability</li> <li>Team independence</li> <li>Clear ownership boundaries</li> <li>Easier testing and maintenance</li> <li>Supports micro-frontend patterns</li> </ul>"},{"location":"setup/project-structure/#app-directory-expo-router","title":"App Directory (Expo Router)","text":""},{"location":"setup/project-structure/#file-based-routing-structure","title":"File-based Routing Structure","text":"<pre><code>app/\n\u251c\u2500\u2500 _layout.tsx                         # Root layout with providers\n\u251c\u2500\u2500 +not-found.tsx                      # 404 error page\n\u251c\u2500\u2500 index.tsx                           # Home/landing page\n\u251c\u2500\u2500 (tabs)/                             # Tab navigation group\n\u2502   \u251c\u2500\u2500 _layout.tsx                     # Tab layout\n\u2502   \u251c\u2500\u2500 index.tsx                       # Home tab\n\u2502   \u251c\u2500\u2500 search.tsx                      # Search tab\n\u2502   \u251c\u2500\u2500 profile.tsx                     # Profile tab\n\u2502   \u2514\u2500\u2500 settings.tsx                    # Settings tab\n\u251c\u2500\u2500 (auth)/                             # Authentication group\n\u2502   \u251c\u2500\u2500 _layout.tsx                     # Auth layout\n\u2502   \u251c\u2500\u2500 login.tsx                       # Login screen\n\u2502   \u251c\u2500\u2500 register.tsx                    # Register screen\n\u2502   \u2514\u2500\u2500 forgot-password.tsx             # Password reset\n\u251c\u2500\u2500 (modals)/                           # Modal screens\n\u2502   \u251c\u2500\u2500 camera.tsx                      # Camera modal\n\u2502   \u2514\u2500\u2500 edit-profile.tsx                # Edit profile modal\n\u2514\u2500\u2500 [...missing].tsx                    # Catch-all route\n</code></pre>"},{"location":"setup/project-structure/#layout-examples","title":"Layout Examples","text":"<p>Root Layout (<code>app/_layout.tsx</code>):</p> <pre><code>import { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AuthProvider } from '@/lib/auth/AuthProvider';\n\nconst queryClient = new QueryClient();\n\nexport default function RootLayout() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;AuthProvider&gt;\n        &lt;Stack screenOptions={{ headerShown: false }}&gt;\n          &lt;Stack.Screen name=\"(tabs)\" /&gt;\n          &lt;Stack.Screen name=\"(auth)\" /&gt;\n          &lt;Stack.Screen name=\"(modals)\" options={{ presentation: 'modal' }} /&gt;\n        &lt;/Stack&gt;\n        &lt;StatusBar style=\"auto\" /&gt;\n      &lt;/AuthProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"setup/project-structure/#components-directory","title":"Components Directory","text":""},{"location":"setup/project-structure/#component-organization","title":"Component Organization","text":"<pre><code>components/\n\u251c\u2500\u2500 ui/                                 # Base UI components\n\u2502   \u251c\u2500\u2500 Button/\n\u2502   \u2502   \u251c\u2500\u2500 Button.tsx\n\u2502   \u2502   \u251c\u2500\u2500 Button.test.tsx\n\u2502   \u2502   \u251c\u2500\u2500 Button.stories.tsx\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 Input/\n\u2502   \u251c\u2500\u2500 Card/\n\u2502   \u2514\u2500\u2500 index.ts                        # Export all UI components\n\u251c\u2500\u2500 forms/                              # Form-specific components\n\u2502   \u251c\u2500\u2500 LoginForm/\n\u2502   \u251c\u2500\u2500 RegisterForm/\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 navigation/                         # Navigation components\n\u2502   \u251c\u2500\u2500 TabBar/\n\u2502   \u251c\u2500\u2500 Header/\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 index.ts                            # Export all components\n</code></pre>"},{"location":"setup/project-structure/#component-template","title":"Component Template","text":"<pre><code>// components/ui/Button/Button.tsx\nimport React from 'react';\nimport { Pressable, Text, PressableProps } from 'react-native';\nimport { cn } from '@/lib/utils';\n\ninterface ButtonProps extends PressableProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  children: React.ReactNode;\n}\n\nexport function Button({\n  variant = 'primary',\n  size = 'md',\n  children,\n  className,\n  ...props\n}: ButtonProps) {\n  return (\n    &lt;Pressable\n      className={cn(\n        'rounded-lg items-center justify-center',\n        {\n          'bg-blue-500': variant === 'primary',\n          'bg-gray-200': variant === 'secondary',\n          'border border-gray-300': variant === 'outline',\n          'px-3 py-2': size === 'sm',\n          'px-4 py-3': size === 'md',\n          'px-6 py-4': size === 'lg',\n        },\n        className\n      )}\n      {...props}\n      &gt;\n      &lt;Text className={cn(\n          'font-medium',\n          {\n            'text-white': variant === 'primary',\n            'text-gray-800': variant === 'secondary',\n            'text-gray-600': variant === 'outline',\n            'text-sm': size === 'sm',\n            'text-base': size === 'md',\n            'text-lg': size === 'lg',\n          }\n        )}&gt;\n        {children}\n      &lt;/Text&gt;\n    &lt;/Pressable&gt;\n  );\n}\n</code></pre>"},{"location":"setup/project-structure/#hooks-directory","title":"Hooks Directory","text":""},{"location":"setup/project-structure/#custom-hooks-organization","title":"Custom Hooks Organization","text":"<pre><code>hooks/\n\u251c\u2500\u2500 useAuth.ts                          # Authentication hook\n\u251c\u2500\u2500 useApi.ts                           # API request hook\n\u251c\u2500\u2500 useStorage.ts                       # Local storage hook\n\u251c\u2500\u2500 usePermissions.ts                   # Device permissions\n\u251c\u2500\u2500 useNetworkStatus.ts                 # Network connectivity\n\u251c\u2500\u2500 useAppState.ts                      # App state changes\n\u2514\u2500\u2500 index.ts                            # Export all hooks\n</code></pre>"},{"location":"setup/project-structure/#hook-example","title":"Hook Example","text":"<pre><code>// hooks/useAuth.ts\nimport { useContext } from 'react';\nimport { AuthContext } from '@/lib/auth/AuthProvider';\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n\n  return context;\n}\n\n// Usage\nconst { user, login, logout, isLoading } = useAuth();\n</code></pre>"},{"location":"setup/project-structure/#lib-directory","title":"Lib Directory","text":""},{"location":"setup/project-structure/#library-organization","title":"Library Organization","text":"<pre><code>lib/\n\u251c\u2500\u2500 api/                                # API configuration\n\u2502   \u251c\u2500\u2500 client.ts                       # HTTP client setup\n\u2502   \u251c\u2500\u2500 endpoints.ts                    # API endpoints\n\u2502   \u251c\u2500\u2500 types.ts                        # API types\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 auth/                               # Authentication\n\u2502   \u251c\u2500\u2500 AuthProvider.tsx                # Auth context\n\u2502   \u251c\u2500\u2500 storage.ts                      # Token storage\n\u2502   \u251c\u2500\u2500 types.ts                        # Auth types\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 storage/                            # Local storage\n\u2502   \u251c\u2500\u2500 mmkv.ts                         # MMKV storage\n\u2502   \u251c\u2500\u2500 secure.ts                       # Secure storage\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 utils/                              # Utility functions\n\u2502   \u251c\u2500\u2500 cn.ts                           # Class name utility\n\u2502   \u251c\u2500\u2500 format.ts                       # Formatting utilities\n\u2502   \u251c\u2500\u2500 validation.ts                   # Validation schemas\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 constants/                          # App constants\n    \u251c\u2500\u2500 colors.ts\n    \u251c\u2500\u2500 spacing.ts\n    \u251c\u2500\u2500 typography.ts\n    \u2514\u2500\u2500 index.ts\n</code></pre>"},{"location":"setup/project-structure/#store-directory-state-management","title":"Store Directory (State Management)","text":""},{"location":"setup/project-structure/#zustand-store-structure","title":"Zustand Store Structure","text":"<pre><code>store/\n\u251c\u2500\u2500 slices/                             # State slices\n\u2502   \u251c\u2500\u2500 authSlice.ts\n\u2502   \u251c\u2500\u2500 userSlice.ts\n\u2502   \u251c\u2500\u2500 settingsSlice.ts\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 providers/                          # Context providers\n\u2502   \u251c\u2500\u2500 ThemeProvider.tsx\n\u2502   \u251c\u2500\u2500 NotificationProvider.tsx\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 index.ts                            # Main store\n</code></pre>"},{"location":"setup/project-structure/#store-example","title":"Store Example","text":"<pre><code>// store/slices/authSlice.ts\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  login: (user: User, token: string) =&gt; void;\n  logout: () =&gt; void;\n}\n\nexport const useAuthStore = create&lt;AuthState&gt;()(\n  persist(\n    set =&gt; ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      login: (user, token) =&gt; set({ user, token, isAuthenticated: true }),\n      logout: () =&gt; set({ user: null, token: null, isAuthenticated: false }),\n    }),\n    {\n      name: 'auth-storage',\n    }\n  )\n);\n</code></pre>"},{"location":"setup/project-structure/#testing-structure","title":"Testing Structure","text":""},{"location":"setup/project-structure/#test-organization","title":"Test Organization","text":"<pre><code>__tests__/\n\u251c\u2500\u2500 components/                         # Component tests\n\u2502   \u251c\u2500\u2500 ui/\n\u2502   \u2502   \u251c\u2500\u2500 Button.test.tsx\n\u2502   \u2502   \u2514\u2500\u2500 Input.test.tsx\n\u2502   \u2514\u2500\u2500 forms/\n\u251c\u2500\u2500 hooks/                              # Hook tests\n\u2502   \u251c\u2500\u2500 useAuth.test.ts\n\u2502   \u2514\u2500\u2500 useApi.test.ts\n\u251c\u2500\u2500 utils/                              # Utility tests\n\u2502   \u251c\u2500\u2500 format.test.ts\n\u2502   \u2514\u2500\u2500 validation.test.ts\n\u251c\u2500\u2500 e2e/                                # End-to-end tests\n\u2502   \u251c\u2500\u2500 auth.e2e.ts\n\u2502   \u2514\u2500\u2500 navigation.e2e.ts\n\u2514\u2500\u2500 setup.ts                            # Test setup\n</code></pre>"},{"location":"setup/project-structure/#configuration-files","title":"Configuration Files","text":""},{"location":"setup/project-structure/#essential-configuration-files","title":"Essential Configuration Files","text":""},{"location":"setup/project-structure/#configuration-files_1","title":"Configuration Files","text":""},{"location":"setup/project-structure/#path-aliases-configuration","title":"Path Aliases Configuration","text":"<p>Phase 1 &amp; 2: Flat/Domain Structure (<code>tsconfig.json</code>):</p> <pre><code>{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"@/components/*\": [\"./components/*\"],\n      \"@/hooks/*\": [\"./hooks/*\"],\n      \"@/lib/*\": [\"./lib/*\"],\n      \"@/store/*\": [\"./store/*\"],\n      \"@/features/*\": [\"./features/*\"],\n      \"@/shared/*\": [\"./shared/*\"]\n    }\n  },\n  \"include\": [\"**/*.ts\", \"**/*.tsx\", \".expo/types/**/*.ts\", \"expo-env.d.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre> <p>Phase 3: Feature-Based Structure (<code>tsconfig.json</code>):</p> <pre><code>{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@/features/*\": [\"./src/features/*\"],\n      \"@/shared/*\": [\"./src/shared/*\"],\n      \"@/app/*\": [\"./src/app/*\"],\n      \"@/lib/*\": [\"./lib/*\"]\n    }\n  },\n  \"include\": [\"**/*.ts\", \"**/*.tsx\", \".expo/types/**/*.ts\", \"expo-env.d.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre> <p>Babel Configuration (<code>babel.config.js</code>):</p> <pre><code>module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }]],\n    plugins: [\n      'react-native-reanimated/plugin',\n      [\n        'module-resolver',\n        {\n          root: ['./'],\n          alias: {\n            // Phase 1 &amp; 2: Flat/Domain Structure\n            '@': './',\n            '@/components': './components',\n            '@/hooks': './hooks',\n            '@/lib': './lib',\n            '@/store': './store',\n            '@/features': './features',\n            '@/shared': './shared',\n\n            // Phase 3: Feature-Based Structure (uncomment when migrating)\n            // '@': './src',\n            // '@/features': './src/features',\n            // '@/shared': './src/shared',\n            // '@/app': './src/app',\n            // '@/lib': './lib',\n          },\n        },\n      ],\n    ],\n  };\n};\n</code></pre>"},{"location":"setup/project-structure/#migration-guide","title":"Migration Guide","text":""},{"location":"setup/project-structure/#phase-1-phase-2-migration","title":"\ud83d\udd04 Phase 1 \u2192 Phase 2 Migration","text":"<ol> <li> <p>Create feature directories:    <pre><code>mkdir -p features/{auth,profile,feed}\n</code></pre></p> </li> <li> <p>Move related components:    <pre><code># Move auth-related components\nmv components/LoginForm features/auth/components/\nmv hooks/useAuth.ts features/auth/hooks/\n</code></pre></p> </li> <li> <p>Update imports to use new paths</p> </li> <li>Create shared directory for common components</li> </ol>"},{"location":"setup/project-structure/#phase-2-phase-3-migration","title":"\ud83d\udd04 Phase 2 \u2192 Phase 3 Migration","text":"<ol> <li> <p>Create src directory:    <pre><code>mkdir src\nmv features src/\nmv shared src/\n</code></pre></p> </li> <li> <p>Update path aliases in <code>tsconfig.json</code> and <code>babel.config.js</code></p> </li> <li>Update all imports to use new <code>@/</code> paths</li> <li>Move app-level config to <code>src/app/</code></li> </ol>"},{"location":"setup/project-structure/#best-practices","title":"Best Practices","text":""},{"location":"setup/project-structure/#1-naming-conventions","title":"1. Naming Conventions","text":"<ul> <li>Files: Use kebab-case for files (<code>user-profile.tsx</code>)</li> <li>Components: Use PascalCase (<code>UserProfile</code>)</li> <li>Hooks: Use camelCase with \"use\" prefix (<code>useUserProfile</code>)</li> <li>Constants: Use UPPER_SNAKE_CASE (<code>API_BASE_URL</code>)</li> <li>Features: Use kebab-case (<code>user-profile</code>, <code>social-feed</code>)</li> </ul>"},{"location":"setup/project-structure/#2-import-organization","title":"2. Import Organization","text":"<pre><code>// 1. React and React Native imports\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\n// 2. Third-party library imports\nimport { useQuery } from '@tanstack/react-query';\n\n// 3. Internal imports (absolute paths)\nimport { Button } from '@/components/ui';\nimport { useAuth } from '@/hooks';\n// or for feature-based:\nimport { useAuth } from '@/features/auth';\n\n// 4. Relative imports\nimport './styles.css';\n</code></pre>"},{"location":"setup/project-structure/#3-component-structure","title":"3. Component Structure","text":"<pre><code>// 1. Imports\n// 2. Types/Interfaces\n// 3. Component definition\n// 4. Styles (if using StyleSheet)\n// 5. Default export\n</code></pre>"},{"location":"setup/project-structure/#4-file-organization-rules","title":"4. File Organization Rules","text":"<ul> <li>One component per file</li> <li>Co-locate related files (component, test, styles)</li> <li>Use index.ts files for clean imports</li> <li>Group by feature, not by file type</li> <li>Keep shared code truly shared</li> </ul>"},{"location":"setup/project-structure/#5-when-to-migrate","title":"5. When to Migrate","text":"<p>Migrate to Phase 2 when: - You have 10+ screens - Multiple developers working on different features - Merge conflicts become frequent - Components are becoming feature-specific</p> <p>Migrate to Phase 3 when: - You have 30+ screens - Large development team (5+ developers) - Complex business logic - Need clear feature ownership</p>"},{"location":"setup/project-structure/#decision-matrix","title":"Decision Matrix","text":"Project Size Team Size Complexity Recommended Phase 1-10 screens 1-2 devs Simple Phase 1 (Flat) 10-30 screens 2-5 devs Medium Phase 2 (Domain) 30+ screens 5+ devs Complex Phase 3 (Feature-based)"},{"location":"setup/project-structure/#next-steps","title":"Next Steps","text":"<ol> <li>Assess your current project using the decision matrix</li> <li>Choose the appropriate phase for your project size and team</li> <li>Set up path aliases according to your chosen phase</li> <li>Create your project structure following the templates</li> <li>Plan migration path for future growth</li> </ol> <p>Pro Tip: Start simple and evolve progressively. Each phase builds upon the previous one, making migration straightforward when the time comes.</p>"},{"location":"tools/code-quality/","title":"Code Quality","text":"<p>Comprehensive guide to maintaining high code quality in React Native applications through linting, formatting, and automated quality checks.</p>"},{"location":"tools/code-quality/#code-quality-tools-overview","title":"Code Quality Tools Overview","text":"graph TB     A[Code Quality] --&gt; B[Linting]     A --&gt; C[Formatting]     A --&gt; D[Type Checking]     A --&gt; E[Code Analysis]      B --&gt; B1[ESLint]     B --&gt; B2[React Hooks Rules]     B --&gt; B3[React Native Rules]      C --&gt; C1[Prettier]     C --&gt; C2[EditorConfig]      D --&gt; D1[TypeScript]     D --&gt; D2[Type Coverage]      E --&gt; E1[SonarQube]     E --&gt; E2[CodeClimate]     E --&gt; E3[Husky Hooks]"},{"location":"tools/code-quality/#eslint-configuration","title":"ESLint Configuration","text":""},{"location":"tools/code-quality/#installation","title":"Installation","text":"<pre><code>npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\nnpm install --save-dev eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-native\nnpm install --save-dev eslint-plugin-import eslint-plugin-jsx-a11y\n</code></pre>"},{"location":"tools/code-quality/#configuration","title":"Configuration","text":"<pre><code>// eslint.config.js\nimport js from '@eslint/js';\nimport typescript from '@typescript-eslint/eslint-plugin';\nimport typescriptParser from '@typescript-eslint/parser';\nimport react from 'eslint-plugin-react';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactNative from 'eslint-plugin-react-native';\nimport importPlugin from 'eslint-plugin-import';\n\nexport default [\n  js.configs.recommended,\n  {\n    files: ['**/*.{js,jsx,ts,tsx}'],\n    languageOptions: {\n      parser: typescriptParser,\n      parserOptions: {\n        ecmaVersion: 2022,\n        sourceType: 'module',\n        ecmaFeatures: {\n          jsx: true,\n        },\n      },\n    },\n    plugins: {\n      '@typescript-eslint': typescript,\n      react,\n      'react-hooks': reactHooks,\n      'react-native': reactNative,\n      import: importPlugin,\n    },\n    rules: {\n      // TypeScript rules\n      '@typescript-eslint/no-unused-vars': 'error',\n      '@typescript-eslint/no-explicit-any': 'warn',\n      '@typescript-eslint/explicit-function-return-type': 'off',\n      '@typescript-eslint/explicit-module-boundary-types': 'off',\n      '@typescript-eslint/no-non-null-assertion': 'warn',\n\n      // React rules\n      'react/jsx-uses-react': 'off',\n      'react/react-in-jsx-scope': 'off',\n      'react/prop-types': 'off',\n      'react/jsx-props-no-spreading': 'off',\n      'react/require-default-props': 'off',\n\n      // React Hooks rules\n      'react-hooks/rules-of-hooks': 'error',\n      'react-hooks/exhaustive-deps': 'warn',\n\n      // React Native rules\n      'react-native/no-unused-styles': 'error',\n      'react-native/split-platform-components': 'error',\n      'react-native/no-inline-styles': 'warn',\n      'react-native/no-color-literals': 'warn',\n      'react-native/no-raw-text': 'off',\n\n      // Import rules\n      'import/order': [\n        'error',\n        {\n          groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],\n          'newlines-between': 'always',\n          alphabetize: {\n            order: 'asc',\n            caseInsensitive: true,\n          },\n        },\n      ],\n      'import/no-unresolved': 'error',\n      'import/no-cycle': 'error',\n\n      // General rules\n      'no-console': 'warn',\n      'no-debugger': 'error',\n      'prefer-const': 'error',\n      'no-var': 'error',\n    },\n    settings: {\n      react: {\n        version: 'detect',\n      },\n      'import/resolver': {\n        typescript: {\n          alwaysTryTypes: true,\n        },\n      },\n    },\n  },\n];\n</code></pre>"},{"location":"tools/code-quality/#custom-rules","title":"Custom Rules","text":"<pre><code>// eslint-rules/no-hardcoded-strings.js\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow hardcoded strings in components',\n    },\n    schema: [],\n  },\n  create(context) {\n    return {\n      JSXText(node) {\n        const text = node.value.trim();\n        if (text &amp;&amp; !/^[A-Z_][A-Z0-9_]*$/.test(text)) {\n          context.report({\n            node,\n            message: 'Avoid hardcoded strings. Use i18n or constants.',\n          });\n        }\n      },\n    };\n  },\n};\n</code></pre>"},{"location":"tools/code-quality/#prettier-configuration","title":"Prettier Configuration","text":""},{"location":"tools/code-quality/#installation_1","title":"Installation","text":"<pre><code>npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier\n</code></pre>"},{"location":"tools/code-quality/#configuration_1","title":"Configuration","text":"<pre><code>// .prettierrc\n{\n  \"semi\": true,\n  \"trailingComma\": \"es5\",\n  \"singleQuote\": true,\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"bracketSpacing\": true,\n  \"bracketSameLine\": false,\n  \"arrowParens\": \"avoid\",\n  \"endOfLine\": \"lf\"\n}\n</code></pre> <pre><code>// .prettierignore\nnode_modules/\nbuild/\ndist/\ncoverage/\n*.min.js\n*.bundle.js\n</code></pre>"},{"location":"tools/code-quality/#typescript-configuration","title":"TypeScript Configuration","text":""},{"location":"tools/code-quality/#strict-configuration","title":"Strict Configuration","text":"<pre><code>// tsconfig.json\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noImplicitOverride\": true,\n    \"allowUnusedLabels\": false,\n    \"allowUnreachableCode\": false,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@/components/*\": [\"./src/components/*\"],\n      \"@/hooks/*\": [\"./src/hooks/*\"],\n      \"@/utils/*\": [\"./src/utils/*\"],\n      \"@/types/*\": [\"./src/types/*\"]\n    }\n  },\n  \"include\": [\"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\", \"babel.config.js\", \"metro.config.js\", \"jest.config.js\"]\n}\n</code></pre>"},{"location":"tools/code-quality/#type-definitions","title":"Type Definitions","text":"<pre><code>// types/global.d.ts\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList {\n      Home: undefined;\n      Profile: { userId: string };\n      Settings: undefined;\n    }\n  }\n}\n\n// types/api.ts\nexport interface ApiResponse&lt;T&gt; {\n  data: T;\n  status: 'success' | 'error';\n  message?: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface PaginatedResponse&lt;T&gt; {\n  items: T[];\n  total: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n</code></pre>"},{"location":"tools/code-quality/#git-hooks-with-husky","title":"Git Hooks with Husky","text":""},{"location":"tools/code-quality/#installation_2","title":"Installation","text":"<pre><code>npm install --save-dev husky lint-staged\nnpx husky install\n</code></pre>"},{"location":"tools/code-quality/#configuration_2","title":"Configuration","text":"<pre><code>// package.json\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\",\n    \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx\",\n    \"lint:fix\": \"eslint . --ext .js,.jsx,.ts,.tsx --fix\",\n    \"format\": \"prettier --write .\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\"eslint --fix\", \"prettier --write\"],\n    \"*.{json,md,yml,yaml}\": [\"prettier --write\"]\n  }\n}\n</code></pre> <pre><code># .husky/pre-commit\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx lint-staged\nnpm run type-check\n</code></pre> <pre><code># .husky/commit-msg\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx commitlint --edit $1\n</code></pre>"},{"location":"tools/code-quality/#commit-message-standards","title":"Commit Message Standards","text":""},{"location":"tools/code-quality/#commitlint-configuration","title":"Commitlint Configuration","text":"<pre><code>npm install --save-dev @commitlint/cli @commitlint/config-conventional\n</code></pre> <pre><code>// commitlint.config.js\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat', // New feature\n        'fix', // Bug fix\n        'docs', // Documentation\n        'style', // Formatting\n        'refactor', // Code refactoring\n        'perf', // Performance improvement\n        'test', // Adding tests\n        'chore', // Maintenance\n        'ci', // CI/CD changes\n        'build', // Build system changes\n      ],\n    ],\n    'subject-case': [2, 'never', ['start-case', 'pascal-case', 'upper-case']],\n    'subject-max-length': [2, 'always', 72],\n    'body-max-line-length': [2, 'always', 100],\n  },\n};\n</code></pre>"},{"location":"tools/code-quality/#commit-message-examples","title":"Commit Message Examples","text":"<pre><code># Good commit messages\nfeat: add user authentication with biometric support\nfix: resolve crash when loading large images\ndocs: update API documentation for user endpoints\nrefactor: extract common validation logic to utils\nperf: optimize FlatList rendering for large datasets\ntest: add unit tests for user service\nchore: update dependencies to latest versions\n\n# Bad commit messages\nfix: bug\nupdate stuff\nWIP\nasdf\n</code></pre>"},{"location":"tools/code-quality/#code-analysis-tools","title":"Code Analysis Tools","text":""},{"location":"tools/code-quality/#sonarqube-integration","title":"SonarQube Integration","text":"<pre><code># Sonar-project.properties\nsonar.projectKey=my-react-native-app\nsonar.projectName=My React Native App\nsonar.projectVersion=1.0\nsonar.sources=src\nsonar.tests=__tests__\nsonar.test.inclusions=**/*.test.ts,**/*.test.tsx\nsonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.stories.tsx\nsonar.javascript.lcov.reportPaths=coverage/lcov.info\nsonar.typescript.lcov.reportPaths=coverage/lcov.info\n</code></pre>"},{"location":"tools/code-quality/#bundle-analysis","title":"Bundle Analysis","text":"<pre><code># Install bundle analyzer\nnpm install --save-dev @react-native-community/cli-plugin-metro\n\n# Analyze bundle\nnpx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android-bundle.js --assets-dest android-assets\nnpx react-native-bundle-visualizer\n</code></pre>"},{"location":"tools/code-quality/#code-metrics","title":"Code Metrics","text":""},{"location":"tools/code-quality/#complexity-analysis","title":"Complexity Analysis","text":"<pre><code>// .eslintrc.js - Add complexity rules\nmodule.exports = {\n  rules: {\n    complexity: ['error', { max: 10 }],\n    'max-depth': ['error', { max: 4 }],\n    'max-lines': ['error', { max: 300, skipBlankLines: true }],\n    'max-lines-per-function': ['error', { max: 50, skipBlankLines: true }],\n    'max-params': ['error', { max: 4 }],\n  },\n};\n</code></pre>"},{"location":"tools/code-quality/#custom-metrics-script","title":"Custom Metrics Script","text":"<pre><code>// scripts/analyze-code.js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction analyzeCodebase() {\n  const metrics = {\n    totalFiles: 0,\n    totalLines: 0,\n    componentFiles: 0,\n    hookFiles: 0,\n    testFiles: 0,\n    averageFileSize: 0,\n  };\n\n  function analyzeDirectory(dir) {\n    const files = fs.readdirSync(dir);\n\n    files.forEach(file =&gt; {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n\n      if (stat.isDirectory() &amp;&amp; !file.startsWith('.') &amp;&amp; file !== 'node_modules') {\n        analyzeDirectory(filePath);\n      } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {\n        metrics.totalFiles++;\n\n        const content = fs.readFileSync(filePath, 'utf8');\n        const lines = content.split('\\n').length;\n        metrics.totalLines += lines;\n\n        if (file.includes('.test.') || file.includes('.spec.')) {\n          metrics.testFiles++;\n        } else if (file.startsWith('use') &amp;&amp; file.endsWith('.ts')) {\n          metrics.hookFiles++;\n        } else if (file.endsWith('.tsx')) {\n          metrics.componentFiles++;\n        }\n      }\n    });\n  }\n\n  analyzeDirectory('./src');\n\n  metrics.averageFileSize = Math.round(metrics.totalLines / metrics.totalFiles);\n\n  console.log('Codebase Metrics:');\n  console.log(`Total Files: ${metrics.totalFiles}`);\n  console.log(`Total Lines: ${metrics.totalLines}`);\n  console.log(`Component Files: ${metrics.componentFiles}`);\n  console.log(`Hook Files: ${metrics.hookFiles}`);\n  console.log(`Test Files: ${metrics.testFiles}`);\n  console.log(`Average File Size: ${metrics.averageFileSize} lines`);\n  console.log(\n    `Test Coverage: ${((metrics.testFiles / (metrics.totalFiles - metrics.testFiles)) * 100).toFixed(1)}%`\n  );\n}\n\nanalyzeCodebase();\n</code></pre>"},{"location":"tools/code-quality/#documentation-standards","title":"Documentation Standards","text":""},{"location":"tools/code-quality/#jsdoc-configuration","title":"JSDoc Configuration","text":"<pre><code>// components/Button.tsx\n/**\n * A reusable button component with multiple variants and states\n *\n * @example\n * ```tsx\n * &lt;Button variant=\"primary\" onPress={handlePress}&gt;\n * Click me\n * &lt;/Button&gt;\n * ```\n */\ninterface ButtonProps {\n  /** Button content */\n  children: React.ReactNode;\n  /** Visual variant of the button */\n  variant?: 'primary' | 'secondary' | 'outline';\n  /** Size of the button */\n  size?: 'sm' | 'md' | 'lg';\n  /** Whether the button is in loading state */\n  loading?: boolean;\n  /** Callback fired when button is pressed */\n  onPress?: () =&gt; void;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Button component with consistent styling and behavior\n */\nexport function Button({\n  children,\n  variant = 'primary',\n  size = 'md',\n  loading = false,\n  onPress,\n  className,\n  ...props\n}: ButtonProps) {\n  // Implementation\n}\n</code></pre>"},{"location":"tools/code-quality/#readme-templates","title":"README Templates","text":"<pre><code># Component Name\n\nBrief description of what this component does.\n\n## Usage\n\n```tsx\nimport { ComponentName } from './ComponentName';\n\nfunction Example() {\n  return &lt;ComponentName prop1=\"value1\" prop2=\"value2\" /&gt;;\n}\n```\n</code></pre>"},{"location":"tools/code-quality/#props","title":"Props","text":"Prop Type Default Description prop1 string - Description of prop1 prop2 boolean false Description of prop2"},{"location":"tools/code-quality/#examples","title":"Examples","text":""},{"location":"tools/code-quality/#basic-usage","title":"Basic Usage","text":"<p>[Example code]</p>"},{"location":"tools/code-quality/#advanced-usage","title":"Advanced Usage","text":"<p>[Example code]</p>"},{"location":"tools/code-quality/#accessibility","title":"Accessibility","text":"<ul> <li>Supports screen readers</li> <li>Keyboard navigation</li> <li>High contrast mode</li> </ul>"},{"location":"tools/code-quality/#testing","title":"Testing","text":"<pre><code>npm test ComponentName\n</code></pre> <pre><code>## CI/CD Integration\n\n### GitHub Actions Workflow\n\n```yaml\n# .github/workflows/quality.yml\nname: Code Quality\non: [push, pull_request]\n\njobs:\nquality:\nruns-on: ubuntu-latest\nsteps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-node@v3\nwith:\nnode-version: '18'\ncache: 'npm'\n\n  - run: npm ci\n\n  - name: Lint\nrun: npm run lint\n\n  - name: Type Check\nrun: npm run type-check\n\n  - name: Format Check\nrun: npm run format:check\n\n  - name: Test\nrun: npm test -- --coverage\n\n  - name: SonarCloud Scan\nuses: SonarSource/sonarcloud-github-action@master\nenv:\nGITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\nSONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n    ````\n\n## Best Practices\n\n### 1. Consistent Code Style\n\n    ```typescript\n    // Use consistent naming conventions\n    const UserProfile = () =&gt; {}; // PascalCase for components\n    const useUserData = () =&gt; {}; // camelCase for hooks\n    const API_BASE_URL = ''; // UPPER_SNAKE_CASE for constants\n\n    // Use meaningful variable names\n    const isUserAuthenticated = checkAuth(); // Not: const auth = checkAuth();\n    const userProfileData = fetchProfile(); // Not: const data = fetchProfile();\n```\n\n### 2. Error Handling\n\n```typescript\n// Always handle errors explicitly\ntry {\n  const data = await fetchUserData();\n  return data;\n} catch (error) {\n  logger.error('Failed to fetch user data', error);\n  throw new Error('Unable to load user information');\n}\n\n// Use type-safe error handling\ntype Result&lt;T, E = Error&gt; = { success: true; data: T } | { success: false; error: E };\n\nasync function safeApiCall&lt;T&gt;(fn: () =&gt; Promise&lt;T&gt;): Promise&lt;Result&lt;T&gt;&gt; {\n  try {\n    const data = await fn();\n    return { success: true, data };\n  } catch (error) {\n    return { success: false, error: error as Error };\n  }\n}\n```\n\n### 3. Performance Considerations\n\n```typescript\n// Use React.memo for expensive components\nconst ExpensiveComponent = React.memo(({ data }) =&gt; {\n  const processedData = useMemo(() =&gt; {\n    return expensiveCalculation(data);\n  }, [data]);\n\n  return &lt;View&gt;{/* Render processed data */}&lt;/View&gt;;\n});\n\n// Use useCallback for event handlers\nconst handlePress = useCallback(() =&gt; {\n  onPress?.(item.id);\n}, [onPress, item.id]);\n```\n\n## Next Steps\n\n1. Set up ESLint and Prettier with your preferred configuration\n2. Configure TypeScript with strict mode enabled\n3. Add Git hooks for automated quality checks\n4. Integrate code analysis tools into your CI/CD pipeline\n5. Establish documentation standards for your team\n6. Monitor code metrics and maintain quality standards\n\n---\n\n**Pro Tip**: Start with basic linting and formatting, then gradually add more sophisticated quality checks. Consistency is more important than perfection - establish rules that your team can follow consistently.\n</code></pre>"},{"location":"tools/debugging/","title":"Debugging","text":"<p>Comprehensive guide to debugging React Native applications using modern tools and techniques.</p>"},{"location":"tools/debugging/#debugging-tools-overview","title":"Debugging Tools Overview","text":"graph TB     A[React Native Debugging] --&gt; B[Development Tools]     A --&gt; C[Production Debugging]     A --&gt; D[Performance Debugging]      B --&gt; B1[Metro Bundler]     B --&gt; B2[React DevTools]     B --&gt; B3[Flipper]     B --&gt; B4[Chrome DevTools]      C --&gt; C1[Crash Reporting]     C --&gt; C2[Remote Logging]     C --&gt; C3[Error Boundaries]      D --&gt; D1[Performance Monitor]     D --&gt; D2[Memory Profiler]     D --&gt; D3[Network Inspector]"},{"location":"tools/debugging/#development-environment-debugging","title":"Development Environment Debugging","text":""},{"location":"tools/debugging/#metro-bundler","title":"Metro Bundler","text":"<pre><code># Start with debugging options\nnpx react-native start --reset-cache\n\n# Enable verbose logging\nDEBUG=metro* npx react-native start\n\n# Custom Metro configuration\n# Metro.config.js\nmodule.exports = {\nresolver: {\n    sourceExts: ['js', 'jsx', 'ts', 'tsx', 'json'],\n  },\ntransformer: {\n    getTransformOptions: async () =&gt; ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n};\n</code></pre>"},{"location":"tools/debugging/#react-devtools","title":"React DevTools","text":"<pre><code># Install React DevTools\nnpm install -g react-devtools\n\n# Start React DevTools\nreact-devtools\n\n# In your app, enable DevTools\nimport { connectToDevTools } from 'react-devtools-core';\n\nif (__DEV__) {\nconnectToDevTools({\n    host: 'localhost',\n    port: 8097,\n  });\n}\n</code></pre>"},{"location":"tools/debugging/#chrome-devtools-integration","title":"Chrome DevTools Integration","text":"<pre><code>// Enable Chrome debugging\n// In development, shake device or press Cmd+D (iOS) / Cmd+M (Android)\n// Select \"Debug with Chrome\"\n\n// Console logging with context\nconsole.log('User action:', { userId, action, timestamp: Date.now() });\n\n// Network debugging\nfetch('https://api.example.com/users')\n  .then(response =&gt; {\n    console.log('Response status:', response.status);\n    return response.json();\n  })\n  .then(data =&gt; console.log('Response data:', data))\n  .catch(error =&gt; console.error('Network error:', error));\n\n// Performance timing\nconsole.time('expensive-operation');\nperformExpensiveOperation();\nconsole.timeEnd('expensive-operation');\n</code></pre>"},{"location":"tools/debugging/#flipper-integration","title":"Flipper Integration","text":""},{"location":"tools/debugging/#setup","title":"Setup","text":"<pre><code># Install Flipper desktop app\n# Download from https://fbflipper.com/\n\n# For React Native 0.62+, Flipper is included by default\n# For older versions, install manually:\nnpm install --save-dev react-native-flipper\n</code></pre>"},{"location":"tools/debugging/#custom-flipper-plugins","title":"Custom Flipper Plugins","text":"<pre><code>// utils/flipperLogger.ts\nimport { logger } from 'react-native-logs';\n\nconst flipperTransport = logger.createFlipperTransport();\n\nexport const log = logger.createLogger({\n  severity: __DEV__ ? 'debug' : 'error',\n  transport: __DEV__ ? [flipperTransport] : [],\n});\n\n// Usage throughout app\nlog.debug('User logged in', { userId: user.id });\nlog.error('API call failed', { endpoint, error });\n</code></pre>"},{"location":"tools/debugging/#network-debugging-with-flipper","title":"Network Debugging with Flipper","text":"<pre><code>// Network interceptor for Flipper\nimport { NetworkingModule } from 'react-native';\n\nif (__DEV__) {\n  const originalFetch = global.fetch;\n  global.fetch = function (url, options) {\n    console.log('Fetch request:', { url, options });\n\n    return originalFetch(url, options)\n      .then(response =&gt; {\n        console.log('Fetch response:', {\n          url,\n          status: response.status,\n          headers: response.headers,\n        });\n        return response;\n      })\n      .catch(error =&gt; {\n        console.error('Fetch error:', { url, error });\n        throw error;\n      });\n  };\n}\n</code></pre>"},{"location":"tools/debugging/#error-handling-and-logging","title":"Error Handling and Logging","text":""},{"location":"tools/debugging/#error-boundaries","title":"Error Boundaries","text":"<pre><code>// components/ErrorBoundary.tsx\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport class ErrorBoundary extends React.Component&lt;\nReact.PropsWithChildren&lt;{}&gt;,\nErrorBoundaryState\n&gt; {\n  constructor(props: React.PropsWithChildren&lt;{}&gt;) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    this.setState({ errorInfo });\n\n// Log to crash reporting service\n    crashlytics().recordError(error);\n\n// Log detailed error info\n    console.error('Error Boundary caught an error:', {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;View className=\"flex-1 items-center justify-center p-4\"&gt;\n          &lt;Text className=\"text-lg font-semibold mb-2\"&gt;\n            Something went wrong\n          &lt;/Text&gt;\n          &lt;Text className=\"text-gray-600 text-center mb-4\"&gt;\n            {this.state.error?.message}\n          &lt;/Text&gt;\n          &lt;Button onPress={() =&gt; this.setState({ hasError: false })}&gt;\n            Try Again\n          &lt;/Button&gt;\n        &lt;/View&gt;\n      );\n    }\n\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"tools/debugging/#global-error-handler","title":"Global Error Handler","text":"<pre><code>// utils/errorHandler.ts\nimport { ErrorUtils } from 'react-native';\n\nconst originalHandler = ErrorUtils.getGlobalHandler();\n\nconst globalErrorHandler = (error: any, isFatal: boolean) =&gt; {\n  console.error('Global error handler:', {\n    error: error.message,\n    stack: error.stack,\n    isFatal,\n  });\n\n  // Log to crash reporting\n  crashlytics().recordError(error);\n\n  // Call original handler\n  originalHandler(error, isFatal);\n};\n\nErrorUtils.setGlobalHandler(globalErrorHandler);\n\n// Promise rejection handler\nconst rejectionHandler = (id: string, error: Error) =&gt; {\n  console.error('Unhandled promise rejection:', {\n    id,\n    error: error.message,\n    stack: error.stack,\n  });\n\n  crashlytics().recordError(error);\n};\n\nrequire('promise/setimmediate/rejection-tracking').enable({\n  allRejections: true,\n  onUnhandled: rejectionHandler,\n});\n</code></pre>"},{"location":"tools/debugging/#custom-logging-system","title":"Custom Logging System","text":"<pre><code>// utils/logger.ts\nenum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\ninterface LogEntry {\n  level: LogLevel;\n  message: string;\n  data?: any;\n  timestamp: number;\n  userId?: string;\n  sessionId: string;\n}\n\nclass Logger {\n  private logs: LogEntry[] = [];\n  private sessionId = Math.random().toString(36);\n  private userId?: string;\n\n  setUserId(userId: string) {\n    this.userId = userId;\n  }\n\n  private log(level: LogLevel, message: string, data?: any) {\n    const entry: LogEntry = {\n      level,\n      message,\n      data,\n      timestamp: Date.now(),\n      userId: this.userId,\n      sessionId: this.sessionId,\n    };\n\n    this.logs.push(entry);\n\n    // Keep only last 1000 logs\n    if (this.logs.length &gt; 1000) {\n      this.logs = this.logs.slice(-1000);\n    }\n\n    // Console output in development\n    if (__DEV__) {\n      const levelName = LogLevel[level];\n      console.log(`[${levelName}] ${message}`, data || '');\n    }\n\n    // Send to remote logging service in production\n    if (!__DEV__ &amp;&amp; level &gt;= LogLevel.ERROR) {\n      this.sendToRemoteLogger(entry);\n    }\n  }\n\n  debug(message: string, data?: any) {\n    this.log(LogLevel.DEBUG, message, data);\n  }\n\n  info(message: string, data?: any) {\n    this.log(LogLevel.INFO, message, data);\n  }\n\n  warn(message: string, data?: any) {\n    this.log(LogLevel.WARN, message, data);\n  }\n\n  error(message: string, data?: any) {\n    this.log(LogLevel.ERROR, message, data);\n  }\n\n  getLogs() {\n    return this.logs;\n  }\n\n  private async sendToRemoteLogger(entry: LogEntry) {\n    try {\n      await fetch('https://api.yourapp.com/logs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(entry),\n      });\n    } catch (error) {\n      // Fail silently to avoid infinite loops\n    }\n  }\n}\n\nexport const logger = new Logger();\n</code></pre>"},{"location":"tools/debugging/#performance-debugging","title":"Performance Debugging","text":""},{"location":"tools/debugging/#performance-monitor","title":"Performance Monitor","text":"<pre><code>// utils/performanceMonitor.ts\nclass PerformanceMonitor {\n  private measurements: Map&lt;string, number&gt; = new Map();\n\n  start(label: string) {\n    this.measurements.set(label, performance.now());\n  }\n\n  end(label: string) {\n    const startTime = this.measurements.get(label);\n    if (startTime) {\n      const duration = performance.now() - startTime;\n      console.log(`Performance [${label}]: ${duration.toFixed(2)}ms`);\n      this.measurements.delete(label);\n      return duration;\n    }\n    return 0;\n  }\n\n  measure&lt;T&gt;(label: string, fn: () =&gt; T): T {\n    this.start(label);\n    const result = fn();\n    this.end(label);\n    return result;\n  }\n\n  async measureAsync&lt;T&gt;(label: string, fn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; {\n    this.start(label);\n    try {\n      const result = await fn();\n      this.end(label);\n      return result;\n    } catch (error) {\n      this.end(label);\n      throw error;\n    }\n  }\n}\n\nexport const perf = new PerformanceMonitor();\n\n// Usage\nperf.start('api-call');\nconst data = await fetchUserData();\nperf.end('api-call');\n\n// Or with wrapper\nconst data = await perf.measureAsync('api-call', () =&gt; fetchUserData());\n</code></pre>"},{"location":"tools/debugging/#memory-debugging","title":"Memory Debugging","text":"<pre><code>// utils/memoryMonitor.ts\nimport { DeviceInfo } from 'react-native';\n\nclass MemoryMonitor {\n  private interval?: NodeJS.Timeout;\n\n  start() {\n    if (__DEV__) {\n      this.interval = setInterval(() =&gt; {\n        this.logMemoryUsage();\n      }, 5000);\n    }\n  }\n\n  stop() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  private async logMemoryUsage() {\n    try {\n      const memoryInfo = await DeviceInfo.getUsedMemory();\n      const totalMemory = await DeviceInfo.getTotalMemory();\n      const usagePercent = (memoryInfo / totalMemory) * 100;\n\n      console.log('Memory Usage:', {\n        used: `${(memoryInfo / 1024 / 1024).toFixed(2)} MB`,\n        total: `${(totalMemory / 1024 / 1024).toFixed(2)} MB`,\n        percentage: `${usagePercent.toFixed(1)}%`,\n      });\n\n      if (usagePercent &gt; 80) {\n        console.warn('High memory usage detected!');\n      }\n    } catch (error) {\n      console.error('Failed to get memory info:', error);\n    }\n  }\n}\n\nexport const memoryMonitor = new MemoryMonitor();\n</code></pre>"},{"location":"tools/debugging/#network-debugging","title":"Network Debugging","text":""},{"location":"tools/debugging/#requestresponse-interceptor","title":"Request/Response Interceptor","text":"<pre><code>// utils/networkDebugger.ts\ninterface NetworkRequest {\n  id: string;\n  url: string;\n  method: string;\n  headers: Record&lt;string, string&gt;;\n  body?: any;\n  timestamp: number;\n}\n\ninterface NetworkResponse {\n  id: string;\n  status: number;\n  headers: Record&lt;string, string&gt;;\n  body?: any;\n  duration: number;\n}\n\nclass NetworkDebugger {\n  private requests: Map&lt;string, NetworkRequest&gt; = new Map();\n  private responses: NetworkResponse[] = [];\n\n  interceptFetch() {\n    const originalFetch = global.fetch;\n\n    global.fetch = async (url: string, options: RequestInit = {}) =&gt; {\n      const id = Math.random().toString(36);\n      const request: NetworkRequest = {\n        id,\n        url,\n        method: options.method || 'GET',\n        headers: (options.headers as Record&lt;string, string&gt;) || {},\n        body: options.body,\n        timestamp: Date.now(),\n      };\n\n      this.requests.set(id, request);\n      console.log('Network Request:', request);\n\n      try {\n        const response = await originalFetch(url, options);\n        const duration = Date.now() - request.timestamp;\n\n        const responseData: NetworkResponse = {\n          id,\n          status: response.status,\n          headers: Object.fromEntries(response.headers.entries()),\n          duration,\n        };\n\n        // Clone response to read body without consuming it\n        const clonedResponse = response.clone();\n        try {\n          responseData.body = await clonedResponse.text();\n        } catch (error) {\n          // Body might not be readable\n        }\n\n        this.responses.push(responseData);\n        console.log('Network Response:', responseData);\n\n        return response;\n      } catch (error) {\n        const duration = Date.now() - request.timestamp;\n        console.error('Network Error:', { id, error, duration });\n        throw error;\n      } finally {\n        this.requests.delete(id);\n      }\n    };\n  }\n\n  getNetworkHistory() {\n    return this.responses;\n  }\n\n  clearHistory() {\n    this.responses = [];\n  }\n}\n\nexport const networkDebugger = new NetworkDebugger();\n\n// Initialize in development\nif (__DEV__) {\n  networkDebugger.interceptFetch();\n}\n</code></pre>"},{"location":"tools/debugging/#debugging-hooks","title":"Debugging Hooks","text":""},{"location":"tools/debugging/#custom-debug-hooks","title":"Custom Debug Hooks","text":"<pre><code>// hooks/useDebug.ts\nexport function useDebug(value: any, label?: string) {\n  const ref = useRef(value);\n\n  useEffect(() =&gt; {\n    if (ref.current !== value) {\n      console.log(`Debug ${label || 'value'} changed:`, {\n        from: ref.current,\n        to: value,\n      });\n      ref.current = value;\n    }\n  });\n}\n\n// hooks/useWhyDidYouUpdate.ts\nexport function useWhyDidYouUpdate(name: string, props: Record&lt;string, any&gt;) {\n  const previousProps = useRef&lt;Record&lt;string, any&gt;&gt;();\n\n  useEffect(() =&gt; {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current, ...props });\n      const changedProps: Record&lt;string, any&gt; = {};\n\n      allKeys.forEach(key =&gt; {\n        if (previousProps.current![key] !== props[key]) {\n          changedProps[key] = {\n            from: previousProps.current![key],\n            to: props[key],\n          };\n        }\n      });\n\n      if (Object.keys(changedProps).length) {\n        console.log('[why-did-you-update]', name, changedProps);\n      }\n    }\n\n    previousProps.current = props;\n  });\n}\n\n// Usage\nfunction MyComponent({ userId, data }) {\n  useDebug(userId, 'userId');\n  useWhyDidYouUpdate('MyComponent', { userId, data });\n\n  return &lt;View&gt;...&lt;/View&gt;;\n}\n</code></pre>"},{"location":"tools/debugging/#production-debugging","title":"Production Debugging","text":""},{"location":"tools/debugging/#remote-debugging-setup","title":"Remote Debugging Setup","text":"<pre><code>// utils/remoteDebugger.ts\nclass RemoteDebugger {\n  private endpoint: string;\n  private apiKey: string;\n\n  constructor(endpoint: string, apiKey: string) {\n    this.endpoint = endpoint;\n    this.apiKey = apiKey;\n  }\n\n  async sendLog(level: string, message: string, data?: any) {\n    if (__DEV__) return;\n\n    try {\n      await fetch(`${this.endpoint}/logs`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify({\n          level,\n          message,\n          data,\n          timestamp: Date.now(),\n          platform: Platform.OS,\n          version: DeviceInfo.getVersion(),\n        }),\n      });\n    } catch (error) {\n      // Fail silently\n    }\n  }\n\n  async sendCrash(error: Error, isFatal: boolean) {\n    await this.sendLog('error', 'App crash', {\n      message: error.message,\n      stack: error.stack,\n      isFatal,\n    });\n  }\n}\n\nexport const remoteDebugger = new RemoteDebugger(\n  process.env.EXPO_PUBLIC_DEBUG_ENDPOINT!,\n  process.env.EXPO_PUBLIC_DEBUG_API_KEY!\n);\n</code></pre>"},{"location":"tools/debugging/#best-practices","title":"Best Practices","text":""},{"location":"tools/debugging/#1-conditional-debugging","title":"1. Conditional Debugging","text":"<pre><code>// Only enable debugging features in development\nconst DEBUG_FEATURES = {\n  networkLogging: __DEV__,\n  performanceMonitoring: __DEV__,\n  memoryTracking: __DEV__,\n  verboseLogging: __DEV__,\n};\n\nif (DEBUG_FEATURES.networkLogging) {\n  networkDebugger.interceptFetch();\n}\n</code></pre>"},{"location":"tools/debugging/#2-debug-menu","title":"2. Debug Menu","text":"<pre><code>// components/DebugMenu.tsx (development only)\nexport function DebugMenu() {\n  if (!__DEV__) return null;\n\n  return (\n    &lt;View className=\"absolute top-10 right-4 bg-black/80 p-2 rounded\"&gt;\n      &lt;Button onPress={() =&gt; logger.getLogs()}&gt;View Logs&lt;/Button&gt;\n      &lt;Button onPress={() =&gt; networkDebugger.getNetworkHistory()}&gt;\n        Network History\n      &lt;/Button&gt;\n      &lt;Button onPress={() =&gt; memoryMonitor.logMemoryUsage()}&gt;\n        Memory Usage\n      &lt;/Button&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"tools/debugging/#3-environment-specific-debugging","title":"3. Environment-Specific Debugging","text":"<pre><code>// Different debug levels for different environments\nconst DEBUG_LEVEL = {\n  development: 'debug',\n  staging: 'info',\n  production: 'error',\n}[process.env.NODE_ENV || 'development'];\n</code></pre>"},{"location":"tools/debugging/#next-steps","title":"Next Steps","text":"<ol> <li>Set up your debugging environment with the appropriate tools</li> <li>Implement error boundaries and global error handling</li> <li>Add performance monitoring for critical app flows</li> <li>Set up remote logging for production debugging</li> <li>Create debugging utilities specific to your app's needs</li> </ol> <p>Pro Tip: Invest time in setting up comprehensive debugging tools early in development. Good debugging infrastructure pays dividends throughout the entire development lifecycle.</p>"},{"location":"tools/performance/","title":"Performance Optimization","text":"<p>Comprehensive guide to optimizing React Native application performance for smooth user experiences across all devices.</p>"},{"location":"tools/performance/#performance-monitoring","title":"Performance Monitoring","text":"graph TB     A[Performance Optimization] --&gt; B[Rendering Performance]     A --&gt; C[Memory Management]     A --&gt; D[Bundle Optimization]     A --&gt; E[Network Performance]      B --&gt; B1[React Profiler]     B --&gt; B2[Flipper Performance]     B --&gt; B3[Frame Rate Monitoring]      C --&gt; C1[Memory Leaks]     C --&gt; C2[Image Optimization]     C --&gt; C3[Cache Management]      D --&gt; D1[Code Splitting]     D --&gt; D2[Tree Shaking]     D --&gt; D3[Bundle Analysis]      E --&gt; E1[API Optimization]     E --&gt; E2[Image Loading]     E --&gt; E3[Offline Caching]"},{"location":"tools/performance/#react-performance-optimization","title":"React Performance Optimization","text":""},{"location":"tools/performance/#component-optimization","title":"Component Optimization","text":"<pre><code>// Use React.memo for expensive components\nconst UserCard = React.memo(({ user, onPress }) =&gt; {\n  return (\n    &lt;Pressable onPress={() =&gt; onPress(user.id)}&gt;\n      &lt;Text&gt;{user.name}&lt;/Text&gt;\n      &lt;Text&gt;{user.email}&lt;/Text&gt;\n    &lt;/Pressable&gt;\n  );\n}, (prevProps, nextProps) =&gt; {\n  // Custom comparison function\n  return (\n    prevProps.user.id === nextProps.user.id &amp;&amp;\n    prevProps.user.name === nextProps.user.name &amp;&amp;\n    prevProps.user.email === nextProps.user.email\n  );\n});\n\n// Use useMemo for expensive calculations\nconst ExpensiveComponent = ({ data }) =&gt; {\n  const processedData = useMemo(() =&gt; {\n    return data\n      .filter(item =&gt; item.active)\n      .map(item =&gt; ({\n        ...item,\n        displayName: `${item.firstName} ${item.lastName}`,\n        score: calculateComplexScore(item),\n      }))\n      .sort((a, b) =&gt; b.score - a.score);\n  }, [data]);\n\n  return (\n    &lt;FlatList\n      data={processedData}\n      renderItem={({ item }) =&gt; &lt;UserCard user={item} /&gt;}\n      keyExtractor={item =&gt; item.id}\n    /&gt;\n  );\n};\n\n// Use useCallback for event handlers\nconst ListComponent = ({ items, onItemPress }) =&gt; {\n  const handleItemPress = useCallback((itemId) =&gt; {\n    onItemPress?.(itemId);\n  }, [onItemPress]);\n\n  const renderItem = useCallback(({ item }) =&gt; (\n    &lt;UserCard user={item} onPress={handleItemPress} /&gt;\n  ), [handleItemPress]);\n\n  return (\n    &lt;FlatList\n      data={items}\n      renderItem={renderItem}\n      keyExtractor={item =&gt; item.id}\n      removeClippedSubviews={true}\n      maxToRenderPerBatch={10}\n      windowSize={10}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"tools/performance/#list-performance","title":"List Performance","text":"<pre><code>// Optimized FlatList configuration\nconst OptimizedList = ({ data }) =&gt; {\n  const renderItem = useCallback(({ item, index }) =&gt; (\n    &lt;ListItem item={item} index={index} /&gt;\n  ), []);\n\n  const getItemLayout = useCallback((data, index) =&gt; ({\n    length: ITEM_HEIGHT,\n    offset: ITEM_HEIGHT * index,\n    index,\n  }), []);\n\n  const keyExtractor = useCallback((item) =&gt; item.id, []);\n\n  return (\n    &lt;FlatList\n      data={data}\n      renderItem={renderItem}\n      keyExtractor={keyExtractor}\n      getItemLayout={getItemLayout}\n      removeClippedSubviews={true}\n      maxToRenderPerBatch={10}\n      updateCellsBatchingPeriod={50}\n      initialNumToRender={10}\n      windowSize={10}\n      legacyImplementation={false}\n    /&gt;\n  );\n};\n\n// Virtual list for very large datasets\nimport { VirtualizedList } from 'react-native';\n\nconst VirtualList = ({ data }) =&gt; {\n  const getItem = (data, index) =&gt; data[index];\n  const getItemCount = (data) =&gt; data.length;\n\n  return (\n    &lt;VirtualizedList\n      data={data}\n      initialNumToRender={4}\n      renderItem={({ item }) =&gt; &lt;ListItem item={item} /&gt;}\n      keyExtractor={(item) =&gt; item.id}\n      getItemCount={getItemCount}\n      getItem={getItem}\n      maxToRenderPerBatch={5}\n      updateCellsBatchingPeriod={30}\n      windowSize={10}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"tools/performance/#image-optimization","title":"Image Optimization","text":""},{"location":"tools/performance/#image-loading-strategies","title":"Image Loading Strategies","text":"<pre><code>// Optimized image component\nimport FastImage from 'react-native-fast-image';\n\nconst OptimizedImage = ({ source, style, ...props }) =&gt; {\n  return (\n    &lt;FastImage\n      source={{\n        uri: source.uri,\n        priority: FastImage.priority.normal,\n        cache: FastImage.cacheControl.immutable,\n      }}\n      style={style}\n      resizeMode={FastImage.resizeMode.cover}\n      {...props}\n    /&gt;\n  );\n};\n\n// Progressive image loading\nconst ProgressiveImage = ({ source, placeholder, style }) =&gt; {\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [imageError, setImageError] = useState(false);\n\n  return (\n    &lt;View style={style}&gt;\n      {!imageLoaded &amp;&amp; !imageError &amp;&amp; (\n        &lt;Image\n          source={placeholder}\n          style={[style, { position: 'absolute' }]}\n          blurRadius={1}\n        /&gt;\n      )}\n      &lt;FastImage\n        source={source}\n        style={style}\n        onLoad={() =&gt; setImageLoaded(true)}\n        onError={() =&gt; setImageError(true)}\n      /&gt;\n    &lt;/View&gt;\n  );\n};\n\n// Image caching utility\nclass ImageCache {\n  private cache = new Map&lt;string, string&gt;();\n\n  async getImage(url: string): Promise&lt;string&gt; {\n    if (this.cache.has(url)) {\n      return this.cache.get(url)!;\n    }\n\n    try {\n      const response = await fetch(url);\n      const blob = await response.blob();\n      const base64 = await this.blobToBase64(blob);\n\n      this.cache.set(url, base64);\n      return base64;\n    } catch (error) {\n      throw new Error(`Failed to cache image: ${url}`);\n    }\n  }\n\n  private blobToBase64(blob: Blob): Promise&lt;string&gt; {\n    return new Promise((resolve, reject) =&gt; {\n      const reader = new FileReader();\n      reader.onload = () =&gt; resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  clearCache() {\n    this.cache.clear();\n  }\n\n  getCacheSize() {\n    return this.cache.size;\n  }\n}\n</code></pre>"},{"location":"tools/performance/#memory-management","title":"Memory Management","text":""},{"location":"tools/performance/#memory-leak-prevention","title":"Memory Leak Prevention","text":"<pre><code>// Proper cleanup in useEffect\nconst ComponentWithCleanup = () =&gt; {\n  useEffect(() =&gt; {\n    const subscription = eventEmitter.addListener('event', handleEvent);\n    const timer = setInterval(updateData, 1000);\n\n    return () =&gt; {\n      subscription.remove();\n      clearInterval(timer);\n    };\n  }, []);\n\n  // Cleanup async operations\n  useEffect(() =&gt; {\n    let isMounted = true;\n\n    const fetchData = async () =&gt; {\n      try {\n        const data = await apiCall();\n        if (isMounted) {\n          setData(data);\n        }\n      } catch (error) {\n        if (isMounted) {\n          setError(error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      isMounted = false;\n    };\n  }, []);\n};\n\n// Memory monitoring hook\nconst useMemoryMonitor = () =&gt; {\n  useEffect(() =&gt; {\n    const checkMemory = () =&gt; {\n      if (__DEV__) {\n        const memoryInfo = performance.memory;\n        console.log('Memory Usage:', {\n          used: `${(memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n          total: `${(memoryInfo.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n          limit: `${(memoryInfo.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`,\n        });\n      }\n    };\n\n    const interval = setInterval(checkMemory, 5000);\n    return () =&gt; clearInterval(interval);\n  }, []);\n};\n</code></pre>"},{"location":"tools/performance/#efficient-state-management","title":"Efficient State Management","text":"<pre><code>// Use state selectors to prevent unnecessary re-renders\nconst useUserProfile = (userId: string) =&gt; {\n  return useSelector((state: RootState) =&gt; state.users.find(user =&gt; user.id === userId));\n};\n\n// Better: Use memoized selectors\nconst makeSelectUserById = () =&gt;\n  createSelector(\n    [(state: RootState) =&gt; state.users, (state: RootState, userId: string) =&gt; userId],\n    (users, userId) =&gt; users.find(user =&gt; user.id === userId)\n  );\n\n// Normalize state structure\ninterface NormalizedState {\n  users: {\n    byId: Record&lt;string, User&gt;;\n    allIds: string[];\n  };\n  posts: {\n    byId: Record&lt;string, Post&gt;;\n    allIds: string[];\n  };\n}\n\n// Use immer for immutable updates\nimport { produce } from 'immer';\n\nconst userReducer = (state = initialState, action) =&gt; {\n  return produce(state, draft =&gt; {\n    switch (action.type) {\n      case 'UPDATE_USER':\n        const user = draft.users.byId[action.payload.id];\n        if (user) {\n          Object.assign(user, action.payload.updates);\n        }\n        break;\n    }\n  });\n};\n</code></pre>"},{"location":"tools/performance/#bundle-optimization","title":"Bundle Optimization","text":""},{"location":"tools/performance/#code-splitting","title":"Code Splitting","text":"<pre><code>// Lazy load screens\nconst ProfileScreen = lazy(() =&gt; import('./screens/ProfileScreen'));\nconst SettingsScreen = lazy(() =&gt; import('./screens/SettingsScreen'));\n\n// Lazy load heavy components\nconst ChartComponent = lazy(() =&gt; import('./components/Chart'));\n\nconst Dashboard = () =&gt; {\n  const [showChart, setShowChart] = useState(false);\n\n  return (\n    &lt;View&gt;\n      &lt;Button onPress={() =&gt; setShowChart(true)}&gt;Show Chart&lt;/Button&gt;\n      {showChart &amp;&amp; (\n        &lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;\n          &lt;ChartComponent /&gt;\n        &lt;/Suspense&gt;\n      )}\n    &lt;/View&gt;\n  );\n};\n\n// Dynamic imports for utilities\nconst loadHeavyUtility = async () =&gt; {\n  const { heavyFunction } = await import('./utils/heavyUtility');\n  return heavyFunction;\n};\n</code></pre>"},{"location":"tools/performance/#bundle-analysis","title":"Bundle Analysis","text":"<pre><code># Analyze bundle size\nnpx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android-bundle.js\nnpx react-native-bundle-visualizer\n\n# Metro bundle analyzer\nnpm install --save-dev metro-visualizer\nnpx metro-visualizer\n</code></pre> <pre><code>// metro.config.js - Optimization settings\nmodule.exports = {\n  transformer: {\n    minifierConfig: {\n      mangle: {\n        keep_fnames: true,\n      },\n      output: {\n        ascii_only: true,\n        quote_style: 3,\n        wrap_iife: true,\n      },\n      sourceMap: {\n        includeSources: false,\n      },\n      toplevel: false,\n      warnings: false,\n    },\n  },\n  resolver: {\n    alias: {\n      '@': './src',\n    },\n  },\n};\n</code></pre>"},{"location":"tools/performance/#network-performance","title":"Network Performance","text":""},{"location":"tools/performance/#api-optimization","title":"API Optimization","text":"<pre><code>// Request deduplication\nclass RequestDeduplicator {\n  private pendingRequests = new Map&lt;string, Promise&lt;any&gt;&gt;();\n\n  async request&lt;T&gt;(key: string, requestFn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; {\n    if (this.pendingRequests.has(key)) {\n      return this.pendingRequests.get(key);\n    }\n\n    const promise = requestFn().finally(() =&gt; {\n      this.pendingRequests.delete(key);\n    });\n\n    this.pendingRequests.set(key, promise);\n    return promise;\n  }\n}\n\n// Request batching\nclass RequestBatcher {\n  private batch: Array&lt;{ id: string; resolve: Function; reject: Function }&gt; = [];\n  private timer: NodeJS.Timeout | null = null;\n\n  add&lt;T&gt;(id: string): Promise&lt;T&gt; {\n    return new Promise((resolve, reject) =&gt; {\n      this.batch.push({ id, resolve, reject });\n\n      if (!this.timer) {\n        this.timer = setTimeout(() =&gt; this.flush(), 50);\n      }\n    });\n  }\n\n  private async flush() {\n    const currentBatch = [...this.batch];\n    this.batch = [];\n    this.timer = null;\n\n    try {\n      const ids = currentBatch.map(item =&gt; item.id);\n      const results = await this.batchRequest(ids);\n\n      currentBatch.forEach((item, index) =&gt; {\n        item.resolve(results[index]);\n      });\n    } catch (error) {\n      currentBatch.forEach(item =&gt; {\n        item.reject(error);\n      });\n    }\n  }\n\n  private async batchRequest(ids: string[]) {\n    const response = await fetch('/api/batch', {\n      method: 'POST',\n      body: JSON.stringify({ ids }),\n    });\n    return response.json();\n  }\n}\n\n// Optimistic updates with rollback\nconst useOptimisticUpdate = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: updateUser,\n    onMutate: async newUser =&gt; {\n      await queryClient.cancelQueries(['user', newUser.id]);\n      const previousUser = queryClient.getQueryData(['user', newUser.id]);\n      queryClient.setQueryData(['user', newUser.id], newUser);\n      return { previousUser };\n    },\n    onError: (err, newUser, context) =&gt; {\n      queryClient.setQueryData(['user', newUser.id], context?.previousUser);\n    },\n    onSettled: () =&gt; {\n      queryClient.invalidateQueries(['user']);\n    },\n  });\n};\n</code></pre>"},{"location":"tools/performance/#caching-strategies","title":"Caching Strategies","text":"<pre><code>// Multi-level caching\nclass CacheManager {\n  private memoryCache = new Map&lt;string, { data: any; expiry: number }&gt;();\n  private diskCache: AsyncStorage;\n\n  constructor() {\n    this.diskCache = AsyncStorage;\n  }\n\n  async get&lt;T&gt;(key: string): Promise&lt;T | null&gt; {\n    // Check memory cache first\n    const memoryItem = this.memoryCache.get(key);\n    if (memoryItem &amp;&amp; memoryItem.expiry &gt; Date.now()) {\n      return memoryItem.data;\n    }\n\n    // Check disk cache\n    try {\n      const diskItem = await this.diskCache.getItem(key);\n      if (diskItem) {\n        const parsed = JSON.parse(diskItem);\n        if (parsed.expiry &gt; Date.now()) {\n          // Restore to memory cache\n          this.memoryCache.set(key, parsed);\n          return parsed.data;\n        }\n      }\n    } catch (error) {\n      console.warn('Disk cache read error:', error);\n    }\n\n    return null;\n  }\n\n  async set&lt;T&gt;(key: string, data: T, ttl: number = 300000): Promise&lt;void&gt; {\n    const expiry = Date.now() + ttl;\n    const item = { data, expiry };\n\n    // Set in memory cache\n    this.memoryCache.set(key, item);\n\n    // Set in disk cache\n    try {\n      await this.diskCache.setItem(key, JSON.stringify(item));\n    } catch (error) {\n      console.warn('Disk cache write error:', error);\n    }\n  }\n\n  clear(): void {\n    this.memoryCache.clear();\n    this.diskCache.clear();\n  }\n}\n</code></pre>"},{"location":"tools/performance/#performance-monitoring_1","title":"Performance Monitoring","text":""},{"location":"tools/performance/#custom-performance-hooks","title":"Custom Performance Hooks","text":"<pre><code>// Performance measurement hook\nconst usePerformanceMonitor = (label: string) =&gt; {\n  const startTime = useRef&lt;number&gt;();\n\n  const start = useCallback(() =&gt; {\n    startTime.current = performance.now();\n  }, []);\n\n  const end = useCallback(() =&gt; {\n    if (startTime.current) {\n      const duration = performance.now() - startTime.current;\n      console.log(`Performance [${label}]: ${duration.toFixed(2)}ms`);\n\n      // Send to analytics\n      analytics.track('performance_metric', {\n        label,\n        duration,\n        timestamp: Date.now(),\n      });\n\n      startTime.current = undefined;\n      return duration;\n    }\n    return 0;\n  }, [label]);\n\n  return { start, end };\n};\n\n// Frame rate monitor\nconst useFrameRateMonitor = () =&gt; {\n  const [frameRate, setFrameRate] = useState(60);\n\n  useEffect(() =&gt; {\n    let frameCount = 0;\n    let lastTime = performance.now();\n\n    const measureFrameRate = () =&gt; {\n      frameCount++;\n      const currentTime = performance.now();\n\n      if (currentTime - lastTime &gt;= 1000) {\n        setFrameRate(frameCount);\n        frameCount = 0;\n        lastTime = currentTime;\n      }\n\n      requestAnimationFrame(measureFrameRate);\n    };\n\n    const animationId = requestAnimationFrame(measureFrameRate);\n\n    return () =&gt; cancelAnimationFrame(animationId);\n  }, []);\n\n  return frameRate;\n};\n</code></pre>"},{"location":"tools/performance/#performance-profiling","title":"Performance Profiling","text":"<pre><code>// React Profiler integration\nconst ProfiledComponent = ({ children, id }) =&gt; {\n  const onRenderCallback = (id, phase, actualDuration, baseDuration, startTime, commitTime) =&gt; {\n    console.log('Profiler:', {\n      id,\n      phase,\n      actualDuration,\n      baseDuration,\n      startTime,\n      commitTime,\n    });\n\n    // Send to analytics if duration is concerning\n    if (actualDuration &gt; 16) { // More than one frame at 60fps\n      analytics.track('slow_render', {\n        componentId: id,\n        duration: actualDuration,\n        phase,\n      });\n    }\n  };\n\n  return (\n    &lt;Profiler id={id} onRender={onRenderCallback}&gt;\n      {children}\n    &lt;/Profiler&gt;\n  );\n};\n\n// Custom performance observer\nclass PerformanceObserver {\n  private observers: Array&lt;(entry: any) =&gt; void&gt; = [];\n\n  observe(callback: (entry: any) =&gt; void) {\n    this.observers.push(callback);\n  }\n\n  measure(name: string, startMark: string, endMark: string) {\n    performance.mark(startMark);\n    // ... operation\n    performance.mark(endMark);\n    performance.measure(name, startMark, endMark);\n\n    const entries = performance.getEntriesByName(name);\n    const entry = entries[entries.length - 1];\n\n    this.observers.forEach(callback =&gt; callback(entry));\n  }\n}\n</code></pre>"},{"location":"tools/performance/#platform-specific-optimizations","title":"Platform-Specific Optimizations","text":""},{"location":"tools/performance/#ios-optimizations","title":"iOS Optimizations","text":"<pre><code>// iOS-specific optimizations\nimport { Platform } from 'react-native';\n\nconst IOSOptimizedComponent = () =&gt; {\n  return (\n    &lt;ScrollView\n      {...(Platform.OS === 'ios' &amp;&amp; {\n        bounces: false,\n        showsVerticalScrollIndicator: false,\n        decelerationRate: 'fast',\n      })}\n      &gt;\n      {/* Content */}\n    &lt;/ScrollView&gt;\n  );\n};\n\n// Use native driver for animations\nconst animatedValue = useRef(new Animated.Value(0)).current;\n\nconst animate = () =&gt; {\n  Animated.timing(animatedValue, {\n    toValue: 1,\n    duration: 300,\n    useNativeDriver: true, // Important for performance\n  }).start();\n};\n</code></pre>"},{"location":"tools/performance/#android-optimizations","title":"Android Optimizations","text":"<pre><code>// Android-specific optimizations\nconst AndroidOptimizedList = ({ data }) =&gt; {\n  return (\n    &lt;FlatList\n      data={data}\n      renderItem={renderItem}\n      {...(Platform.OS === 'android' &amp;&amp; {\n        removeClippedSubviews: true,\n        maxToRenderPerBatch: 5,\n        updateCellsBatchingPeriod: 30,\n        getItemLayout: getItemLayout,\n      })}\n    /&gt;\n  );\n};\n\n// Handle Android back button efficiently\nuseEffect(() =&gt; {\n  if (Platform.OS === 'android') {\n    const backHandler = BackHandler.addEventListener('hardwareBackPress', () =&gt; {\n      // Handle back press efficiently\n      return true; // Prevent default behavior\n    });\n\n    return () =&gt; backHandler.remove();\n  }\n}, []);\n</code></pre>"},{"location":"tools/performance/#best-practices","title":"Best Practices","text":""},{"location":"tools/performance/#1-measure-before-optimizing","title":"1. Measure Before Optimizing","text":"<pre><code>// Always measure performance before and after optimizations\nconst measurePerformance = (fn: Function, label: string) =&gt; {\n  const start = performance.now();\n  const result = fn();\n  const end = performance.now();\n  console.log(`${label}: ${end - start}ms`);\n  return result;\n};\n</code></pre>"},{"location":"tools/performance/#2-use-production-builds-for-testing","title":"2. Use Production Builds for Testing","text":"<pre><code># Always test performance with production builds\nnpx react-native run-android --variant=release\nnpx react-native run-ios --configuration Release\n</code></pre>"},{"location":"tools/performance/#3-monitor-real-world-performance","title":"3. Monitor Real-World Performance","text":"<pre><code>// Track performance metrics in production\nconst trackPerformanceMetric = (metric: string, value: number) =&gt; {\n  if (!__DEV__) {\n    analytics.track('performance_metric', {\n      metric,\n      value,\n      platform: Platform.OS,\n      version: DeviceInfo.getVersion(),\n    });\n  }\n};\n</code></pre>"},{"location":"tools/performance/#next-steps","title":"Next Steps","text":"<ol> <li>Set up performance monitoring tools and baselines</li> <li>Optimize critical rendering paths and heavy components</li> <li>Implement efficient image loading and caching strategies</li> <li>Optimize bundle size through code splitting and tree shaking</li> <li>Monitor and optimize network requests and API calls</li> <li>Continuously measure and improve performance metrics</li> </ol> <p>Pro Tip: Performance optimization is an ongoing process. Start with the biggest impact optimizations (list performance, image loading, bundle size) and continuously monitor real-world performance metrics to identify areas for improvement.</p>"},{"location":"tools/testing/","title":"Testing","text":"<p>Comprehensive testing strategies for React Native applications covering unit tests, integration tests, and end-to-end testing.</p>"},{"location":"tools/testing/#testing-strategy-overview","title":"Testing Strategy Overview","text":"graph TB     A[Testing Strategy] --&gt; B[Unit Tests]     A --&gt; C[Integration Tests]     A --&gt; D[E2E Tests]     A --&gt; E[Visual Tests]      B --&gt; B1[Components]     B --&gt; B2[Hooks]     B --&gt; B3[Utils]     B --&gt; B4[Services]      C --&gt; C1[API Integration]     C --&gt; C2[Navigation]     C --&gt; C3[State Management]      D --&gt; D1[User Flows]     D --&gt; D2[Critical Paths]     D --&gt; D3[Cross-Platform]      E --&gt; E1[Screenshot Tests]     E --&gt; E2[Component Stories]"},{"location":"tools/testing/#testing-pyramid","title":"Testing Pyramid","text":"Test Type Coverage Speed Cost Confidence Unit Tests 70% Fast Low Medium Integration Tests 20% Medium Medium High E2E Tests 10% Slow High Very High"},{"location":"tools/testing/#unit-testing-with-jest","title":"Unit Testing with Jest","text":""},{"location":"tools/testing/#setup","title":"Setup","text":"<pre><code>npm install --save-dev jest @testing-library/react-native @testing-library/jest-native\n</code></pre> <pre><code>// jest.config.js\nmodule.exports = {\n  preset: 'react-native',\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/jest-setup.js'],\n  transformIgnorePatterns: [\n    'node_modules/(?!(react-native|@react-native|react-native-vector-icons)/)',\n  ],\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/**/*.stories.{js,jsx,ts,tsx}',\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n};\n\n// jest-setup.js\nimport '@testing-library/jest-native/extend-expect';\nimport 'react-native-gesture-handler/jestSetup';\n\njest.mock('react-native-reanimated', () =&gt; {\n  const Reanimated = require('react-native-reanimated/mock');\n  Reanimated.default.call = () =&gt; {};\n  return Reanimated;\n});\n</code></pre>"},{"location":"tools/testing/#component-testing","title":"Component Testing","text":"<pre><code>// __tests__/Button.test.tsx\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Button } from '../components/Button';\n\ndescribe('Button', () =&gt; {\n  it('renders correctly', () =&gt; {\n    const { getByText } = render(&lt;Button&gt;Click me&lt;/Button&gt;);\n    expect(getByText('Click me')).toBeTruthy();\n  });\n\n  it('calls onPress when pressed', () =&gt; {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      &lt;Button onPress={onPress}&gt;Click me&lt;/Button&gt;\n    );\n\n    fireEvent.press(getByText('Click me'));\n    expect(onPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('shows loading state', () =&gt; {\n    const { getByTestId } = render(\n      &lt;Button loading testID=\"button\"&gt;Loading&lt;/Button&gt;\n    );\n\n    expect(getByTestId('button')).toHaveStyle({ opacity: 0.5 });\n  });\n\n  it('applies correct variant styles', () =&gt; {\n    const { getByTestId } = render(\n      &lt;Button variant=\"secondary\" testID=\"button\"&gt;Secondary&lt;/Button&gt;\n    );\n\n    expect(getByTestId('button')).toHaveClass('bg-gray-200');\n  });\n});\n</code></pre>"},{"location":"tools/testing/#hook-testing","title":"Hook Testing","text":"<pre><code>// __tests__/useAuth.test.ts\nimport { renderHook, act } from '@testing-library/react-native';\nimport { useAuth } from '../hooks/useAuth';\n\nconst mockAuthService = {\n  login: jest.fn(),\n  logout: jest.fn(),\n  getCurrentUser: jest.fn(),\n};\n\njest.mock('../services/authService', () =&gt; mockAuthService);\n\ndescribe('useAuth', () =&gt; {\n  beforeEach(() =&gt; {\n    jest.clearAllMocks();\n  });\n\n  it('should login user successfully', async () =&gt; {\n    const mockUser = { id: '1', email: 'test@example.com' };\n    mockAuthService.login.mockResolvedValue(mockUser);\n\n    const { result } = renderHook(() =&gt; useAuth());\n\n    await act(async () =&gt; {\n      await result.current.login('test@example.com', 'password');\n    });\n\n    expect(result.current.user).toEqual(mockUser);\n    expect(result.current.isAuthenticated).toBe(true);\n  });\n\n  it('should handle login error', async () =&gt; {\n    const error = new Error('Invalid credentials');\n    mockAuthService.login.mockRejectedValue(error);\n\n    const { result } = renderHook(() =&gt; useAuth());\n\n    await act(async () =&gt; {\n      try {\n        await result.current.login('test@example.com', 'wrong-password');\n      } catch (e) {\n        // Expected error\n      }\n    });\n\n    expect(result.current.user).toBeNull();\n    expect(result.current.isAuthenticated).toBe(false);\n  });\n});\n</code></pre>"},{"location":"tools/testing/#service-testing","title":"Service Testing","text":"<pre><code>// __tests__/userService.test.ts\nimport { userService } from '../services/userService';\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe('userService', () =&gt; {\n  beforeEach(() =&gt; {\n    (fetch as jest.Mock).mockClear();\n  });\n\n  it('should fetch user by id', async () =&gt; {\n    const mockUser = { id: '1', name: 'John Doe' };\n    (fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      json: () =&gt; Promise.resolve(mockUser),\n    });\n\n    const user = await userService.getUser('1');\n\n    expect(fetch).toHaveBeenCalledWith('/api/users/1');\n    expect(user).toEqual(mockUser);\n  });\n\n  it('should handle API errors', async () =&gt; {\n    (fetch as jest.Mock).mockResolvedValue({\n      ok: false,\n      status: 404,\n    });\n\n    await expect(userService.getUser('999')).rejects.toThrow('User not found');\n  });\n});\n</code></pre>"},{"location":"tools/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"tools/testing/#navigation-testing","title":"Navigation Testing","text":"<pre><code>// __tests__/navigation.test.tsx\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { HomeScreen } from '../screens/HomeScreen';\nimport { ProfileScreen } from '../screens/ProfileScreen';\n\nconst Stack = createNativeStackNavigator();\n\nfunction TestNavigator() {\n  return (\n    &lt;NavigationContainer&gt;\n      &lt;Stack.Navigator&gt;\n        &lt;Stack.Screen name=\"Home\" component={HomeScreen} /&gt;\n        &lt;Stack.Screen name=\"Profile\" component={ProfileScreen} /&gt;\n      &lt;/Stack.Navigator&gt;\n    &lt;/NavigationContainer&gt;\n  );\n}\n\ndescribe('Navigation', () =&gt; {\n  it('navigates to profile screen', async () =&gt; {\n    const { getByText, findByText } = render(&lt;TestNavigator /&gt;);\n\n    fireEvent.press(getByText('Go to Profile'));\n\n    await findByText('Profile Screen');\n  });\n});\n</code></pre>"},{"location":"tools/testing/#state-management-testing","title":"State Management Testing","text":"<pre><code>// __tests__/store.test.ts\nimport { renderHook, act } from '@testing-library/react-native';\nimport { useUserStore } from '../store/userStore';\n\ndescribe('userStore', () =&gt; {\n  beforeEach(() =&gt; {\n    useUserStore.getState().reset();\n  });\n\n  it('should add user to store', () =&gt; {\n    const { result } = renderHook(() =&gt; useUserStore());\n    const user = { id: '1', name: 'John' };\n\n    act(() =&gt; {\n      result.current.addUser(user);\n    });\n\n    expect(result.current.users).toContain(user);\n  });\n\n  it('should remove user from store', () =&gt; {\n    const { result } = renderHook(() =&gt; useUserStore());\n    const user = { id: '1', name: 'John' };\n\n    act(() =&gt; {\n      result.current.addUser(user);\n      result.current.removeUser('1');\n    });\n\n    expect(result.current.users).not.toContain(user);\n  });\n});\n</code></pre>"},{"location":"tools/testing/#end-to-end-testing","title":"End-to-End Testing","text":""},{"location":"tools/testing/#detox-setup","title":"Detox Setup","text":"<pre><code>npm install --save-dev detox\nnpx detox init\n</code></pre> <pre><code>// .detoxrc.js\nmodule.exports = {\n  testRunner: 'jest',\n  runnerConfig: 'e2e/jest.config.js',\n  configurations: {\n    'ios.sim.debug': {\n      device: 'simulator',\n      app: 'ios.debug',\n    },\n    'android.emu.debug': {\n      device: 'emulator',\n      app: 'android.debug',\n    },\n  },\n  devices: {\n    simulator: {\n      type: 'ios.simulator',\n      device: {\n        type: 'iPhone 14',\n      },\n    },\n    emulator: {\n      type: 'android.emulator',\n      device: {\n        avdName: 'Pixel_4_API_30',\n      },\n    },\n  },\n  apps: {\n    'ios.debug': {\n      type: 'ios.app',\n      binaryPath: 'ios/build/Build/Products/Debug-iphonesimulator/MyApp.app',\n      build:\n        'xcodebuild -workspace ios/MyApp.xcworkspace -scheme MyApp -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build',\n    },\n    'android.debug': {\n      type: 'android.apk',\n      binaryPath: 'android/app/build/outputs/apk/debug/app-debug.apk',\n      build: 'cd android &amp;&amp; ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug',\n    },\n  },\n};\n</code></pre>"},{"location":"tools/testing/#e2e-test-examples","title":"E2E Test Examples","text":"<pre><code>// e2e/login.e2e.ts\ndescribe('Login Flow', () =&gt; {\n  beforeAll(async () =&gt; {\n    await device.launchApp();\n  });\n\n  beforeEach(async () =&gt; {\n    await device.reloadReactNative();\n  });\n\n  it('should login with valid credentials', async () =&gt; {\n    await element(by.id('email-input')).typeText('test@example.com');\n    await element(by.id('password-input')).typeText('password123');\n    await element(by.id('login-button')).tap();\n\n    await expect(element(by.text('Welcome!'))).toBeVisible();\n  });\n\n  it('should show error for invalid credentials', async () =&gt; {\n    await element(by.id('email-input')).typeText('invalid@example.com');\n    await element(by.id('password-input')).typeText('wrongpassword');\n    await element(by.id('login-button')).tap();\n\n    await expect(element(by.text('Invalid credentials'))).toBeVisible();\n  });\n\n  it('should navigate through app after login', async () =&gt; {\n    // Login first\n    await element(by.id('email-input')).typeText('test@example.com');\n    await element(by.id('password-input')).typeText('password123');\n    await element(by.id('login-button')).tap();\n\n    // Navigate to profile\n    await element(by.id('profile-tab')).tap();\n    await expect(element(by.text('Profile'))).toBeVisible();\n\n    // Navigate to settings\n    await element(by.id('settings-button')).tap();\n    await expect(element(by.text('Settings'))).toBeVisible();\n  });\n});\n</code></pre>"},{"location":"tools/testing/#maestro-testing-alternative","title":"Maestro Testing (Alternative)","text":"<pre><code># Flows/login.yaml\nappId: com.yourapp.debug\n    ---\n  - launchApp\n  - tapOn: 'Login'\n  - inputText: 'test@example.com'\n  - tapOn: 'Password'\n  - inputText: 'password123'\n  - tapOn: 'Sign In'\n  - assertVisible: 'Welcome'\n</code></pre> <pre><code># Run Maestro tests\nmaestro test flows/\n</code></pre>"},{"location":"tools/testing/#visual-testing","title":"Visual Testing","text":""},{"location":"tools/testing/#storybook-setup","title":"Storybook Setup","text":"<pre><code>npm install --save-dev @storybook/react-native\nnpx storybook init\n</code></pre> <pre><code>// stories/Button.stories.tsx\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Button } from '../components/Button';\n\nconst meta: Meta&lt;typeof Button&gt; = {\n  title: 'UI/Button',\n  component: Button,\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'outline'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj&lt;typeof meta&gt;;\n\nexport const Primary: Story = {\n  args: {\n    children: 'Primary Button',\n    variant: 'primary',\n  },\n};\n\nexport const Loading: Story = {\n  args: {\n    children: 'Loading Button',\n    loading: true,\n  },\n};\n</code></pre>"},{"location":"tools/testing/#screenshot-testing","title":"Screenshot Testing","text":"<pre><code>// __tests__/screenshots.test.tsx\nimport { render } from '@testing-library/react-native';\nimport { Button } from '../components/Button';\n\ndescribe('Screenshot Tests', () =&gt; {\n  it('should match button snapshot', () =&gt; {\n    const { toJSON } = render(&lt;Button&gt;Test Button&lt;/Button&gt;);\n    expect(toJSON()).toMatchSnapshot();\n  });\n\n  it('should match loading button snapshot', () =&gt; {\n    const { toJSON } = render(&lt;Button loading&gt;Loading&lt;/Button&gt;);\n    expect(toJSON()).toMatchSnapshot();\n  });\n});\n</code></pre>"},{"location":"tools/testing/#test-utilities","title":"Test Utilities","text":""},{"location":"tools/testing/#custom-render-function","title":"Custom Render Function","text":"<pre><code>// test-utils/render.tsx\nimport React from 'react';\nimport { render as rtlRender } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ThemeProvider } from '../contexts/ThemeContext';\n\ninterface RenderOptions {\n  initialRoute?: string;\n  theme?: 'light' | 'dark';\n}\n\nfunction render(ui: React.ReactElement, options: RenderOptions = {}) {\n  const { initialRoute = '/', theme = 'light' } = options;\n\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n\n  function Wrapper({ children }: { children: React.ReactNode }) {\n    return (\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;ThemeProvider initialTheme={theme}&gt;\n          &lt;NavigationContainer&gt;\n            {children}\n          &lt;/NavigationContainer&gt;\n        &lt;/ThemeProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    );\n  }\n\n  return rtlRender(ui, { wrapper: Wrapper, ...options });\n}\n\nexport * from '@testing-library/react-native';\nexport { render };\n</code></pre>"},{"location":"tools/testing/#mock-factories","title":"Mock Factories","text":"<pre><code>// test-utils/factories.ts\nexport const createMockUser = (overrides = {}) =&gt; ({\n  id: '1',\n  email: 'test@example.com',\n  name: 'Test User',\n  avatar: 'https://example.com/avatar.jpg',\n  ...overrides,\n});\n\nexport const createMockPost = (overrides = {}) =&gt; ({\n  id: '1',\n  title: 'Test Post',\n  content: 'This is a test post',\n  author: createMockUser(),\n  createdAt: new Date().toISOString(),\n  ...overrides,\n});\n\n// Usage in tests\nconst mockUser = createMockUser({ name: 'John Doe' });\nconst mockPost = createMockPost({ title: 'Custom Title' });\n</code></pre>"},{"location":"tools/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"tools/testing/#performance-benchmarks","title":"Performance Benchmarks","text":"<pre><code>// __tests__/performance.test.ts\nimport { render } from '@testing-library/react-native';\nimport { LargeList } from '../components/LargeList';\n\ndescribe('Performance Tests', () =&gt; {\n  it('should render large list within time limit', () =&gt; {\n    const items = Array.from({ length: 1000 }, (_, i) =&gt; ({ id: i, name: `Item ${i}` }));\n\n    const start = performance.now();\n    render(&lt;LargeList items={items} /&gt;);\n    const end = performance.now();\n\n    expect(end - start).toBeLessThan(100); // Should render in less than 100ms\n  });\n});\n</code></pre>"},{"location":"tools/testing/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"tools/testing/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/test.yml\nname: Test\non: [push, pull_request]\n\njobs:\ntest:\nruns-on: ubuntu-latest\nsteps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-node@v3\nwith:\nnode-version: '18'\ncache: 'npm'\n\n  - run: npm ci\n  - run: npm run lint\n  - run: npm run type-check\n  - run: npm test -- --coverage --watchAll=false\n\n  - name: Upload coverage\nuses: codecov/codecov-action@v3\nwith:\nfile: ./coverage/lcov.info\n\ne2e:\nruns-on: macos-latest\nsteps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-node@v3\nwith:\nnode-version: '18'\ncache: 'npm'\n\n  - run: npm ci\n  - run: npx detox build --configuration ios.sim.debug\n  - run: npx detox test --configuration ios.sim.debug\n</code></pre>"},{"location":"tools/testing/#best-practices","title":"Best Practices","text":""},{"location":"tools/testing/#1-test-structure","title":"1. Test Structure","text":"<pre><code>// Follow AAA pattern: Arrange, Act, Assert\ndescribe('UserProfile', () =&gt; {\n  it('should display user information', () =&gt; {\n    // Arrange\n    const user = createMockUser({ name: 'John Doe' });\n\n    // Act\n    const { getByText } = render(&lt;UserProfile user={user} /&gt;);\n\n    // Assert\n    expect(getByText('John Doe')).toBeTruthy();\n  });\n});\n</code></pre>"},{"location":"tools/testing/#2-test-data-management","title":"2. Test Data Management","text":"<pre><code>// Use factories for consistent test data\nconst user = createMockUser();\nconst post = createMockPost({ author: user });\n\n// Clean up after tests\nafterEach(() =&gt; {\n  cleanup();\n  jest.clearAllMocks();\n});\n</code></pre>"},{"location":"tools/testing/#3-async-testing","title":"3. Async Testing","text":"<pre><code>// Properly handle async operations\nit('should load user data', async () =&gt; {\n  const { findByText } = render(&lt;UserProfile userId=\"1\" /&gt;);\n\n// Wait for async operation to complete\n  await findByText('John Doe');\n});\n</code></pre>"},{"location":"tools/testing/#next-steps","title":"Next Steps","text":"<ol> <li>Set up Jest and React Native Testing Library</li> <li>Write unit tests for critical components and hooks</li> <li>Add integration tests for key user flows</li> <li>Implement E2E testing with Detox or Maestro</li> <li>Set up CI/CD pipeline with automated testing</li> <li>Monitor test coverage and maintain quality standards</li> </ol> <p>Pro Tip: Start with unit tests for critical business logic, then add integration tests for user flows, and finally E2E tests for the most important user journeys. Maintain a good balance between test coverage and development speed.</p>"},{"location":"ui/animations/","title":"Animations","text":"<p>Guide to implementing smooth and performant animations in React Native applications.</p>"},{"location":"ui/animations/#animation-libraries","title":"Animation Libraries","text":""},{"location":"ui/animations/#react-native-reanimated-recommended","title":"React Native Reanimated (Recommended)","text":"<pre><code>npm install react-native-reanimated\n</code></pre>"},{"location":"ui/animations/#basic-setup","title":"Basic Setup","text":"<pre><code>// App.tsx\nimport 'react-native-reanimated/plugin';\n\n// For Expo\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return (\n    &lt;GestureHandlerRootView style={{ flex: 1 }}&gt;\n      {/* Your app content */}\n    &lt;/GestureHandlerRootView&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#basic-animations","title":"Basic Animations","text":""},{"location":"ui/animations/#fade-animation","title":"Fade Animation","text":"<pre><code>// components/FadeInView.tsx\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  withSpring\n} from 'react-native-reanimated';\n\ninterface FadeInViewProps {\n  children: React.ReactNode;\n  duration?: number;\n}\n\nexport function FadeInView({ children, duration = 300 }: FadeInViewProps) {\n  const opacity = useSharedValue(0);\n\n  React.useEffect(() =&gt; {\n    opacity.value = withTiming(1, { duration });\n  }, []);\n\n  const animatedStyle = useAnimatedStyle(() =&gt; ({\n    opacity: opacity.value,\n  }));\n\n  return (\n    &lt;Animated.View style={animatedStyle}&gt;\n      {children}\n    &lt;/Animated.View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#scale-animation","title":"Scale Animation","text":"<pre><code>// components/ScaleButton.tsx\nexport function ScaleButton({ children, onPress }: ButtonProps) {\n  const scale = useSharedValue(1);\n\n  const animatedStyle = useAnimatedStyle(() =&gt; ({\n    transform: [{ scale: scale.value }],\n  }));\n\n  const handlePressIn = () =&gt; {\n    scale.value = withSpring(0.95);\n  };\n\n  const handlePressOut = () =&gt; {\n    scale.value = withSpring(1);\n  };\n\n  return (\n    &lt;Animated.View style={animatedStyle}&gt;\n      &lt;Pressable\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        onPress={onPress}\n        &gt;\n        {children}\n      &lt;/Pressable&gt;\n    &lt;/Animated.View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#gesture-based-animations","title":"Gesture-Based Animations","text":""},{"location":"ui/animations/#swipe-to-delete","title":"Swipe to Delete","text":"<pre><code>// components/SwipeToDelete.tsx\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  runOnJS,\n  withSpring,\n} from 'react-native-reanimated';\n\ninterface SwipeToDeleteProps {\n  children: React.ReactNode;\n  onDelete: () =&gt; void;\n}\n\nexport function SwipeToDelete({ children, onDelete }: SwipeToDeleteProps) {\n  const translateX = useSharedValue(0);\n  const opacity = useSharedValue(1);\n\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (_, context) =&gt; {\n      context.startX = translateX.value;\n    },\n    onActive: (event, context) =&gt; {\n      translateX.value = context.startX + event.translationX;\n    },\n    onEnd: (event) =&gt; {\n      if (event.translationX &lt; -100) {\n        translateX.value = withSpring(-300);\n        opacity.value = withSpring(0, undefined, () =&gt; {\n          runOnJS(onDelete)();\n        });\n      } else {\n        translateX.value = withSpring(0);\n      }\n    },\n  });\n\n  const animatedStyle = useAnimatedStyle(() =&gt; ({\n    transform: [{ translateX: translateX.value }],\n    opacity: opacity.value,\n  }));\n\n  return (\n    &lt;PanGestureHandler onGestureEvent={gestureHandler}&gt;\n      &lt;Animated.View style={animatedStyle}&gt;\n        {children}\n      &lt;/Animated.View&gt;\n    &lt;/PanGestureHandler&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#layout-animations","title":"Layout Animations","text":""},{"location":"ui/animations/#animated-list","title":"Animated List","text":"<pre><code>// components/AnimatedList.tsx\nimport { Layout, FadeInDown, FadeOutUp } from 'react-native-reanimated';\n\ninterface AnimatedListProps {\n  data: any[];\n  renderItem: (item: any, index: number) =&gt; React.ReactNode;\n}\n\nexport function AnimatedList({ data, renderItem }: AnimatedListProps) {\n  return (\n    &lt;ScrollView&gt;\n      {data.map((item, index) =&gt; (\n        &lt;Animated.View\n          key={item.id}\n          entering={FadeInDown.delay(index * 100)}\n          exiting={FadeOutUp}\n          layout={Layout.springify()}\n          &gt;\n          {renderItem(item, index)}\n        &lt;/Animated.View&gt;\n      ))}\n    &lt;/ScrollView&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#complex-animations","title":"Complex Animations","text":""},{"location":"ui/animations/#shared-element-transitions","title":"Shared Element Transitions","text":"<pre><code>// components/SharedElementTransition.tsx\nimport { SharedElement } from 'react-navigation-shared-element';\n\n// Screen A\nfunction ListScreen({ navigation }) {\n  return (\n    &lt;ScrollView&gt;\n      {items.map(item =&gt; (\n        &lt;Pressable\n          key={item.id}\n          onPress={() =&gt; navigation.navigate('Detail', { item })}\n          &gt;\n          &lt;SharedElement id={`item.${item.id}.image`}&gt;\n            &lt;Image source={{ uri: item.image }} /&gt;\n          &lt;/SharedElement&gt;\n        &lt;/Pressable&gt;\n      ))}\n    &lt;/ScrollView&gt;\n  );\n}\n\n// Screen B\nfunction DetailScreen({ route }) {\n  const { item } = route.params;\n\n  return (\n    &lt;View&gt;\n      &lt;SharedElement id={`item.${item.id}.image`}&gt;\n        &lt;Image source={{ uri: item.image }} /&gt;\n      &lt;/SharedElement&gt;\n    &lt;/View&gt;\n  );\n}\n\n// Navigation configuration\nconst Stack = createSharedElementStackNavigator();\n\nfunction App() {\n  return (\n    &lt;Stack.Navigator&gt;\n      &lt;Stack.Screen name=\"List\" component={ListScreen} /&gt;\n      &lt;Stack.Screen\n        name=\"Detail\"\n        component={DetailScreen}\n        sharedElements={(route) =&gt; {\n          const { item } = route.params;\n          return [`item.${item.id}.image`];\n        }}\n        /&gt;\n      &lt;/Stack.Navigator&gt;\n    );\n  }\n</code></pre>"},{"location":"ui/animations/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ui/animations/#use-native-driver","title":"Use Native Driver","text":"<pre><code>// Always use native driver when possible\nconst animatedValue = useSharedValue(0);\n\n// Good - runs on UI thread\nanimatedValue.value = withTiming(1, { duration: 300 });\n\n// Avoid - runs on JS thread\nAnimated.timing(animatedValue, {\n  toValue: 1,\n  duration: 300,\n  useNativeDriver: false, // Avoid this\n}).start();\n</code></pre>"},{"location":"ui/animations/#optimize-re-renders","title":"Optimize Re-renders","text":"<pre><code>// Use worklets for better performance\nconst animatedStyle = useAnimatedStyle(() =&gt; {\n  'worklet';\n  return {\n    transform: [{ translateX: translateX.value }],\n  };\n});\n</code></pre>"},{"location":"ui/animations/#animation-patterns","title":"Animation Patterns","text":""},{"location":"ui/animations/#stagger-animations","title":"Stagger Animations","text":"<pre><code>// components/StaggeredList.tsx\nexport function StaggeredList({ items }: { items: any[] }) {\n  return (\n    &lt;View&gt;\n      {items.map((item, index) =&gt; (\n        &lt;Animated.View\n          key={item.id}\n          entering={FadeInRight.delay(index * 100)}\n          &gt;\n          &lt;ItemComponent item={item} /&gt;\n        &lt;/Animated.View&gt;\n      ))}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#loading-animations","title":"Loading Animations","text":"<pre><code>// components/LoadingSpinner.tsx\nexport function LoadingSpinner() {\n  const rotation = useSharedValue(0);\n\n  React.useEffect(() =&gt; {\n    rotation.value = withRepeat(\n      withTiming(360, { duration: 1000 }),\n      -1,\n      false\n    );\n  }, []);\n\n  const animatedStyle = useAnimatedStyle(() =&gt; ({\n    transform: [{ rotate: `${rotation.value}deg` }],\n  }));\n\n  return (\n    &lt;Animated.View style={animatedStyle}&gt;\n      &lt;View className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full\" /&gt;\n    &lt;/Animated.View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/animations/#best-practices","title":"Best Practices","text":""},{"location":"ui/animations/#1-keep-animations-smooth","title":"1. Keep Animations Smooth","text":"<ul> <li>Target 60fps for smooth animations</li> <li>Use native driver when possible</li> <li>Avoid animating layout properties</li> </ul>"},{"location":"ui/animations/#2-provide-meaningful-feedback","title":"2. Provide Meaningful Feedback","text":"<ul> <li>Use animations to guide user attention</li> <li>Provide visual feedback for interactions</li> <li>Maintain consistency across the app</li> </ul>"},{"location":"ui/animations/#3-respect-user-preferences","title":"3. Respect User Preferences","text":"<pre><code>// Respect reduced motion preferences\nimport { AccessibilityInfo } from 'react-native';\n\nconst [reduceMotion, setReduceMotion] = useState(false);\n\nuseEffect(() =&gt; {\n  AccessibilityInfo.isReduceMotionEnabled().then(setReduceMotion);\n}, []);\n\n// Conditionally apply animations\nconst duration = reduceMotion ? 0 : 300;\n</code></pre>"},{"location":"ui/animations/#4-test-on-real-devices","title":"4. Test on Real Devices","text":"<ul> <li>Animations may perform differently on real devices</li> <li>Test on lower-end devices for performance</li> <li>Monitor frame rates during development</li> </ul> <p>Pro Tip: Start with simple animations and gradually add complexity. Focus on meaningful animations that enhance user experience rather than decorative ones that might impact performance.</p>"},{"location":"ui/design-systems/","title":"Design Systems","text":"<p>Guide to building consistent design systems in React Native applications.</p>"},{"location":"ui/design-systems/#design-system-architecture","title":"Design System Architecture","text":"<p>A design system provides a unified set of design standards, components, and guidelines that ensure consistency across your application.</p>"},{"location":"ui/design-systems/#core-components","title":"Core Components","text":""},{"location":"ui/design-systems/#design-tokens","title":"Design Tokens","text":"<pre><code>// tokens/colors.ts\nexport const colors = {\n  primary: {\n    50: '#eff6ff',\n    100: '#dbeafe',\n    500: '#3b82f6',\n    900: '#1e3a8a',\n  },\n  gray: {\n    50: '#f9fafb',\n    100: '#f3f4f6',\n    500: '#6b7280',\n    900: '#111827',\n  },\n  semantic: {\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n    info: '#3b82f6',\n  },\n};\n\n// tokens/spacing.ts\nexport const spacing = {\n  xs: 4,\n  sm: 8,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  '2xl': 48,\n  '3xl': 64,\n};\n\n// tokens/typography.ts\nexport const typography = {\n  fontSizes: {\n    xs: 12,\n    sm: 14,\n    base: 16,\n    lg: 18,\n    xl: 20,\n    '2xl': 24,\n    '3xl': 30,\n    '4xl': 36,\n  },\n  fontWeights: {\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n  },\n  lineHeights: {\n    tight: 1.25,\n    normal: 1.5,\n    relaxed: 1.75,\n  },\n};\n</code></pre>"},{"location":"ui/design-systems/#component-library","title":"Component Library","text":"<pre><code>// components/Button/Button.tsx\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  children: React.ReactNode;\n  onPress?: () =&gt; void;\n}\n\nexport function Button({ variant = 'primary', size = 'md', children, onPress }: ButtonProps) {\n  return (\n    &lt;Pressable\n      onPress={onPress}\n      className={cn(\n        'rounded-lg items-center justify-center',\n        {\n          'bg-blue-500': variant === 'primary',\n          'bg-gray-200': variant === 'secondary',\n          'border border-gray-300': variant === 'outline',\n          'px-3 py-2': size === 'sm',\n          'px-4 py-3': size === 'md',\n          'px-6 py-4': size === 'lg',\n        }\n      )}\n      &gt;\n      &lt;Text className={cn(\n          'font-medium',\n          {\n            'text-white': variant === 'primary',\n            'text-gray-800': variant === 'secondary',\n            'text-gray-600': variant === 'outline',\n          }\n        )}&gt;\n        {children}\n      &lt;/Text&gt;\n    &lt;/Pressable&gt;\n  );\n}\n</code></pre>"},{"location":"ui/design-systems/#component-documentation","title":"Component Documentation","text":""},{"location":"ui/design-systems/#storybook-integration","title":"Storybook Integration","text":"<pre><code>// stories/Button.stories.tsx\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Button } from '../components/Button';\n\nconst meta: Meta&lt;typeof Button&gt; = {\n  title: 'Components/Button',\n  component: Button,\n  parameters: {\n    layout: 'centered',\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'outline'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj&lt;typeof meta&gt;;\n\nexport const Primary: Story = {\n  args: {\n    children: 'Primary Button',\n    variant: 'primary',\n  },\n};\n</code></pre>"},{"location":"ui/design-systems/#design-guidelines","title":"Design Guidelines","text":""},{"location":"ui/design-systems/#spacing-system","title":"Spacing System","text":"<ul> <li>Use consistent spacing values from design tokens</li> <li>Follow 8px grid system for layout consistency</li> <li>Maintain proper touch targets (minimum 44px)</li> </ul>"},{"location":"ui/design-systems/#color-usage","title":"Color Usage","text":"<ul> <li>Use semantic colors for consistent meaning</li> <li>Ensure proper contrast ratios for accessibility</li> <li>Provide dark mode variants</li> </ul>"},{"location":"ui/design-systems/#typography-scale","title":"Typography Scale","text":"<ul> <li>Use consistent font sizes and weights</li> <li>Maintain proper line heights for readability</li> <li>Consider platform-specific font rendering</li> </ul>"},{"location":"ui/design-systems/#implementation-strategy","title":"Implementation Strategy","text":"<ol> <li>Start with Design Tokens - Define core values first</li> <li>Build Base Components - Create reusable building blocks</li> <li>Document Everything - Use Storybook for component documentation</li> <li>Test Across Platforms - Ensure consistency on iOS and Android</li> <li>Iterate and Refine - Continuously improve based on usage</li> </ol> <p>Pro Tip: Start small with a few core components and gradually expand your design system. Focus on consistency and reusability over completeness.</p>"},{"location":"ui/responsive-design/","title":"Responsive Design","text":"<p>Guide to creating responsive React Native applications that work across different screen sizes and orientations.</p>"},{"location":"ui/responsive-design/#screen-size-considerations","title":"Screen Size Considerations","text":""},{"location":"ui/responsive-design/#device-categories","title":"Device Categories","text":"<ul> <li>Phones: 320px - 428px width</li> <li>Tablets: 768px - 1024px width</li> <li>Foldables: Variable dimensions when folded/unfolded</li> </ul>"},{"location":"ui/responsive-design/#responsive-breakpoints","title":"Responsive Breakpoints","text":"<pre><code>// utils/responsive.ts\nimport { Dimensions, PixelRatio } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\nexport const breakpoints = {\n  sm: 480,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n};\n\nexport const responsive = {\n  width,\n  height,\n  isSmall: width &lt; breakpoints.sm,\n  isMedium: width &gt;= breakpoints.sm &amp;&amp; width &lt; breakpoints.md,\n  isLarge: width &gt;= breakpoints.md &amp;&amp; width &lt; breakpoints.lg,\n  isXLarge: width &gt;= breakpoints.lg,\n  isTablet: width &gt;= breakpoints.md,\n  isPhone: width &lt; breakpoints.md,\n  isLandscape: width &gt; height,\n  isPortrait: height &gt; width,\n};\n</code></pre>"},{"location":"ui/responsive-design/#responsive-layouts","title":"Responsive Layouts","text":""},{"location":"ui/responsive-design/#flexbox-layouts","title":"Flexbox Layouts","text":"<pre><code>// components/ResponsiveGrid.tsx\ninterface ResponsiveGridProps {\n  children: React.ReactNode;\n  columns?: { sm?: number; md?: number; lg?: number };\n  gap?: number;\n}\n\nexport function ResponsiveGrid({\n  children,\n  columns = { sm: 1, md: 2, lg: 3 },\n  gap = 16\n}: ResponsiveGridProps) {\n  const getColumns = () =&gt; {\n    if (responsive.isLarge) return columns.lg || 3;\n    if (responsive.isMedium) return columns.md || 2;\n    return columns.sm || 1;\n  };\n\n  return (\n    &lt;View style={{\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        margin: -gap / 2,\n      }}&gt;\n      {React.Children.map(children, (child, index) =&gt; (\n        &lt;View style={{\n            width: `${100 / getColumns()}%`,\n            padding: gap / 2,\n          }}&gt;\n          {child}\n        &lt;/View&gt;\n      ))}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/responsive-design/#adaptive-components","title":"Adaptive Components","text":"<pre><code>// components/AdaptiveLayout.tsx\nexport function AdaptiveLayout({ children }: { children: React.ReactNode }) {\n  if (responsive.isTablet) {\n    return (\n      &lt;View className=\"flex-row\"&gt;\n        &lt;View className=\"w-1/3 border-r border-gray-200\"&gt;\n          {/* Sidebar */}\n        &lt;/View&gt;\n        &lt;View className=\"flex-1\"&gt;\n          {children}\n        &lt;/View&gt;\n      &lt;/View&gt;\n    );\n  }\n\n  return (\n    &lt;View className=\"flex-1\"&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/responsive-design/#orientation-handling","title":"Orientation Handling","text":""},{"location":"ui/responsive-design/#orientation-detection","title":"Orientation Detection","text":"<pre><code>// hooks/useOrientation.ts\nimport { useState, useEffect } from 'react';\nimport { Dimensions } from 'react-native';\n\nexport function useOrientation() {\n  const [orientation, setOrientation] = useState(\n    Dimensions.get('window').width &gt; Dimensions.get('window').height ? 'landscape' : 'portrait'\n  );\n\n  useEffect(() =&gt; {\n    const subscription = Dimensions.addEventListener('change', ({ window }) =&gt; {\n      setOrientation(window.width &gt; window.height ? 'landscape' : 'portrait');\n    });\n\n    return () =&gt; subscription?.remove();\n  }, []);\n\n  return orientation;\n}\n</code></pre>"},{"location":"ui/responsive-design/#responsive-typography","title":"Responsive Typography","text":""},{"location":"ui/responsive-design/#scalable-text","title":"Scalable Text","text":"<pre><code>// utils/typography.ts\nexport const getResponsiveFontSize = (baseSize: number) =&gt; {\n  const scale = Math.min(responsive.width / 375, 1.3); // Base on iPhone X width\n  return Math.round(PixelRatio.roundToNearestPixel(baseSize * scale));\n};\n\n// components/ResponsiveText.tsx\ninterface ResponsiveTextProps {\n  size?: 'sm' | 'base' | 'lg' | 'xl';\n  children: React.ReactNode;\n}\n\nexport function ResponsiveText({ size = 'base', children }: ResponsiveTextProps) {\n  const fontSize = {\n    sm: getResponsiveFontSize(14),\n    base: getResponsiveFontSize(16),\n    lg: getResponsiveFontSize(18),\n    xl: getResponsiveFontSize(24),\n  }[size];\n\n  return (\n    &lt;Text style={{ fontSize }}&gt;\n      {children}\n    &lt;/Text&gt;\n  );\n}\n</code></pre>"},{"location":"ui/responsive-design/#safe-area-handling","title":"Safe Area Handling","text":""},{"location":"ui/responsive-design/#safe-area-implementation","title":"Safe Area Implementation","text":"<pre><code>// components/SafeAreaView.tsx\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nexport function SafeAreaView({ children }: { children: React.ReactNode }) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    &lt;View style={{\n        flex: 1,\n        paddingTop: insets.top,\n        paddingBottom: insets.bottom,\n        paddingLeft: insets.left,\n        paddingRight: insets.right,\n      }}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/responsive-design/#best-practices","title":"Best Practices","text":""},{"location":"ui/responsive-design/#1-design-mobile-first","title":"1. Design Mobile-First","text":"<p>Start with mobile layouts and progressively enhance for larger screens.</p>"},{"location":"ui/responsive-design/#2-use-relative-units","title":"2. Use Relative Units","text":"<p>Prefer percentages and flex properties over fixed dimensions.</p>"},{"location":"ui/responsive-design/#3-test-on-real-devices","title":"3. Test on Real Devices","text":"<p>Simulators don't always accurately represent real device behavior.</p>"},{"location":"ui/responsive-design/#4-consider-touch-targets","title":"4. Consider Touch Targets","text":"<p>Ensure interactive elements are at least 44px in size.</p>"},{"location":"ui/responsive-design/#5-handle-edge-cases","title":"5. Handle Edge Cases","text":"<p>Account for notches, home indicators, and foldable devices.</p> <p>Pro Tip: Use responsive design patterns from the start rather than retrofitting them later. Test on various device sizes throughout development.</p>"},{"location":"ui/styling-systems/","title":"Styling Systems","text":"<p>Comprehensive guide to styling React Native applications using modern approaches including NativeWind, StyleSheet, and other styling solutions.</p>"},{"location":"ui/styling-systems/#styling-approaches-comparison","title":"Styling Approaches Comparison","text":"Approach Learning Curve Performance Developer Experience Bundle Size NativeWind Low (if familiar with Tailwind) Excellent Excellent Small StyleSheet Low Excellent Good Minimal Styled Components Medium Good Excellent Medium Emotion Medium Good Excellent Medium Tamagui High Excellent Excellent Large"},{"location":"ui/styling-systems/#nativewind-recommended","title":"NativeWind (Recommended)","text":""},{"location":"ui/styling-systems/#setup","title":"Setup","text":"<pre><code>npm install nativewind\nnpm install --save-dev tailwindcss\n</code></pre>"},{"location":"ui/styling-systems/#configuration","title":"Configuration","text":"<pre><code>// tailwind.config.js\nmodule.exports = {\n  content: [\n    './App.{js,jsx,ts,tsx}',\n    './app/**/*.{js,jsx,ts,tsx}',\n    './components/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          500: '#3b82f6',\n          900: '#1e3a8a',\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui'],\n        mono: ['JetBrains Mono', 'monospace'],\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre> <pre><code>// babel.config.js\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }]],\n    plugins: ['nativewind/babel'],\n  };\n};\n</code></pre>"},{"location":"ui/styling-systems/#basic-usage","title":"Basic Usage","text":"<pre><code>// components/Button.tsx\nimport { Pressable, Text } from 'react-native';\nimport { cn } from '@/lib/utils';\n\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  children: React.ReactNode;\n  onPress?: () =&gt; void;\n  className?: string;\n}\n\nexport function Button({\n  variant = 'primary',\n  size = 'md',\n  children,\n  onPress,\n  className\n}: ButtonProps) {\n  return (\n    &lt;Pressable\n      onPress={onPress}\n      className={cn(\n        // Base styles\n        'rounded-lg items-center justify-center',\n        // Variant styles\n        {\n          'bg-blue-500 active:bg-blue-600': variant === 'primary',\n          'bg-gray-200 active:bg-gray-300': variant === 'secondary',\n          'border border-gray-300 active:bg-gray-50': variant === 'outline',\n        },\n        // Size styles\n        {\n          'px-3 py-2': size === 'sm',\n          'px-4 py-3': size === 'md',\n          'px-6 py-4': size === 'lg',\n        },\n        className\n      )}\n      &gt;\n      &lt;Text className={cn(\n          'font-medium',\n          {\n            'text-white': variant === 'primary',\n            'text-gray-800': variant === 'secondary',\n            'text-gray-600': variant === 'outline',\n            'text-sm': size === 'sm',\n            'text-base': size === 'md',\n            'text-lg': size === 'lg',\n          }\n        )}&gt;\n        {children}\n      &lt;/Text&gt;\n    &lt;/Pressable&gt;\n  );\n}\n</code></pre>"},{"location":"ui/styling-systems/#advanced-nativewind-patterns","title":"Advanced NativeWind Patterns","text":"<pre><code>// lib/utils.ts - Class name utility\nimport { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// components/Card.tsx - Complex component with NativeWind\ninterface CardProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'elevated' | 'outlined';\n  padding?: 'none' | 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport function Card({\n  children,\n  variant = 'default',\n  padding = 'md',\n  className\n}: CardProps) {\n  return (\n    &lt;View className={cn(\n        'bg-white rounded-lg',\n        {\n          'shadow-sm border border-gray-200': variant === 'default',\n          'shadow-lg': variant === 'elevated',\n          'border-2 border-gray-300': variant === 'outlined',\n          'p-0': padding === 'none',\n          'p-3': padding === 'sm',\n          'p-4': padding === 'md',\n          'p-6': padding === 'lg',\n        },\n        className\n      )}&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n\n// Responsive design with NativeWind\nexport function ResponsiveGrid({ children }: { children: React.ReactNode }) {\n  return (\n    &lt;View className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n      {children}\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"ui/styling-systems/#dark-mode-support","title":"Dark Mode Support","text":"<pre><code>// components/ThemeProvider.tsx\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useColorScheme } from 'react-native';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) =&gt; void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext&lt;ThemeContextType | undefined&gt;(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState&lt;Theme&gt;('system');\n  const systemTheme = useColorScheme();\n\n  const isDark = theme === 'dark' || (theme === 'system' &amp;&amp; systemTheme === 'dark');\n\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme, isDark }}&gt;\n      &lt;View className={isDark ? 'dark' : ''}&gt;\n        {children}\n      &lt;/View&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport const useTheme = () =&gt; {\n  const context = useContext(ThemeContext);\n  if (!context) throw new Error('useTheme must be used within ThemeProvider');\n  return context;\n};\n\n// Usage with dark mode classes\n&lt;View className=\"bg-white dark:bg-gray-900\"&gt;\n  &lt;Text className=\"text-gray-900 dark:text-white\"&gt;\n    This text adapts to theme\n  &lt;/Text&gt;\n&lt;/View&gt;\n</code></pre>"},{"location":"ui/styling-systems/#stylesheet-native-approach","title":"StyleSheet (Native Approach)","text":""},{"location":"ui/styling-systems/#basic-usage_1","title":"Basic Usage","text":"<pre><code>import { StyleSheet, View, Text, Pressable } from 'react-native';\n\ninterface ButtonProps {\n  title: string;\n  onPress: () =&gt; void;\n  variant?: 'primary' | 'secondary';\n}\n\nexport function Button({ title, onPress, variant = 'primary' }: ButtonProps) {\n  return (\n    &lt;Pressable\n      style={[styles.button, styles[variant]]}\n      onPress={onPress}\n    &gt;\n      &lt;Text style={[styles.text, styles[`${variant}Text`]]}&gt;\n        {title}\n      &lt;/Text&gt;\n    &lt;/Pressable&gt;\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  primary: {\n    backgroundColor: '#3b82f6',\n  },\n  secondary: {\n    backgroundColor: '#e5e7eb',\n  },\n  text: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  primaryText: {\n    color: '#ffffff',\n  },\n  secondaryText: {\n    color: '#374151',\n  },\n});\n</code></pre>"},{"location":"ui/styling-systems/#advanced-stylesheet-patterns","title":"Advanced StyleSheet Patterns","text":"<pre><code>// styles/theme.ts\nexport const theme = {\n  colors: {\n    primary: '#3b82f6',\n    secondary: '#6b7280',\n    success: '#10b981',\n    error: '#ef4444',\n    warning: '#f59e0b',\n    background: '#ffffff',\n    surface: '#f9fafb',\n    text: '#111827',\n    textSecondary: '#6b7280',\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n  },\n  borderRadius: {\n    sm: 4,\n    md: 8,\n    lg: 12,\n    xl: 16,\n  },\n  typography: {\n    h1: { fontSize: 32, fontWeight: '700' },\n    h2: { fontSize: 24, fontWeight: '600' },\n    h3: { fontSize: 20, fontWeight: '600' },\n    body: { fontSize: 16, fontWeight: '400' },\n    caption: { fontSize: 14, fontWeight: '400' },\n  },\n} as const;\n\n// styles/createStyles.ts\nexport function createStyles&lt;T extends Record&lt;string, any&gt;&gt;(stylesFn: (theme: typeof theme) =&gt; T) {\n  return StyleSheet.create(stylesFn(theme));\n}\n\n// Usage\nconst styles = createStyles(theme =&gt; ({\n  container: {\n    flex: 1,\n    backgroundColor: theme.colors.background,\n    padding: theme.spacing.md,\n  },\n  title: {\n    ...theme.typography.h1,\n    color: theme.colors.text,\n    marginBottom: theme.spacing.lg,\n  },\n  card: {\n    backgroundColor: theme.colors.surface,\n    borderRadius: theme.borderRadius.lg,\n    padding: theme.spacing.md,\n  },\n}));\n</code></pre>"},{"location":"ui/styling-systems/#responsive-styles","title":"Responsive Styles","text":"<pre><code>import { Dimensions, PixelRatio } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\n// Responsive dimensions\nexport const responsive = {\n  width,\n  height,\n  isTablet: width &gt;= 768,\n  isLandscape: width &gt; height,\n\n  // Responsive font sizes\n  fontSize: (size: number) =&gt; {\n    const scale = width / 375; // Base on iPhone X width\n    const newSize = size * scale;\n    return Math.max(12, PixelRatio.roundToNearestPixel(newSize));\n  },\n\n  // Responsive spacing\n  spacing: (size: number) =&gt; {\n    const scale = width / 375;\n    return Math.round(size * scale);\n  },\n};\n\n// Usage\nconst styles = StyleSheet.create({\n  container: {\n    padding: responsive.spacing(16),\n  },\n  title: {\n    fontSize: responsive.fontSize(24),\n  },\n  grid: {\n    flexDirection: responsive.isTablet ? 'row' : 'column',\n  },\n});\n</code></pre>"},{"location":"ui/styling-systems/#styled-components","title":"Styled Components","text":""},{"location":"ui/styling-systems/#setup_1","title":"Setup","text":"<pre><code>npm install styled-components\nnpm install --save-dev @types/styled-components @types/styled-components-react-native\n</code></pre>"},{"location":"ui/styling-systems/#basic-usage_2","title":"Basic Usage","text":"<pre><code>import styled from 'styled-components/native';\n\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary';\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst StyledButton = styled.Pressable&lt;ButtonProps&gt;`\npadding: ${props =&gt; {\n  switch (props.size) {\n    case 'sm': return '8px 12px';\n    case 'lg': return '16px 24px';\n    default: return '12px 16px';\n  }\n}};\nbackground-color: ${props =&gt;\n  props.variant === 'secondary' ? '#e5e7eb' : '#3b82f6'\n};\nborder-radius: 8px;\nalign-items: center;\njustify-content: center;\n`;\n\nconst ButtonText = styled.Text&lt;ButtonProps&gt;`\ncolor: ${props =&gt;\n  props.variant === 'secondary' ? '#374151' : '#ffffff'\n};\nfont-size: ${props =&gt; {\n  switch (props.size) {\n    case 'sm': return '14px';\n    case 'lg': return '18px';\n    default: return '16px';\n  }\n}};\nfont-weight: 600;\n`;\n\nexport function Button({ children, ...props }: ButtonProps &amp; { children: React.ReactNode }) {\n  return (\n    &lt;StyledButton {...props}&gt;\n      &lt;ButtonText {...props}&gt;{children}&lt;/ButtonText&gt;\n    &lt;/StyledButton&gt;\n  );\n}\n</code></pre>"},{"location":"ui/styling-systems/#theme-provider","title":"Theme Provider","text":"<pre><code>// styles/theme.ts\nexport const lightTheme = {\n  colors: {\n    primary: '#3b82f6',\n    background: '#ffffff',\n    surface: '#f9fafb',\n    text: '#111827',\n  },\n  spacing: {\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n  },\n};\n\nexport const darkTheme = {\n  ...lightTheme,\n  colors: {\n    primary: '#60a5fa',\n    background: '#111827',\n    surface: '#1f2937',\n    text: '#f9fafb',\n  },\n};\n\n// App.tsx\nimport { ThemeProvider } from 'styled-components/native';\n\nexport default function App() {\n  const [isDark, setIsDark] = useState(false);\n\n  return (\n    &lt;ThemeProvider theme={isDark ? darkTheme : lightTheme}&gt;\n      &lt;YourApp /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n\n// Usage in components\nconst Container = styled.View`\nbackground-color: ${props =&gt; props.theme.colors.background};\npadding: ${props =&gt; props.theme.spacing.md};\n`;\n</code></pre>"},{"location":"ui/styling-systems/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ui/styling-systems/#style-memoization","title":"Style Memoization","text":"<pre><code>// Memoize expensive style calculations\nconst useStyles = (theme: Theme, variant: string) =&gt; {\n  return useMemo(() =&gt; StyleSheet.create({\n    container: {\n      backgroundColor: theme.colors[variant],\n      borderRadius: theme.borderRadius.md,\n    },\n// ... other styles\n  }), [theme, variant]);\n};\n\n// Use in component\nfunction MyComponent({ variant }: { variant: string }) {\n  const theme = useTheme();\n  const styles = useStyles(theme, variant);\n\n  return &lt;View style={styles.container} /&gt;;\n}\n</code></pre>"},{"location":"ui/styling-systems/#avoiding-inline-styles","title":"Avoiding Inline Styles","text":"<pre><code>// Bad - Creates new object on every render\n&lt;View style={{ padding: 16, backgroundColor: 'white' }} /&gt;\n\n// Good - Reuse style objects\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    backgroundColor: 'white',\n  },\n});\n\n&lt;View style={styles.container} /&gt;\n\n// Good with NativeWind - Compiled at build time\n&lt;View className=\"p-4 bg-white\" /&gt;\n</code></pre>"},{"location":"ui/styling-systems/#best-practices","title":"Best Practices","text":""},{"location":"ui/styling-systems/#1-consistent-design-system","title":"1. Consistent Design System","text":"<pre><code>// design-system/tokens.ts\nexport const tokens = {\n  colors: {\n    primary: {\n      50: '#eff6ff',\n      100: '#dbeafe',\n      500: '#3b82f6',\n      900: '#1e3a8a',\n    },\n    gray: {\n      50: '#f9fafb',\n      100: '#f3f4f6',\n      500: '#6b7280',\n      900: '#111827',\n    },\n  },\n  spacing: [0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64],\n  fontSizes: [12, 14, 16, 18, 20, 24, 32, 48],\n  lineHeights: [16, 20, 24, 28, 32, 36, 40, 48, 56],\n  fontWeights: {\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n  },\n  borderRadius: [0, 2, 4, 8, 12, 16, 24],\n  shadows: {\n    sm: {\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.05,\n      shadowRadius: 2,\n      elevation: 1,\n    },\n    md: {\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 0.1,\n      shadowRadius: 6,\n      elevation: 3,\n    },\n  },\n};\n</code></pre>"},{"location":"ui/styling-systems/#2-component-variants","title":"2. Component Variants","text":"<pre><code>// Use consistent variant patterns\ninterface ComponentProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  state?: 'default' | 'loading' | 'disabled';\n}\n\n// Map variants to styles consistently\nconst variantStyles = {\n  primary: 'bg-blue-500 text-white',\n  secondary: 'bg-gray-200 text-gray-800',\n  outline: 'border border-gray-300 text-gray-600',\n};\n\nconst sizeStyles = {\n  sm: 'px-3 py-2 text-sm',\n  md: 'px-4 py-3 text-base',\n  lg: 'px-6 py-4 text-lg',\n};\n</code></pre>"},{"location":"ui/styling-systems/#3-accessibility","title":"3. Accessibility","text":"<pre><code>// Include accessibility in your styling\n&lt;Pressable\n  className=\"p-4 bg-blue-500 rounded-lg\"\n  accessibilityRole=\"button\"\n  accessibilityLabel=\"Submit form\"\n  accessibilityHint=\"Submits the current form data\"\n  &gt;\n  &lt;Text className=\"text-white font-medium\"&gt;Submit&lt;/Text&gt;\n&lt;/Pressable&gt;\n</code></pre>"},{"location":"ui/styling-systems/#next-steps","title":"Next Steps","text":"<ol> <li>Choose your preferred styling approach based on team preferences and project requirements</li> <li>Set up a consistent design system with tokens and variants</li> <li>Implement responsive design patterns for different screen sizes</li> <li>Add dark mode support to your styling system</li> <li>Optimize performance by avoiding inline styles and memoizing expensive calculations</li> </ol> <p>Pro Tip: Start with NativeWind if you're familiar with Tailwind CSS. It provides excellent developer experience and performance. Use StyleSheet for maximum performance in critical components.</p>"}]}